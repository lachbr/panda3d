/* A Bison parser, made by GNU Bison 2.0.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse dcyyparse
#define yylex   dcyylex
#define yyerror dcyyerror
#define yylval  dcyylval
#define yychar  dcyychar
#define yydebug dcyydebug
#define yynerrs dcyynerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     UNSIGNED_INTEGER = 258,
     SIGNED_INTEGER = 259,
     REAL = 260,
     STRING = 261,
     HEX_STRING = 262,
     IDENTIFIER = 263,
     KEYWORD = 264,
     KW_DCLASS = 265,
     KW_STRUCT = 266,
     KW_FROM = 267,
     KW_IMPORT = 268,
     KW_TYPEDEF = 269,
     KW_KEYWORD = 270,
     KW_SWITCH = 271,
     KW_CASE = 272,
     KW_DEFAULT = 273,
     KW_BREAK = 274,
     KW_INT8 = 275,
     KW_INT16 = 276,
     KW_INT32 = 277,
     KW_INT64 = 278,
     KW_UINT8 = 279,
     KW_UINT16 = 280,
     KW_UINT32 = 281,
     KW_UINT64 = 282,
     KW_FLOAT64 = 283,
     KW_STRING = 284,
     KW_BLOB = 285,
     KW_BLOB32 = 286,
     KW_INT8ARRAY = 287,
     KW_INT16ARRAY = 288,
     KW_INT32ARRAY = 289,
     KW_UINT8ARRAY = 290,
     KW_UINT16ARRAY = 291,
     KW_UINT32ARRAY = 292,
     KW_UINT32UINT8ARRAY = 293,
     KW_CHAR = 294,
     START_DC = 295,
     START_PARAMETER_VALUE = 296,
     START_PARAMETER_DESCRIPTION = 297
   };
#endif
#define UNSIGNED_INTEGER 258
#define SIGNED_INTEGER 259
#define REAL 260
#define STRING 261
#define HEX_STRING 262
#define IDENTIFIER 263
#define KEYWORD 264
#define KW_DCLASS 265
#define KW_STRUCT 266
#define KW_FROM 267
#define KW_IMPORT 268
#define KW_TYPEDEF 269
#define KW_KEYWORD 270
#define KW_SWITCH 271
#define KW_CASE 272
#define KW_DEFAULT 273
#define KW_BREAK 274
#define KW_INT8 275
#define KW_INT16 276
#define KW_INT32 277
#define KW_INT64 278
#define KW_UINT8 279
#define KW_UINT16 280
#define KW_UINT32 281
#define KW_UINT64 282
#define KW_FLOAT64 283
#define KW_STRING 284
#define KW_BLOB 285
#define KW_BLOB32 286
#define KW_INT8ARRAY 287
#define KW_INT16ARRAY 288
#define KW_INT32ARRAY 289
#define KW_UINT8ARRAY 290
#define KW_UINT16ARRAY 291
#define KW_UINT32ARRAY 292
#define KW_UINT32UINT8ARRAY 293
#define KW_CHAR 294
#define START_DC 295
#define START_PARAMETER_VALUE 296
#define START_PARAMETER_DESCRIPTION 297




/* Copy the first part of user declarations.  */
#line 6 "dcParser.yxx"

#include "dcLexerDefs.h"
#include "dcParserDefs.h"
#include "dcFile.h"
#include "dcClass.h"
#include "dcSwitch.h"
#include "dcAtomicField.h"
#include "dcMolecularField.h"
#include "dcClassParameter.h"
#include "dcSwitchParameter.h"
#include "dcArrayParameter.h"
#include "dcSimpleParameter.h"
#include "dcTypedef.h"
#include "dcKeyword.h"
#include "dcPacker.h"
#include "dcNumericRange.h"

// Because our token type contains objects of type string, which
// require correct copy construction (and not simply memcpying), we
// cannot use bison's built-in auto-stack-grow feature.  As an easy
// solution, we ensure here that we have enough yacc stack to start
// with, and that it doesn't ever try to grow.
#define YYINITDEPTH 1000
#define YYMAXDEPTH 1000

DCFile *dc_file = (DCFile *)NULL;
static DCClass *current_class = (DCClass *)NULL;
static DCSwitch *current_switch = (DCSwitch *)NULL;
static DCAtomicField *current_atomic = (DCAtomicField *)NULL;
static DCMolecularField *current_molecular = (DCMolecularField *)NULL;
static DCParameter *current_parameter = (DCParameter *)NULL;
static DCKeywordList current_keyword_list;
static DCPacker default_packer;
static DCPacker *current_packer;
static DCDoubleRange double_range;
static DCUnsignedIntRange uint_range;
static DCField *parameter_description = (DCField *)NULL;

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

void
dc_init_parser(istream &in, const string &filename, DCFile &file) {
  dc_file = &file;
  dc_init_lexer(in, filename);
}

void
dc_init_parser_parameter_value(istream &in, const string &filename, 
                               DCPacker &packer) {
  dc_file = NULL;
  current_packer = &packer;
  dc_init_lexer(in, filename);
  dc_start_parameter_value();
}

void
dc_init_parser_parameter_description(istream &in, const string &filename,
                                     DCFile *file) {
  dc_file = file;
  dc_init_lexer(in, filename);
  parameter_description = NULL;
  dc_start_parameter_description();
}

DCField *
dc_get_parameter_description() {
  return parameter_description;
}

void
dc_cleanup_parser() {
  dc_file = (DCFile *)NULL;
}



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
typedef int YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 213 of yacc.c.  */
#line 257 "y.tab.c"

#if ! defined (yyoverflow) || YYERROR_VERBOSE

# ifndef YYFREE
#  define YYFREE free
# endif
# ifndef YYMALLOC
#  define YYMALLOC malloc
# endif

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   else
#    define YYSTACK_ALLOC alloca
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short int) + sizeof (YYSTYPE))			\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined (__GNUC__) && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short int yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  57
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   430

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  58
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  81
/* YYNRULES -- Number of rules. */
#define YYNRULES  188
/* YYNRULES -- Number of states. */
#define YYNSTATES  282

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   297

#define YYTRANSLATE(YYX) 						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,    54,     2,     2,
      51,    52,    46,     2,    47,    55,    45,    44,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    50,    43,
       2,    53,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    56,     2,    57,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    48,     2,    49,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    17,    20,    23,
      26,    29,    32,    34,    38,    40,    44,    47,    48,    54,
      56,    58,    60,    64,    67,    70,    73,    75,    77,    78,
      86,    88,    90,    93,    95,    99,   101,   104,   108,   111,
     114,   118,   121,   122,   130,   132,   134,   137,   139,   143,
     145,   148,   152,   155,   158,   162,   165,   166,   172,   174,
     176,   178,   182,   184,   185,   189,   191,   193,   194,   199,
     201,   202,   207,   209,   211,   213,   215,   217,   219,   222,
     225,   228,   230,   235,   239,   243,   245,   247,   249,   251,
     253,   255,   259,   262,   266,   272,   277,   279,   281,   285,
     288,   292,   298,   303,   305,   310,   312,   316,   320,   325,
     327,   329,   331,   333,   335,   337,   339,   341,   343,   345,
     347,   349,   350,   355,   357,   359,   361,   363,   365,   366,
     371,   372,   377,   378,   383,   387,   391,   395,   399,   401,
     404,   406,   408,   410,   414,   416,   418,   420,   422,   424,
     426,   428,   430,   432,   434,   436,   438,   440,   442,   444,
     446,   448,   450,   452,   454,   456,   459,   461,   462,   467,
     469,   471,   475,   477,   479,   480,   490,   492,   495,   498,
     501,   504,   507,   508,   513,   516,   519,   522,   524
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short int yyrhs[] =
{
      59,     0,    -1,    40,    60,    -1,    41,   113,    -1,    42,
      99,    -1,   138,    -1,    60,    43,    -1,    60,    69,    -1,
      60,   130,    -1,    60,    63,    -1,    60,    67,    -1,    60,
      68,    -1,     8,    -1,    61,    44,     8,    -1,    61,    -1,
      62,    45,    61,    -1,    13,    62,    -1,    -1,    12,    62,
      13,    64,    65,    -1,    66,    -1,    46,    -1,    61,    -1,
      66,    47,    61,    -1,    14,    97,    -1,    15,     8,    -1,
      15,     9,    -1,    70,    -1,    77,    -1,    -1,    10,   129,
      71,    73,    48,    75,    49,    -1,     8,    -1,   138,    -1,
      50,    74,    -1,    72,    -1,    74,    47,    72,    -1,   138,
      -1,    75,    43,    -1,    75,    76,    43,    -1,    84,   123,
      -1,   125,   124,    -1,    94,   123,    43,    -1,    92,   123,
      -1,    -1,    11,   129,    78,    80,    48,    82,    49,    -1,
       8,    -1,   138,    -1,    50,    81,    -1,    79,    -1,    81,
      47,    79,    -1,   138,    -1,    82,    43,    -1,    82,    83,
      43,    -1,    84,   124,    -1,   125,   124,    -1,    94,   124,
      43,    -1,    92,   124,    -1,    -1,   129,    51,    85,    86,
      52,    -1,   138,    -1,    87,    -1,    88,    -1,    87,    47,
      88,    -1,    97,    -1,    -1,   104,    90,   105,    -1,   104,
      -1,    89,    -1,    -1,    89,    53,    93,   113,    -1,    91,
      -1,    -1,    91,    53,    95,   113,    -1,    89,    -1,    91,
      -1,    92,    -1,    94,    -1,    96,    -1,    84,    -1,    84,
     124,    -1,    94,   124,    -1,    92,   124,    -1,   122,    -1,
     100,    51,   102,    52,    -1,   100,    44,   107,    -1,   100,
      54,   111,    -1,   100,    -1,     8,    -1,    77,    -1,   130,
      -1,   138,    -1,   112,    -1,   112,    55,   112,    -1,   112,
     111,    -1,   102,    47,   112,    -1,   102,    47,   112,    55,
     112,    -1,   102,    47,   112,   111,    -1,   138,    -1,   106,
      -1,   106,    55,   106,    -1,   106,   108,    -1,   103,    47,
     106,    -1,   103,    47,   106,    55,   106,    -1,   103,    47,
     106,   108,    -1,   101,    -1,   104,    56,   103,    57,    -1,
       8,    -1,   105,    44,   107,    -1,   105,    54,   111,    -1,
     105,    56,   103,    57,    -1,     6,    -1,   107,    -1,     3,
      -1,     4,    -1,     4,    -1,     3,    -1,   110,    -1,   109,
      -1,     5,    -1,     6,    -1,   111,    -1,   115,    -1,    -1,
       8,    53,   114,   115,    -1,   109,    -1,   110,    -1,     5,
      -1,     6,    -1,     7,    -1,    -1,    48,   116,   119,    49,
      -1,    -1,    56,   117,   119,    57,    -1,    -1,    51,   118,
     119,    52,    -1,   109,    46,   107,    -1,   110,    46,   107,
      -1,     5,    46,   107,    -1,     7,    46,   107,    -1,   120,
      -1,   121,   120,    -1,   138,    -1,    47,    -1,   113,    -1,
     121,    47,   113,    -1,    20,    -1,    21,    -1,    22,    -1,
      23,    -1,    24,    -1,    25,    -1,    26,    -1,    27,    -1,
      28,    -1,    29,    -1,    30,    -1,    31,    -1,    32,    -1,
      33,    -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,
      38,    -1,    39,    -1,   138,    -1,   123,     9,    -1,   123,
      -1,    -1,     8,    50,   126,   128,    -1,     8,    -1,   127,
      -1,   128,    47,   127,    -1,   138,    -1,     8,    -1,    -1,
      16,   129,    51,    98,    52,    48,   131,   132,    49,    -1,
     138,    -1,   132,    43,    -1,   132,   133,    -1,   132,   135,
      -1,   132,   136,    -1,   132,   137,    -1,    -1,    17,   134,
     113,    50,    -1,    18,    50,    -1,    19,    43,    -1,    94,
      43,    -1,    92,    -1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,   168,   168,   169,   170,   177,   178,   179,   190,   196,
     197,   198,   202,   203,   210,   211,   218,   223,   222,   230,
     231,   238,   242,   249,   267,   271,   282,   283,   288,   287,
     300,   323,   324,   328,   334,   348,   349,   350,   363,   373,
     374,   382,   393,   392,   405,   428,   429,   433,   439,   448,
     449,   450,   461,   468,   469,   473,   481,   480,   499,   500,
     504,   505,   509,   519,   518,   529,   533,   535,   534,   563,
     565,   564,   593,   594,   598,   599,   603,   607,   614,   618,
     622,   629,   633,   642,   658,   673,   674,   706,   722,   741,
     745,   752,   759,   768,   774,   780,   791,   795,   802,   809,
     816,   822,   828,   837,   838,   849,   854,   869,   884,   891,
     900,   904,   915,   929,   933,   937,   941,   945,   949,   958,
     963,   968,   967,   983,   987,   991,   995,   999,  1004,  1003,
    1012,  1011,  1020,  1019,  1027,  1033,  1039,  1045,  1054,  1055,
    1059,  1060,  1064,  1065,  1069,  1073,  1077,  1081,  1085,  1089,
    1093,  1097,  1101,  1105,  1109,  1113,  1117,  1121,  1125,  1129,
    1133,  1137,  1141,  1145,  1152,  1156,  1163,  1173,  1172,  1183,
    1199,  1205,  1219,  1223,  1228,  1227,  1241,  1242,  1243,  1244,
    1245,  1246,  1260,  1259,  1280,  1289,  1296,  1300,  1306
};
#endif

#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "UNSIGNED_INTEGER", "SIGNED_INTEGER",
  "REAL", "STRING", "HEX_STRING", "IDENTIFIER", "KEYWORD", "KW_DCLASS",
  "KW_STRUCT", "KW_FROM", "KW_IMPORT", "KW_TYPEDEF", "KW_KEYWORD",
  "KW_SWITCH", "KW_CASE", "KW_DEFAULT", "KW_BREAK", "KW_INT8", "KW_INT16",
  "KW_INT32", "KW_INT64", "KW_UINT8", "KW_UINT16", "KW_UINT32",
  "KW_UINT64", "KW_FLOAT64", "KW_STRING", "KW_BLOB", "KW_BLOB32",
  "KW_INT8ARRAY", "KW_INT16ARRAY", "KW_INT32ARRAY", "KW_UINT8ARRAY",
  "KW_UINT16ARRAY", "KW_UINT32ARRAY", "KW_UINT32UINT8ARRAY", "KW_CHAR",
  "START_DC", "START_PARAMETER_VALUE", "START_PARAMETER_DESCRIPTION",
  "';'", "'/'", "'.'", "'*'", "','", "'{'", "'}'", "':'", "'('", "')'",
  "'='", "'%'", "'-'", "'['", "']'", "$accept", "grammar", "dc",
  "slash_identifier", "import_identifier", "import", "@1",
  "import_symbol_list_or_star", "import_symbol_list", "typedef_decl",
  "keyword_decl", "dclass_or_struct", "dclass", "@2", "dclass_name",
  "dclass_derivation", "dclass_base_list", "dclass_fields", "dclass_field",
  "struct", "@3", "struct_name", "struct_derivation", "struct_base_list",
  "struct_fields", "struct_field", "atomic_field", "@4", "parameter_list",
  "nonempty_parameter_list", "atomic_element", "named_parameter", "@5",
  "unnamed_parameter", "named_parameter_with_default", "@6",
  "unnamed_parameter_with_default", "@7", "parameter",
  "parameter_with_default", "parameter_or_atomic", "parameter_description",
  "simple_type_name", "type_name", "double_range", "uint_range",
  "type_definition", "parameter_definition", "char_or_uint",
  "small_unsigned_integer", "small_negative_integer", "signed_integer",
  "unsigned_integer", "number", "char_or_number", "parameter_value", "@8",
  "parameter_actual_value", "@9", "@10", "@11", "array", "maybe_comma",
  "array_def", "type_token", "keyword_list", "no_keyword_list",
  "molecular_field", "@12", "atomic_name", "molecular_atom_list",
  "optional_name", "switch", "@13", "switch_fields", "switch_case", "@14",
  "switch_default", "switch_break", "switch_field", "empty", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short int yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,    59,    47,    46,    42,    44,   123,   125,
      58,    40,    41,    61,    37,    45,    91,    93
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned char yyr1[] =
{
       0,    58,    59,    59,    59,    60,    60,    60,    60,    60,
      60,    60,    61,    61,    62,    62,    63,    64,    63,    65,
      65,    66,    66,    67,    68,    68,    69,    69,    71,    70,
      72,    73,    73,    74,    74,    75,    75,    75,    76,    76,
      76,    76,    78,    77,    79,    80,    80,    81,    81,    82,
      82,    82,    83,    83,    83,    83,    85,    84,    86,    86,
      87,    87,    88,    90,    89,    91,    92,    93,    92,    94,
      95,    94,    96,    96,    97,    97,    98,    98,    99,    99,
      99,   100,   100,   100,   100,   101,   101,   101,   101,   102,
     102,   102,   102,   102,   102,   102,   103,   103,   103,   103,
     103,   103,   103,   104,   104,   105,   105,   105,   105,   106,
     106,   107,   108,   109,   110,   111,   111,   111,   112,   112,
     113,   114,   113,   115,   115,   115,   115,   115,   116,   115,
     117,   115,   118,   115,   115,   115,   115,   115,   119,   119,
     120,   120,   121,   121,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   123,   123,   124,   126,   125,   127,
     128,   128,   129,   129,   131,   130,   132,   132,   132,   132,
     132,   132,   134,   133,   135,   136,   137,   137,   138
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     2,     2,
       2,     2,     1,     3,     1,     3,     2,     0,     5,     1,
       1,     1,     3,     2,     2,     2,     1,     1,     0,     7,
       1,     1,     2,     1,     3,     1,     2,     3,     2,     2,
       3,     2,     0,     7,     1,     1,     2,     1,     3,     1,
       2,     3,     2,     2,     3,     2,     0,     5,     1,     1,
       1,     3,     1,     0,     3,     1,     1,     0,     4,     1,
       0,     4,     1,     1,     1,     1,     1,     1,     2,     2,
       2,     1,     4,     3,     3,     1,     1,     1,     1,     1,
       1,     3,     2,     3,     5,     4,     1,     1,     3,     2,
       3,     5,     4,     1,     4,     1,     3,     3,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     4,     1,     1,     1,     1,     1,     0,     4,
       0,     4,     0,     4,     3,     3,     3,     3,     1,     2,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     0,     4,     1,
       1,     3,     1,     1,     0,     9,     1,     2,     2,     2,
       2,     2,     0,     4,     2,     2,     2,     1,     0
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned char yydefact[] =
{
       0,   188,     0,   188,     0,     2,     5,   114,   113,   125,
     126,   127,     0,   128,   132,   130,   123,   124,     3,   120,
      86,   188,   188,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,    87,   188,    66,    69,   188,   188,     4,
      85,   103,    65,    81,     0,    88,   172,     1,   188,     0,
       0,     0,     0,     6,     9,    10,    11,     7,    26,    27,
       8,     0,     0,   121,   188,   188,   188,     0,     0,   173,
      42,     0,   166,    78,   164,    67,    70,    80,    79,     0,
     188,     0,   188,     0,    56,    28,    12,    14,     0,    16,
      86,    74,    75,    23,    24,    25,   111,   136,   137,     0,
     141,   142,     0,   138,   188,   140,     0,     0,   134,   135,
     188,   188,   165,     0,     0,    83,   117,   118,     0,   116,
     115,   119,    90,    89,    84,   109,     0,    97,   110,    96,
     105,    64,   188,   188,     0,    17,     0,   122,   129,   141,
     139,   133,   131,     0,     0,    45,    77,    72,    73,    76,
       0,    68,    71,     0,    82,     0,    92,     0,   104,   112,
       0,    99,     0,     0,   188,     0,    59,    60,    62,    58,
       0,     0,    31,    13,     0,    15,   143,    44,    47,    46,
     188,     0,    93,    91,   100,    98,   106,   107,     0,    57,
       0,    30,    33,    32,   188,    20,    21,    18,    19,     0,
     188,    49,   174,     0,    95,     0,   102,   108,    61,     0,
     188,    35,     0,    48,    86,    50,    43,     0,   188,   188,
     188,   188,   188,    94,   101,    34,    36,    29,     0,   188,
     188,   188,   188,    22,   167,    51,    52,    55,     0,    53,
       0,   176,    37,    38,    41,     0,    39,     0,    54,   182,
       0,     0,   177,   175,   187,     0,   178,   179,   180,   181,
      40,   169,   170,   168,     0,   184,   185,   186,     0,     0,
     171,   183
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short int yydefgoto[] =
{
      -1,     4,     5,    97,    98,    64,   184,   207,   208,    65,
      66,    67,    68,   143,   202,   181,   203,   220,   238,    43,
     120,   188,   154,   189,   210,   227,    44,   142,   175,   176,
     177,    45,    93,    46,   101,   123,   102,   124,   159,   178,
     160,    49,    50,    51,   128,   136,    52,   141,   137,   138,
     171,    16,    17,   131,   132,   111,   109,    19,    74,    76,
      75,   112,   113,   114,    53,    82,    83,   231,   257,   272,
     273,    54,    55,   232,   250,   266,   274,   267,   268,   269,
      84
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -141
static const short int yypact[] =
{
      93,  -141,   122,   359,    32,   138,  -141,  -141,  -141,     4,
    -141,     6,     1,  -141,  -141,  -141,    10,    12,  -141,  -141,
      -6,    52,    52,  -141,  -141,  -141,  -141,  -141,  -141,  -141,
    -141,  -141,  -141,  -141,  -141,  -141,  -141,  -141,  -141,  -141,
    -141,  -141,  -141,  -141,  -141,    27,    61,  -141,  -141,  -141,
      -7,  -141,     8,  -141,    46,  -141,  -141,  -141,    52,   108,
     108,   391,    31,  -141,  -141,  -141,  -141,  -141,  -141,  -141,
    -141,   116,   116,  -141,    62,    62,    62,   116,   116,  -141,
    -141,    69,   128,  -141,  -141,  -141,  -141,  -141,  -141,   116,
     102,   152,    84,   123,  -141,  -141,  -141,    94,    44,    99,
    -141,  -141,  -141,  -141,  -141,  -141,  -141,  -141,  -141,   136,
    -141,  -141,   109,  -141,   117,  -141,   113,   110,  -141,  -141,
     118,   359,  -141,   122,   122,  -141,  -141,  -141,    51,  -141,
    -141,  -141,    16,  -141,  -141,  -141,   -16,    18,  -141,  -141,
    -141,    -8,   391,   119,   158,  -141,   108,  -141,  -141,   122,
    -141,  -141,  -141,   163,   124,  -141,  -141,  -141,  -141,  -141,
     127,  -141,  -141,   102,  -141,   102,  -141,    84,  -141,  -141,
      84,  -141,   116,   152,    84,   130,   129,  -141,  -141,  -141,
     166,   132,  -141,  -141,    35,    94,  -141,  -141,  -141,   139,
    -141,   135,    30,  -141,    19,  -141,  -141,  -141,     2,  -141,
     391,  -141,  -141,   147,  -141,  -141,    94,  -141,   148,   163,
     291,  -141,  -141,   102,  -141,    84,  -141,  -141,  -141,   166,
     325,  -141,   108,  -141,    50,  -141,  -141,   142,  -141,  -141,
    -141,  -141,  -141,  -141,  -141,  -141,  -141,  -141,   153,  -141,
    -141,  -141,  -141,    94,  -141,  -141,  -141,  -141,   154,  -141,
     257,  -141,  -141,   128,   128,    29,  -141,   167,  -141,  -141,
     149,   155,  -141,  -141,  -141,   157,  -141,  -141,  -141,  -141,
    -141,  -141,  -141,   156,   122,  -141,  -141,  -141,   167,   151,
    -141,  -141
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
    -141,  -141,  -141,  -131,   144,  -141,  -141,  -141,  -141,  -141,
    -141,  -141,  -141,  -141,   -14,  -141,  -141,  -141,  -141,   201,
    -141,     5,  -141,  -141,  -141,  -141,  -116,  -141,  -141,  -141,
      11,    91,  -141,    95,    -1,  -141,     0,  -141,  -141,   160,
    -141,  -141,  -141,  -141,  -141,    34,  -141,  -141,  -140,   -60,
      21,   -81,   -77,   -90,  -137,    -2,  -141,   115,  -141,  -141,
    -141,    87,   103,  -141,  -141,   -80,   -40,     7,  -141,   -56,
    -141,    41,   213,  -141,  -141,  -141,  -141,  -141,  -141,  -141,
       3
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -174
static const short int yytable[] =
{
      18,   134,    47,    48,     6,   156,    56,    87,    88,   129,
     129,   107,   108,   130,   130,   185,   -63,   118,   119,     7,
       8,   126,   169,   169,    56,    56,   192,   194,   193,   125,
     195,   167,    57,     7,     8,   126,   172,    89,   122,   104,
     105,   168,   166,    96,    90,  -173,   173,    91,   174,   167,
      71,   129,    72,   206,    73,   130,    77,   145,    78,   217,
      79,    56,    80,    81,    92,     7,     8,     9,    10,    11,
      12,   165,   270,   170,   215,   234,   233,   115,   115,   115,
      85,   205,   129,   197,   129,   213,   130,   106,   130,   146,
     135,   243,   129,   133,   228,   139,   130,    94,   163,    95,
     244,  -173,   214,   164,   239,     7,     8,   126,   127,   110,
      13,   129,   196,    14,    86,   130,    96,   115,    15,   106,
     121,   161,   162,   155,    56,     7,     8,     9,    10,    11,
      12,   140,   129,     1,     2,     3,   130,   122,   144,     7,
       8,     9,    10,    11,   146,   179,   182,   186,    58,    21,
      59,    60,    61,    62,    22,     7,     8,   126,   148,   253,
     254,   255,   116,   117,   149,   151,   183,   152,   153,   180,
      13,   187,   190,    14,   201,   271,   200,   139,    15,   191,
     204,    63,   199,   212,    13,   245,   209,    14,   246,   247,
     248,   249,    15,   211,   219,   222,   252,   258,   276,   275,
     277,   281,   256,   278,    99,   235,    69,   221,   198,   229,
     230,   218,   157,    56,   223,   216,   158,   150,    70,   240,
     241,   103,   280,    56,   147,     0,     0,   242,     0,     0,
       0,     0,     0,     0,     0,   251,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   264,
     265,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   100,     0,     0,    21,     0,
       0,     0,   279,    22,   259,   260,   261,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,     0,     0,   224,
     262,     0,    21,     0,     0,     0,   263,    22,     0,     0,
       0,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,     0,     0,   224,   225,     0,    21,     0,     0,     0,
     226,    22,     0,     0,     0,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,     0,     0,    20,   236,     0,
      21,     0,     0,     0,   237,    22,     0,     0,     0,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,   100,
       0,     0,    21,     0,     0,     0,     0,    22,     0,     0,
       0,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42
};

static const short int yycheck[] =
{
       2,    91,     3,     3,     1,   121,     3,    47,    48,    90,
      91,    71,    72,    90,    91,   146,     8,    77,    78,     3,
       4,     5,     4,     4,    21,    22,   163,   167,   165,    89,
     170,    47,     0,     3,     4,     5,    44,    44,     9,     8,
       9,    57,   132,     8,    51,    51,    54,    54,    56,    47,
      46,   132,    46,   184,    53,   132,    46,    13,    46,    57,
       8,    58,    21,    22,    56,     3,     4,     5,     6,     7,
       8,    55,    43,    55,    55,   215,   213,    74,    75,    76,
      53,    46,   163,   173,   165,    55,   163,     3,   165,    45,
       6,   222,   173,    90,   210,    92,   173,    51,    47,    58,
      50,    51,   192,    52,   220,     3,     4,     5,     6,    47,
      48,   192,   172,    51,    53,   192,     8,   114,    56,     3,
      51,   123,   124,   120,   121,     3,     4,     5,     6,     7,
       8,     8,   213,    40,    41,    42,   213,     9,    44,     3,
       4,     5,     6,     7,    45,   142,   143,   149,    10,    11,
      12,    13,    14,    15,    16,     3,     4,     5,    49,   239,
     240,   241,    75,    76,    47,    52,     8,    57,    50,    50,
      48,     8,    48,    51,     8,     8,    47,   174,    56,    52,
      48,    43,    52,    48,    48,    43,    47,    51,   228,   229,
     230,   231,    56,   190,    47,    47,    43,    43,    43,    50,
      43,    50,   242,    47,    60,   219,     5,   204,   174,   210,
     210,   200,   121,   210,   209,   194,   121,   114,     5,   220,
     220,    61,   278,   220,   109,    -1,    -1,   220,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   250,
     250,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,   274,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    -1,    -1,     8,
      43,    -1,    11,    -1,    -1,    -1,    49,    16,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    -1,    -1,     8,    43,    -1,    11,    -1,    -1,    -1,
      49,    16,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    -1,    -1,     8,    43,    -1,
      11,    -1,    -1,    -1,    49,    16,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,     8,
      -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned char yystos[] =
{
       0,    40,    41,    42,    59,    60,   138,     3,     4,     5,
       6,     7,     8,    48,    51,    56,   109,   110,   113,   115,
       8,    11,    16,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    77,    84,    89,    91,    92,    94,    99,
     100,   101,   104,   122,   129,   130,   138,     0,    10,    12,
      13,    14,    15,    43,    63,    67,    68,    69,    70,    77,
     130,    46,    46,    53,   116,   118,   117,    46,    46,     8,
     129,   129,   123,   124,   138,    53,    53,   124,   124,    44,
      51,    54,    56,    90,    51,   129,     8,    61,    62,    62,
       8,    92,    94,    97,     8,     9,     3,   107,   107,   114,
      47,   113,   119,   120,   121,   138,   119,   119,   107,   107,
      78,    51,     9,    93,    95,   107,     5,     6,   102,   109,
     110,   111,   112,   138,   111,     6,   103,   106,   107,   138,
       8,   105,    85,    71,    44,    13,    45,   115,    49,    47,
     120,    52,    57,    50,    80,   138,    84,    89,    91,    96,
      98,   113,   113,    47,    52,    55,   111,    47,    57,     4,
      55,   108,    44,    54,    56,    86,    87,    88,    97,   138,
      50,    73,   138,     8,    64,    61,   113,     8,    79,    81,
      48,    52,   112,   112,   106,   106,   107,   111,   103,    52,
      47,     8,    72,    74,    48,    46,    61,    65,    66,    47,
      82,   138,    48,    55,   111,    55,   108,    57,    88,    47,
      75,   138,    47,    79,     8,    43,    49,    83,    84,    92,
      94,   125,   131,   112,   106,    72,    43,    49,    76,    84,
      92,    94,   125,    61,    50,    43,   124,   124,   124,   124,
     132,   138,    43,   123,   123,   123,   124,   126,    43,    17,
      18,    19,    43,    49,    92,    94,   133,   135,   136,   137,
      43,     8,   127,   128,   134,    50,    43,    43,    47,   113,
     127,    50
};

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");\
      YYERROR;							\
    }								\
while (0)


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (N)								\
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (0)
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
              (Loc).first_line, (Loc).first_column,	\
              (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Type, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short int *bottom, short int *top)
#else
static void
yy_stack_print (bottom, top)
    short int *bottom;
    short int *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

#endif /* !YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);


# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short int yyssa[YYINITDEPTH];
  short int *yyss = yyssa;
  register short int *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;


  yyvsp[0] = yylval;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short int *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short int *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a look-ahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to look-ahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 4:
#line 171 "dcParser.yxx"
    {
  parameter_description = (yyvsp[0].u.field);
}
    break;

  case 7:
#line 180 "dcParser.yxx"
    {
  if (!dc_file->add_class((yyvsp[0].u.dclass))) {
    DCClass *old_class = dc_file->get_class_by_name((yyvsp[0].u.dclass)->get_name());
    if (old_class != (DCClass *)NULL && old_class->is_bogus_class()) {
      yyerror("Base class defined after its first reference: " + (yyvsp[0].u.dclass)->get_name());
    } else {
      yyerror("Duplicate class name: " + (yyvsp[0].u.dclass)->get_name());
    }
  }
}
    break;

  case 8:
#line 191 "dcParser.yxx"
    {
  if (!dc_file->add_switch((yyvsp[0].u.dswitch))) {
    yyerror("Duplicate class name: " + (yyvsp[0].u.dswitch)->get_name());
  }
}
    break;

  case 13:
#line 204 "dcParser.yxx"
    {
  (yyval.str) = (yyvsp[-2].str) + string("/") + (yyvsp[0].str);
}
    break;

  case 15:
#line 212 "dcParser.yxx"
    {
  (yyval.str) = (yyvsp[-2].str) + string(".") + (yyvsp[0].str);
}
    break;

  case 16:
#line 219 "dcParser.yxx"
    {
  dc_file->add_import_module((yyvsp[0].str));
}
    break;

  case 17:
#line 223 "dcParser.yxx"
    {
  dc_file->add_import_module((yyvsp[-1].str));
}
    break;

  case 20:
#line 232 "dcParser.yxx"
    {
  dc_file->add_import_symbol("*");
}
    break;

  case 21:
#line 239 "dcParser.yxx"
    {
  dc_file->add_import_symbol((yyvsp[0].str));
}
    break;

  case 22:
#line 243 "dcParser.yxx"
    {
  dc_file->add_import_symbol((yyvsp[0].str));
}
    break;

  case 23:
#line 250 "dcParser.yxx"
    {
  if ((yyvsp[0].u.parameter) != (DCParameter *)NULL) {
    DCTypedef *dtypedef = new DCTypedef((yyvsp[0].u.parameter));
    
    if (!dc_file->add_typedef(dtypedef)) {
      DCTypedef *old_typedef = dc_file->get_typedef_by_name(dtypedef->get_name());
      if (old_typedef->is_bogus_typedef()) {
        yyerror("typedef defined after its first reference: " + dtypedef->get_name());
      } else {
        yyerror("Duplicate typedef name: " + dtypedef->get_name());
      }
    }
  }
}
    break;

  case 24:
#line 268 "dcParser.yxx"
    {
  dc_file->add_keyword((yyvsp[0].str));
}
    break;

  case 25:
#line 272 "dcParser.yxx"
    {
  // This keyword has already been defined.  But since we are now
  // explicitly defining it, clear its bitmask, so that we will have a
  // new hash code--doing this will allow us to phase out the
  // historical hash code support later.
  ((DCKeyword *)(yyvsp[0].u.keyword))->clear_historical_flag();
}
    break;

  case 28:
#line 288 "dcParser.yxx"
    {
  (yyval.u.dclass) = current_class;
  current_class = new DCClass(dc_file, (yyvsp[0].str), false, false);
}
    break;

  case 29:
#line 293 "dcParser.yxx"
    {
  (yyval.u.dclass) = current_class;
  current_class = (yyvsp[-4].u.dclass);
}
    break;

  case 30:
#line 301 "dcParser.yxx"
    {
  if (dc_file == (DCFile *)NULL) {
    yyerror("No DCFile available, so no class names are predefined.");
    (yyval.u.dclass) = NULL;

  } else {
    DCClass *dclass = dc_file->get_class_by_name((yyvsp[0].str));
    if (dclass == (DCClass *)NULL) {
      // Create a bogus class as a forward reference.
      dclass = new DCClass(dc_file, (yyvsp[0].str), false, true);
      dc_file->add_class(dclass);
    }
    if (dclass->is_struct()) {
      yyerror("struct name not allowed");
    }
  
    (yyval.u.dclass) = dclass;
  }
}
    break;

  case 33:
#line 329 "dcParser.yxx"
    {
  if ((yyvsp[0].u.dclass) != (DCClass *)NULL) {
    current_class->add_parent((yyvsp[0].u.dclass));
  }
}
    break;

  case 34:
#line 335 "dcParser.yxx"
    {
  if (!dc_multiple_inheritance) {
    yyerror("Multiple inheritance is not supported without \"dc-multiple-inheritance 1\" in your Config.prc file.");

  } else {
    if ((yyvsp[0].u.dclass) != (DCClass *)NULL) {
      current_class->add_parent((yyvsp[0].u.dclass));
    }
  }
}
    break;

  case 37:
#line 351 "dcParser.yxx"
    {
  if ((yyvsp[-1].u.field) == (DCField *)NULL) {
    // Pass this error up.
  } else if (!current_class->add_field((yyvsp[-1].u.field))) {
    yyerror("Duplicate field name: " + (yyvsp[-1].u.field)->get_name());
  } else if ((yyvsp[-1].u.field)->get_number() < 0) {
    yyerror("A non-network field cannot be stored on a dclass");
  }
}
    break;

  case 38:
#line 364 "dcParser.yxx"
    {
  if ((yyvsp[-1].u.field) != (DCField *)NULL) {
    if ((yyvsp[-1].u.field)->get_name().empty()) {
      yyerror("Field name required.");
    }
    (yyvsp[-1].u.field)->copy_keywords(current_keyword_list);
  }
  (yyval.u.field) = (yyvsp[-1].u.field);
}
    break;

  case 40:
#line 375 "dcParser.yxx"
    {
  yyerror("Unnamed parameters are not allowed on a dclass");
  if ((yyvsp[-2].u.parameter) != (DCField *)NULL) {
    (yyvsp[-2].u.parameter)->copy_keywords(current_keyword_list);
  }
  (yyval.u.field) = (yyvsp[-2].u.parameter);
}
    break;

  case 41:
#line 383 "dcParser.yxx"
    {
  if ((yyvsp[-1].u.parameter) != (DCField *)NULL) {
    (yyvsp[-1].u.parameter)->copy_keywords(current_keyword_list);
  }
  (yyval.u.field) = (yyvsp[-1].u.parameter);
}
    break;

  case 42:
#line 393 "dcParser.yxx"
    {
  (yyval.u.dclass) = current_class;
  current_class = new DCClass(dc_file, (yyvsp[0].str), true, false);
}
    break;

  case 43:
#line 398 "dcParser.yxx"
    {
  (yyval.u.dclass) = current_class;
  current_class = (yyvsp[-4].u.dclass);
}
    break;

  case 44:
#line 406 "dcParser.yxx"
    {
  if (dc_file == (DCFile *)NULL) {
    yyerror("No DCFile available, so no struct names are predefined.");
    (yyval.u.dclass) = NULL;

  } else {
    DCClass *dstruct = dc_file->get_class_by_name((yyvsp[0].str));
    if (dstruct == (DCClass *)NULL) {
      // Create a bogus class as a forward reference.
      dstruct = new DCClass(dc_file, (yyvsp[0].str), false, true);
      dc_file->add_class(dstruct);
    }
    if (!dstruct->is_struct()) {
      yyerror("struct name required");
    }
  
    (yyval.u.dclass) = dstruct;
  }
}
    break;

  case 47:
#line 434 "dcParser.yxx"
    {
  if ((yyvsp[0].u.dclass) != (DCClass *)NULL) {
    current_class->add_parent((yyvsp[0].u.dclass));
  }
}
    break;

  case 48:
#line 440 "dcParser.yxx"
    {
  if ((yyvsp[0].u.dclass) != (DCClass *)NULL) {
    current_class->add_parent((yyvsp[0].u.dclass));
  }
}
    break;

  case 51:
#line 451 "dcParser.yxx"
    {
  if ((yyvsp[-1].u.field) == (DCField *)NULL) {
    // Pass this error up.
  } else if (!current_class->add_field((yyvsp[-1].u.field))) {
    yyerror("Duplicate field name: " + (yyvsp[-1].u.field)->get_name());
  }
}
    break;

  case 52:
#line 462 "dcParser.yxx"
    {
  if ((yyvsp[-1].u.field)->get_name().empty()) {
    yyerror("Field name required.");
  }
  (yyval.u.field) = (yyvsp[-1].u.field);
}
    break;

  case 54:
#line 470 "dcParser.yxx"
    {
  (yyval.u.field) = (yyvsp[-2].u.parameter);
}
    break;

  case 55:
#line 474 "dcParser.yxx"
    {
  (yyval.u.field) = (yyvsp[-1].u.parameter);
}
    break;

  case 56:
#line 481 "dcParser.yxx"
    {
  (yyval.u.field) = current_atomic;
  if (current_class == (DCClass *)NULL) {
    yyerror("Cannot define a method outside of a struct or class.");
    DCClass *temp_class = new DCClass(dc_file, "temp", false, false);  // memory leak.
    current_atomic = new DCAtomicField((yyvsp[-1].str), temp_class);
  } else {
    current_atomic = new DCAtomicField((yyvsp[-1].str), current_class);
  }
}
    break;

  case 57:
#line 492 "dcParser.yxx"
    {
  (yyval.u.field) = current_atomic;
  current_atomic = (yyvsp[-2].u.atomic);
}
    break;

  case 62:
#line 510 "dcParser.yxx"
    {
  if ((yyvsp[0].u.parameter) != (DCParameter *)NULL) {
    current_atomic->add_element((yyvsp[0].u.parameter));
  }
}
    break;

  case 63:
#line 519 "dcParser.yxx"
    {
  current_parameter = (yyvsp[0].u.parameter);
}
    break;

  case 64:
#line 523 "dcParser.yxx"
    {
  (yyval.u.parameter) = (yyvsp[0].u.parameter);
}
    break;

  case 67:
#line 535 "dcParser.yxx"
    {
  current_packer = &default_packer;
  current_packer->clear_data();
  if ((yyvsp[-1].u.parameter) != (DCField *)NULL) {
    current_packer->begin_pack((yyvsp[-1].u.parameter));
  }
}
    break;

  case 68:
#line 543 "dcParser.yxx"
    {
  bool is_valid = false;
  if ((yyvsp[-3].u.parameter) != (DCField *)NULL) {
    is_valid = (yyvsp[-3].u.parameter)->is_valid();
  }
  if (current_packer->end_pack()) {
    (yyvsp[-3].u.parameter)->set_default_value(current_packer->get_string());

  } else {
    if (is_valid) {
      yyerror("Invalid default value for type");
    }
    // If the current parameter isn't valid, we don't mind a pack
    // error (there's no way for us to validate the syntax).  So we'll
    // just ignore the default value in this case.
  }
}
    break;

  case 70:
#line 565 "dcParser.yxx"
    {
  current_packer = &default_packer;
  current_packer->clear_data();
  if ((yyvsp[-1].u.parameter) != (DCField *)NULL) {
    current_packer->begin_pack((yyvsp[-1].u.parameter));
  }
}
    break;

  case 71:
#line 573 "dcParser.yxx"
    {
  bool is_valid = false;
  if ((yyvsp[-3].u.parameter) != (DCField *)NULL) {
    is_valid = (yyvsp[-3].u.parameter)->is_valid();
  }
  if (current_packer->end_pack()) {
    (yyvsp[-3].u.parameter)->set_default_value(current_packer->get_string());

  } else {
    if (is_valid) {
      yyerror("Invalid default value for type");
    }
    // If the current parameter isn't valid, we don't mind a pack
    // error (there's no way for us to validate the syntax).  So we'll
    // just ignore the default value in this case.
  }
}
    break;

  case 76:
#line 604 "dcParser.yxx"
    {
  (yyval.u.field) = (yyvsp[0].u.parameter);
}
    break;

  case 77:
#line 608 "dcParser.yxx"
    {
  (yyval.u.field) = (yyvsp[0].u.field);
}
    break;

  case 78:
#line 615 "dcParser.yxx"
    {
  (yyval.u.field) = (yyvsp[-1].u.field);
}
    break;

  case 79:
#line 619 "dcParser.yxx"
    {
  (yyval.u.field) = (yyvsp[-1].u.parameter);
}
    break;

  case 80:
#line 623 "dcParser.yxx"
    {
  (yyval.u.field) = (yyvsp[-1].u.parameter);
}
    break;

  case 81:
#line 630 "dcParser.yxx"
    {
  (yyval.u.parameter) = new DCSimpleParameter((yyvsp[0].u.subatomic));
}
    break;

  case 82:
#line 634 "dcParser.yxx"
    {
  DCSimpleParameter *simple_param = (yyvsp[-3].u.parameter)->as_simple_parameter();
  nassertr(simple_param != (DCSimpleParameter *)NULL, 0);
  if (!simple_param->set_range(double_range)) {
    yyerror("Inappropriate range for type");
  }
  (yyval.u.parameter) = simple_param;
}
    break;

  case 83:
#line 643 "dcParser.yxx"
    {
  DCSimpleParameter *simple_param = (yyvsp[-2].u.parameter)->as_simple_parameter();
  nassertr(simple_param != (DCSimpleParameter *)NULL, 0);
  if (!simple_param->is_numeric_type()) {
    yyerror("A divisor is only valid on a numeric type.");

  } else if (!simple_param->set_divisor((yyvsp[0].u.s_uint))) {
    yyerror("Invalid divisor.");

  } else if (simple_param->has_modulus() && !simple_param->set_modulus(simple_param->get_modulus())) {
    // Changing the divisor may change the valid range for the modulus.
    yyerror("Invalid modulus.");
  }
  (yyval.u.parameter) = simple_param;
}
    break;

  case 84:
#line 659 "dcParser.yxx"
    { 
  DCSimpleParameter *simple_param = (yyvsp[-2].u.parameter)->as_simple_parameter();
  nassertr(simple_param != (DCSimpleParameter *)NULL, 0);
  if (!simple_param->is_numeric_type()) {
    yyerror("A divisor is only valid on a numeric type.");

  } else if (!simple_param->set_modulus((yyvsp[0].u.real))) {
    yyerror("Invalid modulus.");
  }
  (yyval.u.parameter) = simple_param;
}
    break;

  case 86:
#line 675 "dcParser.yxx"
    {
  if (dc_file == (DCFile *)NULL) {
    yyerror("Invalid type.");
    (yyval.u.parameter) = NULL;

  } else {
    DCTypedef *dtypedef = dc_file->get_typedef_by_name((yyvsp[0].str));
    if (dtypedef == (DCTypedef *)NULL) {
      // Maybe it's a class name.
      DCClass *dclass = dc_file->get_class_by_name((yyvsp[0].str));
      if (dclass != (DCClass *)NULL) {
        // Create an implicit typedef for this.
        dtypedef = new DCTypedef(new DCClassParameter(dclass), true);
      } else {
        // Maybe it's a switch name.
        DCSwitch *dswitch = dc_file->get_switch_by_name((yyvsp[0].str));
        if (dswitch != (DCSwitch *)NULL) {
          // This also gets an implicit typedef.
          dtypedef = new DCTypedef(new DCSwitchParameter(dswitch), true);
        } else {
          // It's an undefined typedef.  Create a bogus forward reference.
          dtypedef = new DCTypedef((yyvsp[0].str));
        }
      }
      
      dc_file->add_typedef(dtypedef);
    }
    
    (yyval.u.parameter) = dtypedef->make_new_parameter();
  }
}
    break;

  case 87:
#line 707 "dcParser.yxx"
    {
  // This is an inline struct definition.
  if ((yyvsp[0].u.dclass) == (DCClass *)NULL) {
    (yyval.u.parameter) = NULL;
  } else {
    if (dc_file != (DCFile *)NULL) {
      dc_file->add_thing_to_delete((yyvsp[0].u.dclass));
    } else {
      // This is a memory leak--this happens when we put an anonymous
      // struct reference within the string passed to
      // DCPackerInterface::check_match().  Maybe it doesn't really matter.
    }
    (yyval.u.parameter) = new DCClassParameter((yyvsp[0].u.dclass));
  }
}
    break;

  case 88:
#line 723 "dcParser.yxx"
    {
  // This is an inline switch definition.
  if ((yyvsp[0].u.dswitch) == (DCSwitch *)NULL) {
    (yyval.u.parameter) = NULL;
  } else {
    if (dc_file != (DCFile *)NULL) {
      dc_file->add_thing_to_delete((yyvsp[0].u.dswitch));
    } else {
      // This is a memory leak--this happens when we put an anonymous
      // switch reference within the string passed to
      // DCPackerInterface::check_match().  Maybe it doesn't really matter.
    }
    (yyval.u.parameter) = new DCSwitchParameter((yyvsp[0].u.dswitch));
  }
}
    break;

  case 89:
#line 742 "dcParser.yxx"
    {
  double_range.clear();
}
    break;

  case 90:
#line 746 "dcParser.yxx"
    {
  double_range.clear();
  if (!double_range.add_range((yyvsp[0].u.real), (yyvsp[0].u.real))) {
    yyerror("Overlapping range");
  }
}
    break;

  case 91:
#line 753 "dcParser.yxx"
    {
  double_range.clear();
  if (!double_range.add_range((yyvsp[-2].u.real), (yyvsp[0].u.real))) {
    yyerror("Overlapping range");
  }
}
    break;

  case 92:
#line 760 "dcParser.yxx"
    {
  double_range.clear();
  if ((yyvsp[0].u.real) >= 0) {
    yyerror("Syntax error");
  } else if (!double_range.add_range((yyvsp[-1].u.real), -(yyvsp[0].u.real))) {
    yyerror("Overlapping range");
  }
}
    break;

  case 93:
#line 769 "dcParser.yxx"
    {
  if (!double_range.add_range((yyvsp[0].u.real), (yyvsp[0].u.real))) {
    yyerror("Overlapping range");
  }
}
    break;

  case 94:
#line 775 "dcParser.yxx"
    {
  if (!double_range.add_range((yyvsp[-2].u.real), (yyvsp[0].u.real))) {
    yyerror("Overlapping range");
  }
}
    break;

  case 95:
#line 781 "dcParser.yxx"
    {
  if ((yyvsp[0].u.real) >= 0) {
    yyerror("Syntax error");
  } else if (!double_range.add_range((yyvsp[-1].u.real), -(yyvsp[0].u.real))) {
    yyerror("Overlapping range");
  }
}
    break;

  case 96:
#line 792 "dcParser.yxx"
    {
  uint_range.clear();
}
    break;

  case 97:
#line 796 "dcParser.yxx"
    {
  uint_range.clear();
  if (!uint_range.add_range((yyvsp[0].u.s_uint), (yyvsp[0].u.s_uint))) {
    yyerror("Overlapping range");
  }
}
    break;

  case 98:
#line 803 "dcParser.yxx"
    {
  uint_range.clear();
  if (!uint_range.add_range((yyvsp[-2].u.s_uint), (yyvsp[0].u.s_uint))) {
    yyerror("Overlapping range");
  }
}
    break;

  case 99:
#line 810 "dcParser.yxx"
    {
  uint_range.clear();
  if (!uint_range.add_range((yyvsp[-1].u.s_uint), (yyvsp[0].u.s_uint))) {
    yyerror("Overlapping range");
  }
}
    break;

  case 100:
#line 817 "dcParser.yxx"
    {
  if (!uint_range.add_range((yyvsp[0].u.s_uint), (yyvsp[0].u.s_uint))) {
    yyerror("Overlapping range");
  }
}
    break;

  case 101:
#line 823 "dcParser.yxx"
    {
  if (!uint_range.add_range((yyvsp[-2].u.s_uint), (yyvsp[0].u.s_uint))) {
    yyerror("Overlapping range");
  }
}
    break;

  case 102:
#line 829 "dcParser.yxx"
    {
  if (!uint_range.add_range((yyvsp[-1].u.s_uint), (yyvsp[0].u.s_uint))) {
    yyerror("Overlapping range");
  }
}
    break;

  case 104:
#line 839 "dcParser.yxx"
    {
  if ((yyvsp[-3].u.parameter) == (DCParameter *)NULL) {
    (yyval.u.parameter) = NULL;
  } else {
    (yyval.u.parameter) = (yyvsp[-3].u.parameter)->append_array_specification(uint_range);
  }
}
    break;

  case 105:
#line 850 "dcParser.yxx"
    {
  current_parameter->set_name((yyvsp[0].str));
  (yyval.u.parameter) = current_parameter;
}
    break;

  case 106:
#line 855 "dcParser.yxx"
    {
  DCSimpleParameter *simple_param = (yyvsp[-2].u.parameter)->as_simple_parameter();
  if (simple_param == NULL || simple_param->get_typedef() != (DCTypedef *)NULL) {
    yyerror("A divisor is only allowed on a primitive type.");

  } else if (!simple_param->is_numeric_type()) {
      yyerror("A divisor is only valid on a numeric type.");

  } else {
    if (!simple_param->set_divisor((yyvsp[0].u.s_uint))) {
      yyerror("Invalid divisor.");
    }
  }
}
    break;

  case 107:
#line 870 "dcParser.yxx"
    {
  DCSimpleParameter *simple_param = (yyvsp[-2].u.parameter)->as_simple_parameter();
  if (simple_param == NULL || simple_param->get_typedef() != (DCTypedef *)NULL) {
    yyerror("A modulus is only allowed on a primitive type.");

  } else if (!simple_param->is_numeric_type()) {
      yyerror("A modulus is only valid on a numeric type.");

  } else {
    if (!simple_param->set_modulus((yyvsp[0].u.real))) {
      yyerror("Invalid modulus.");
    }
  }
}
    break;

  case 108:
#line 885 "dcParser.yxx"
    {
  (yyval.u.parameter) = (yyvsp[-3].u.parameter)->append_array_specification(uint_range);
}
    break;

  case 109:
#line 892 "dcParser.yxx"
    {
  if ((yyvsp[0].str).length() != 1) {
    yyerror("Single character required.");
    (yyval.u.s_uint) = 0;
  } else {
    (yyval.u.s_uint) = (unsigned char)(yyvsp[0].str)[0];
  }
}
    break;

  case 111:
#line 905 "dcParser.yxx"
    {
  (yyval.u.s_uint) = (unsigned int)(yyvsp[0].u.uint64);
  if ((yyval.u.s_uint) != (yyvsp[0].u.uint64)) {
    yyerror("Number out of range.");
    (yyval.u.s_uint) = 1;
  }
}
    break;

  case 112:
#line 916 "dcParser.yxx"
    {
  (yyval.u.s_uint) = (unsigned int)-(yyvsp[0].u.int64);
  if ((yyvsp[0].u.int64) >= 0) {
    yyerror("Syntax error.");

  } else if ((yyval.u.s_uint) != -(yyvsp[0].u.int64)) {
    yyerror("Number out of range.");
    (yyval.u.s_uint) = 1;
  }
}
    break;

  case 115:
#line 938 "dcParser.yxx"
    {
  (yyval.u.real) = (double)(yyvsp[0].u.uint64);
}
    break;

  case 116:
#line 942 "dcParser.yxx"
    {
  (yyval.u.real) = (double)(yyvsp[0].u.int64);
}
    break;

  case 118:
#line 950 "dcParser.yxx"
    {
  if ((yyvsp[0].str).length() != 1) {
    yyerror("Single character required.");
    (yyval.u.real) = 0;
  } else {
    (yyval.u.real) = (double)(unsigned char)(yyvsp[0].str)[0];
  }
}
    break;

  case 120:
#line 964 "dcParser.yxx"
    {
  (yyval) = (yyvsp[0]);
}
    break;

  case 121:
#line 968 "dcParser.yxx"
    {
  if ((yyvsp[-1].str) != current_packer->get_current_field_name()) {
    ostringstream strm;
    strm << "Got '" << (yyvsp[-1].str) << "', expected '" 
         << current_packer->get_current_field_name() << "'";
    yyerror(strm.str());
  }
}
    break;

  case 122:
#line 977 "dcParser.yxx"
    {
  (yyval) = (yyvsp[0]);
}
    break;

  case 123:
#line 984 "dcParser.yxx"
    {
  current_packer->pack_int64((yyvsp[0].u.int64));
}
    break;

  case 124:
#line 988 "dcParser.yxx"
    {
  current_packer->pack_uint64((yyvsp[0].u.uint64));
}
    break;

  case 125:
#line 992 "dcParser.yxx"
    {
  current_packer->pack_double((yyvsp[0].u.real));
}
    break;

  case 126:
#line 996 "dcParser.yxx"
    {
  current_packer->pack_string((yyvsp[0].str));
}
    break;

  case 127:
#line 1000 "dcParser.yxx"
    {
  current_packer->pack_literal_value((yyvsp[0].str));
}
    break;

  case 128:
#line 1004 "dcParser.yxx"
    {
  current_packer->push();
}
    break;

  case 129:
#line 1008 "dcParser.yxx"
    {
  current_packer->pop();
}
    break;

  case 130:
#line 1012 "dcParser.yxx"
    {
  current_packer->push();
}
    break;

  case 131:
#line 1016 "dcParser.yxx"
    {
  current_packer->pop();
}
    break;

  case 132:
#line 1020 "dcParser.yxx"
    {
  current_packer->push();
}
    break;

  case 133:
#line 1024 "dcParser.yxx"
    {
  current_packer->pop();
}
    break;

  case 134:
#line 1028 "dcParser.yxx"
    {
  for (unsigned int i = 0; i < (yyvsp[0].u.s_uint); i++) {
    current_packer->pack_int64((yyvsp[-2].u.int64));
  }
}
    break;

  case 135:
#line 1034 "dcParser.yxx"
    {
  for (unsigned int i = 0; i < (yyvsp[0].u.s_uint); i++) {
    current_packer->pack_uint64((yyvsp[-2].u.uint64));
  }
}
    break;

  case 136:
#line 1040 "dcParser.yxx"
    {
  for (unsigned int i = 0; i < (yyvsp[0].u.s_uint); i++) {
    current_packer->pack_double((yyvsp[-2].u.real));
  }
}
    break;

  case 137:
#line 1046 "dcParser.yxx"
    {
  for (unsigned int i = 0; i < (yyvsp[0].u.s_uint); i++) {
    current_packer->pack_literal_value((yyvsp[-2].str));
  }
}
    break;

  case 144:
#line 1070 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_int8;
}
    break;

  case 145:
#line 1074 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_int16;
}
    break;

  case 146:
#line 1078 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_int32;
}
    break;

  case 147:
#line 1082 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_int64;
}
    break;

  case 148:
#line 1086 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_uint8;
}
    break;

  case 149:
#line 1090 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_uint16;
}
    break;

  case 150:
#line 1094 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_uint32;
}
    break;

  case 151:
#line 1098 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_uint64;
}
    break;

  case 152:
#line 1102 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_float64;
}
    break;

  case 153:
#line 1106 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_string;
}
    break;

  case 154:
#line 1110 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_blob;
}
    break;

  case 155:
#line 1114 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_blob32;
}
    break;

  case 156:
#line 1118 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_int8array;
}
    break;

  case 157:
#line 1122 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_int16array;
}
    break;

  case 158:
#line 1126 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_int32array;
}
    break;

  case 159:
#line 1130 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_uint8array;
}
    break;

  case 160:
#line 1134 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_uint16array;
}
    break;

  case 161:
#line 1138 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_uint32array;
}
    break;

  case 162:
#line 1142 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_uint32uint8array;
}
    break;

  case 163:
#line 1146 "dcParser.yxx"
    {
  (yyval.u.subatomic) = ST_char;
}
    break;

  case 164:
#line 1153 "dcParser.yxx"
    {
  current_keyword_list.clear_keywords();
}
    break;

  case 165:
#line 1157 "dcParser.yxx"
    {
  current_keyword_list.add_keyword((yyvsp[0].u.keyword));
}
    break;

  case 166:
#line 1164 "dcParser.yxx"
    {
  if (current_keyword_list.get_num_keywords() != 0) {
    yyerror("Communication keywords are not allowed here.");
  }
}
    break;

  case 167:
#line 1173 "dcParser.yxx"
    {
  current_molecular = new DCMolecularField((yyvsp[-1].str), current_class);
}
    break;

  case 168:
#line 1177 "dcParser.yxx"
    {
  (yyval.u.field) = current_molecular;
}
    break;

  case 169:
#line 1184 "dcParser.yxx"
    {
  DCField *field = current_class->get_field_by_name((yyvsp[0].str));
  (yyval.u.atomic) = (DCAtomicField *)NULL;
  if (field == (DCField *)NULL) {
    yyerror("Unknown field: " + (yyvsp[0].str));
  } else {
    (yyval.u.atomic) = field->as_atomic_field();
    if ((yyval.u.atomic) == (DCAtomicField *)NULL) {
      yyerror("Not an atomic field: " + (yyvsp[0].str));
    }
  }
}
    break;

  case 170:
#line 1200 "dcParser.yxx"
    {
  if ((yyvsp[0].u.atomic) != (DCAtomicField *)NULL) {
    current_molecular->add_atomic((yyvsp[0].u.atomic));
  }
}
    break;

  case 171:
#line 1206 "dcParser.yxx"
    {
  if ((yyvsp[0].u.atomic) != (DCAtomicField *)NULL) {
    current_molecular->add_atomic((yyvsp[0].u.atomic));
    if (!current_molecular->compare_keywords(*(yyvsp[0].u.atomic))) {
      yyerror("Mismatched keywords in molecule between " + 
              current_molecular->get_atomic(0)->get_name() + " and " +
              (yyvsp[0].u.atomic)->get_name());
    }
  }
}
    break;

  case 172:
#line 1220 "dcParser.yxx"
    {
  (yyval.str) = "";
}
    break;

  case 174:
#line 1228 "dcParser.yxx"
    {
  (yyval.u.dswitch) = current_switch;
  current_switch = new DCSwitch((yyvsp[-4].str), (yyvsp[-2].u.field));
}
    break;

  case 175:
#line 1233 "dcParser.yxx"
    {
  (yyval.u.dswitch) = current_switch;
  current_switch = (DCSwitch *)(yyvsp[-2].u.parameter);
}
    break;

  case 181:
#line 1247 "dcParser.yxx"
    {
  if (!current_switch->is_field_valid()) {
    yyerror("case declaration required before first element");
  } else if ((yyvsp[0].u.field) != (DCField *)NULL) {
    if (!current_switch->add_field((yyvsp[0].u.field))) {
      yyerror("Duplicate field name: " + (yyvsp[0].u.field)->get_name());
    }
  }
}
    break;

  case 182:
#line 1260 "dcParser.yxx"
    {
  current_packer = &default_packer;
  current_packer->clear_data();
  current_packer->begin_pack(current_switch->get_key_parameter());
}
    break;

  case 183:
#line 1266 "dcParser.yxx"
    {
  if (!current_packer->end_pack()) {
    yyerror("Invalid value for switch parameter");
    current_switch->add_invalid_case();
  } else {
    int case_index = current_switch->add_case(current_packer->get_string());
    if (case_index == -1) {
      yyerror("Duplicate case value");
    }
  }
}
    break;

  case 184:
#line 1281 "dcParser.yxx"
    {
  if (!current_switch->add_default()) {
    yyerror("Default case already defined");
  }
}
    break;

  case 185:
#line 1290 "dcParser.yxx"
    {
  current_switch->add_break();
}
    break;

  case 186:
#line 1297 "dcParser.yxx"
    {
  (yyval.u.field) = (yyvsp[-1].u.parameter);
}
    break;

  case 187:
#line 1301 "dcParser.yxx"
    {
  (yyval.u.field) = (yyvsp[0].u.parameter);
}
    break;


    }

/* Line 1037 of yacc.c.  */
#line 2786 "y.tab.c"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  int yytype = YYTRANSLATE (yychar);
	  const char* yyprefix;
	  char *yymsg;
	  int yyx;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 0;

	  yyprefix = ", expecting ";
	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		yysize += yystrlen (yyprefix) + yystrlen (yytname [yyx]);
		yycount += 1;
		if (yycount == 5)
		  {
		    yysize = 0;
		    break;
		  }
	      }
	  yysize += (sizeof ("syntax error, unexpected ")
		     + yystrlen (yytname[yytype]));
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);

	      if (yycount < 5)
		{
		  yyprefix = ", expecting ";
		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			yyp = yystpcpy (yyp, yyprefix);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yyprefix = " or ";
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror ("syntax error");
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* If at end of input, pop the error token,
	     then the rest of the stack, then return failure.  */
	  if (yychar == YYEOF)
	     for (;;)
	       {

		 YYPOPSTACK;
		 if (yyssp == yyss)
		   YYABORT;
		 yydestruct ("Error: popping",
                             yystos[*yyssp], yyvsp);
	       }
        }
      else
	{
	  yydestruct ("Error: discarding", yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

#ifdef __GNUC__
  /* Pacify GCC when the user code never invokes YYERROR and the label
     yyerrorlab therefore never appears in user code.  */
  if (0)
     goto yyerrorlab;
#endif

yyvsp -= yylen;
  yyssp -= yylen;
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping", yystos[yystate], yyvsp);
      YYPOPSTACK;
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token. */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yydestruct ("Error: discarding lookahead",
              yytoken, &yylval);
  yychar = YYEMPTY;
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}




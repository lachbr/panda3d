// Filename: physxMaterialDesc.I
// Created by:  pratt (Jul 9, 2006)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : is_valid
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE bool PhysxMaterialDesc::
is_valid() const {
  return nMaterialDesc.isValid();
}

////////////////////////////////////////////////////////////////////
//     Function : set_to_default
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxMaterialDesc::
set_to_default() {
  nMaterialDesc.setToDefault();
}

////////////////////////////////////////////////////////////////////
//     Function : get_dynamic_friction
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxMaterialDesc::
get_dynamic_friction() const {
  return nMaterialDesc.dynamicFriction;
}

////////////////////////////////////////////////////////////////////
//     Function : get_dynamic_friction_v
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxMaterialDesc::
get_dynamic_friction_v() const {
  return nMaterialDesc.dynamicFrictionV;
}

////////////////////////////////////////////////////////////////////
//     Function : get_flags
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxMaterialDesc::
get_flags() const {
  return nMaterialDesc.flags;
}

////////////////////////////////////////////////////////////////////
//     Function : get_restitution
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxMaterialDesc::
get_restitution() const {
  return nMaterialDesc.restitution;
}

////////////////////////////////////////////////////////////////////
//     Function : get_static_friction
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxMaterialDesc::
get_static_friction() const {
  return nMaterialDesc.staticFriction;
}

////////////////////////////////////////////////////////////////////
//     Function : get_static_friction_v
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxMaterialDesc::
get_static_friction_v() const {
  return nMaterialDesc.staticFrictionV;
}

////////////////////////////////////////////////////////////////////
//     Function : set_dynamic_friction
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxMaterialDesc::
set_dynamic_friction(float value) {
  nMaterialDesc.dynamicFriction = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_dynamic_friction_v
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxMaterialDesc::
set_dynamic_friction_v(float value) {
  nMaterialDesc.dynamicFrictionV = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_flags
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxMaterialDesc::
set_flags(unsigned int value) {
  nMaterialDesc.flags = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_restitution
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxMaterialDesc::
set_restitution(float value) {
  nMaterialDesc.restitution = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_static_friction
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxMaterialDesc::
set_static_friction(float value) {
  nMaterialDesc.staticFriction = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_static_friction_v
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxMaterialDesc::
set_static_friction_v(float value) {
  nMaterialDesc.staticFrictionV = value;
}


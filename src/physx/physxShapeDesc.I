// Filename: physxShapeDesc.I
// Created by:  pratt (Apr 7, 2006)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : is_valid
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE bool PhysxShapeDesc::
is_valid() const {
  return nShapeDesc->isValid();
}

////////////////////////////////////////////////////////////////////
//     Function : set_to_default
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxShapeDesc::
set_to_default() {
  nShapeDesc->setToDefault();
}

////////////////////////////////////////////////////////////////////
//     Function : get_density
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxShapeDesc::
get_density() const {
  return nShapeDesc->density;
}

////////////////////////////////////////////////////////////////////
//     Function : get_mass
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxShapeDesc::
get_mass() const {
  return nShapeDesc->mass;
}

////////////////////////////////////////////////////////////////////
//     Function : get_name
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE const char * PhysxShapeDesc::
get_name() const {
  return nShapeDesc->name;
}

////////////////////////////////////////////////////////////////////
//     Function : get_shape_flags
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxShapeDesc::
get_shape_flags() const {
  return nShapeDesc->shapeFlags;
}

////////////////////////////////////////////////////////////////////
//     Function : get_skin_width
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxShapeDesc::
get_skin_width() const {
  return nShapeDesc->skinWidth;
}

////////////////////////////////////////////////////////////////////
//     Function : set_density
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxShapeDesc::
set_density(float value) {
  nShapeDesc->density = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_mass
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxShapeDesc::
set_mass(float value) {
  nShapeDesc->mass = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_name
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxShapeDesc::
set_name(const char * value) {
  // Because the PhysX engine does not store its own copy of names,
  // we keep a local copy on this instance.  Otherwise, it would be
  // very easy for names to be declared in python and then
  // invalidated when the string is reclaimed from reference
  // counting.
  _name_store = value;
  nShapeDesc->name = _name_store.c_str();
}

////////////////////////////////////////////////////////////////////
//     Function : set_shape_flags
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxShapeDesc::
set_shape_flags(unsigned int value) {
  nShapeDesc->shapeFlags = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_skin_width
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxShapeDesc::
set_skin_width(float value) {
  nShapeDesc->skinWidth = value;
}


// Filename: physxBodyDesc.I
// Created by:  pratt (Apr 7, 2006)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : is_valid
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE bool PhysxBodyDesc::
is_valid() const {
  return nBodyDesc.isValid();
}

////////////////////////////////////////////////////////////////////
//     Function : set_to_default
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxBodyDesc::
set_to_default() {
  nBodyDesc.setToDefault();
}

////////////////////////////////////////////////////////////////////
//     Function : get_angular_damping
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxBodyDesc::
get_angular_damping() const {
  return nBodyDesc.angularDamping;
}

////////////////////////////////////////////////////////////////////
//     Function : get_ccd_motion_threshold
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxBodyDesc::
get_ccd_motion_threshold() const {
  return nBodyDesc.CCDMotionThreshold;
}

////////////////////////////////////////////////////////////////////
//     Function : get_flags
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxBodyDesc::
get_flags() const {
  return nBodyDesc.flags;
}

////////////////////////////////////////////////////////////////////
//     Function : get_linear_damping
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxBodyDesc::
get_linear_damping() const {
  return nBodyDesc.linearDamping;
}

////////////////////////////////////////////////////////////////////
//     Function : get_mass
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxBodyDesc::
get_mass() const {
  return nBodyDesc.mass;
}

////////////////////////////////////////////////////////////////////
//     Function : get_max_angular_velocity
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxBodyDesc::
get_max_angular_velocity() const {
  return nBodyDesc.maxAngularVelocity;
}

////////////////////////////////////////////////////////////////////
//     Function : get_sleep_angular_velocity
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxBodyDesc::
get_sleep_angular_velocity() const {
  return nBodyDesc.sleepAngularVelocity;
}

////////////////////////////////////////////////////////////////////
//     Function : get_sleep_damping
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxBodyDesc::
get_sleep_damping() const {
  return nBodyDesc.sleepDamping;
}

////////////////////////////////////////////////////////////////////
//     Function : get_sleep_energy_threshold
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxBodyDesc::
get_sleep_energy_threshold() const {
  return nBodyDesc.sleepEnergyThreshold;
}

////////////////////////////////////////////////////////////////////
//     Function : get_sleep_linear_velocity
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxBodyDesc::
get_sleep_linear_velocity() const {
  return nBodyDesc.sleepLinearVelocity;
}

////////////////////////////////////////////////////////////////////
//     Function : get_solver_iteration_count
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxBodyDesc::
get_solver_iteration_count() const {
  return nBodyDesc.solverIterationCount;
}

////////////////////////////////////////////////////////////////////
//     Function : get_wake_up_counter
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxBodyDesc::
get_wake_up_counter() const {
  return nBodyDesc.wakeUpCounter;
}

////////////////////////////////////////////////////////////////////
//     Function : set_angular_damping
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxBodyDesc::
set_angular_damping(float value) {
  nBodyDesc.angularDamping = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_ccd_motion_threshold
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxBodyDesc::
set_ccd_motion_threshold(float value) {
  nBodyDesc.CCDMotionThreshold = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_flags
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxBodyDesc::
set_flags(unsigned int value) {
  nBodyDesc.flags = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_linear_damping
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxBodyDesc::
set_linear_damping(float value) {
  nBodyDesc.linearDamping = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_mass
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxBodyDesc::
set_mass(float value) {
  nBodyDesc.mass = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_max_angular_velocity
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxBodyDesc::
set_max_angular_velocity(float value) {
  nBodyDesc.maxAngularVelocity = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_sleep_angular_velocity
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxBodyDesc::
set_sleep_angular_velocity(float value) {
  nBodyDesc.sleepAngularVelocity = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_sleep_damping
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxBodyDesc::
set_sleep_damping(float value) {
  nBodyDesc.sleepDamping = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_sleep_energy_threshold
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxBodyDesc::
set_sleep_energy_threshold(float value) {
  nBodyDesc.sleepEnergyThreshold = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_sleep_linear_velocity
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxBodyDesc::
set_sleep_linear_velocity(float value) {
  nBodyDesc.sleepLinearVelocity = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_solver_iteration_count
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxBodyDesc::
set_solver_iteration_count(unsigned int value) {
  nBodyDesc.solverIterationCount = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_wake_up_counter
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxBodyDesc::
set_wake_up_counter(float value) {
  nBodyDesc.wakeUpCounter = value;
}


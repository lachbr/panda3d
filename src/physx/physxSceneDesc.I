// Filename: physxSceneDesc.I
// Created by:  pratt (Apr 7, 2006)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function : is_valid
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE bool PhysxSceneDesc::
is_valid() const {
  return nSceneDesc.isValid();
}

////////////////////////////////////////////////////////////////////
//     Function : set_to_default
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_to_default() {
  nSceneDesc.setToDefault();
}

////////////////////////////////////////////////////////////////////
//     Function : get_background_thread_count
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxSceneDesc::
get_background_thread_count() const {
  return nSceneDesc.backgroundThreadCount;
}

////////////////////////////////////////////////////////////////////
//     Function : get_background_thread_mask
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxSceneDesc::
get_background_thread_mask() const {
  return nSceneDesc.backgroundThreadMask;
}

////////////////////////////////////////////////////////////////////
//     Function : get_bounds_planes
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE bool PhysxSceneDesc::
get_bounds_planes() const {
  return nSceneDesc.boundsPlanes != 0;
}

////////////////////////////////////////////////////////////////////
//     Function : get_flags
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxSceneDesc::
get_flags() const {
  return nSceneDesc.flags;
}

////////////////////////////////////////////////////////////////////
//     Function : get_ground_plane
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE bool PhysxSceneDesc::
get_ground_plane() const {
  return nSceneDesc.groundPlane != 0;
}

////////////////////////////////////////////////////////////////////
//     Function : get_internal_thread_count
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxSceneDesc::
get_internal_thread_count() const {
  return nSceneDesc.internalThreadCount;
}

////////////////////////////////////////////////////////////////////
//     Function : get_max_iter
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxSceneDesc::
get_max_iter() const {
  return nSceneDesc.maxIter;
}

////////////////////////////////////////////////////////////////////
//     Function : get_max_timestep
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE float PhysxSceneDesc::
get_max_timestep() const {
  return nSceneDesc.maxTimestep;
}

////////////////////////////////////////////////////////////////////
//     Function : get_sim_thread_mask
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxSceneDesc::
get_sim_thread_mask() const {
  return nSceneDesc.simThreadMask;
}

////////////////////////////////////////////////////////////////////
//     Function : get_sim_thread_stack_size
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxSceneDesc::
get_sim_thread_stack_size() const {
  return nSceneDesc.simThreadStackSize;
}

////////////////////////////////////////////////////////////////////
//     Function : get_subdivision_level
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxSceneDesc::
get_subdivision_level() const {
  return nSceneDesc.subdivisionLevel;
}

////////////////////////////////////////////////////////////////////
//     Function : get_thread_mask
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxSceneDesc::
get_thread_mask() const {
  return nSceneDesc.threadMask;
}

////////////////////////////////////////////////////////////////////
//     Function : get_up_axis
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxSceneDesc::
get_up_axis() const {
  return nSceneDesc.upAxis;
}

////////////////////////////////////////////////////////////////////
//     Function : get_worker_thread_stack_size
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE unsigned int PhysxSceneDesc::
get_worker_thread_stack_size() const {
  return nSceneDesc.workerThreadStackSize;
}

////////////////////////////////////////////////////////////////////
//     Function : set_background_thread_count
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_background_thread_count(unsigned int value) {
  nSceneDesc.backgroundThreadCount = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_background_thread_mask
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_background_thread_mask(unsigned int value) {
  nSceneDesc.backgroundThreadMask = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_bounds_planes
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_bounds_planes(bool value) {
  nSceneDesc.boundsPlanes = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_flags
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_flags(unsigned int value) {
  nSceneDesc.flags = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_ground_plane
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_ground_plane(bool value) {
  nSceneDesc.groundPlane = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_internal_thread_count
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_internal_thread_count(unsigned int value) {
  nSceneDesc.internalThreadCount = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_max_iter
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_max_iter(unsigned int value) {
  nSceneDesc.maxIter = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_max_timestep
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_max_timestep(float value) {
  nSceneDesc.maxTimestep = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_sim_thread_mask
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_sim_thread_mask(unsigned int value) {
  nSceneDesc.simThreadMask = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_sim_thread_stack_size
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_sim_thread_stack_size(unsigned int value) {
  nSceneDesc.simThreadStackSize = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_subdivision_level
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_subdivision_level(unsigned int value) {
  nSceneDesc.subdivisionLevel = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_thread_mask
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_thread_mask(unsigned int value) {
  nSceneDesc.threadMask = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_up_axis
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_up_axis(unsigned int value) {
  nSceneDesc.upAxis = value;
}

////////////////////////////////////////////////////////////////////
//     Function : set_worker_thread_stack_size
//       Access : Published
//  Description :
////////////////////////////////////////////////////////////////////
INLINE void PhysxSceneDesc::
set_worker_thread_stack_size(unsigned int value) {
  nSceneDesc.workerThreadStackSize = value;
}


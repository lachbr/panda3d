/* A Bison parser, made from parser.yxx
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse eggyyparse
#define yylex eggyylex
#define yyerror eggyyerror
#define yylval eggyylval
#define yychar eggyychar
#define yydebug eggyydebug
#define yynerrs eggyynerrs
# define	NUMBER	257
# define	ULONG	258
# define	STRING	259
# define	BEZIERCURVE	260
# define	BFACE	261
# define	BILLBOARD	262
# define	BILLBOARDCENTER	263
# define	BUNDLE	264
# define	CLOSED	265
# define	COLLIDE	266
# define	COMMENT	267
# define	COORDSYSTEM	268
# define	CV	269
# define	DART	270
# define	DNORMAL	271
# define	DRGBA	272
# define	DUV	273
# define	DXYZ	274
# define	DCS	275
# define	DISTANCE	276
# define	DTREF	277
# define	DYNAMICVERTEXPOOL	278
# define	EXTERNAL_FILE	279
# define	FLIGHT	280
# define	GROUP	281
# define	HIP	282
# define	INTANGENT	283
# define	JOINT	284
# define	KNOTS	285
# define	INCLUDE	286
# define	INSTANCE	287
# define	LOOP	288
# define	MATERIAL	289
# define	MATRIX3	290
# define	MATRIX4	291
# define	MODEL	292
# define	MREF	293
# define	NORMAL	294
# define	NURBSCURVE	295
# define	NURBSSURFACE	296
# define	OBJECTTYPE	297
# define	ORDER	298
# define	OUTTANGENT	299
# define	POINTLIGHT	300
# define	POLYGON	301
# define	REF	302
# define	RGBA	303
# define	ROTATE	304
# define	ROTX	305
# define	ROTY	306
# define	ROTZ	307
# define	SANIM	308
# define	SCALAR	309
# define	SCALE	310
# define	SEQUENCE	311
# define	SHADING	312
# define	SWITCH	313
# define	SWITCHCONDITION	314
# define	TABLE	315
# define	TABLE_V	316
# define	TAG	317
# define	TEXLIST	318
# define	TEXTURE	319
# define	TLENGTHS	320
# define	TRANSFORM	321
# define	TRANSLATE	322
# define	TREF	323
# define	TRIM	324
# define	TXT	325
# define	UKNOTS	326
# define	UV	327
# define	VKNOTS	328
# define	VERTEX	329
# define	VERTEXANIM	330
# define	VERTEXPOOL	331
# define	VERTEXREF	332
# define	XFMANIM	333
# define	XFMSANIM	334
# define	START_EGG	335
# define	START_GROUP_BODY	336
# define	START_TEXTURE_BODY	337
# define	START_PRIMITIVE_BODY	338

#line 6 "parser.yxx"


#include <pandabase.h>
#include "parserDefs.h"
#include "lexerDefs.h"
#include "eggObject.h"
#include "eggGroup.h"
#include "eggVertex.h"
#include "eggVertexPool.h"
#include "eggPolygon.h"
#include "eggPoint.h"
#include "eggNurbsSurface.h"
#include "eggNurbsCurve.h"
#include "eggTable.h"
#include "eggSAnimData.h"
#include "eggXfmSAnim.h"
#include "eggXfmAnimData.h"
#include "eggTexture.h"
#include "eggMaterial.h"
#include "eggComment.h"
#include "eggCoordinateSystem.h"
#include "eggExternalReference.h"
#include "eggData.h"
#include "pt_EggTexture.h"
#include "pt_EggMaterial.h"

#include "string_utils.h"
#include "filename.h"
#include "luse.h"
#include "lmatrix.h"
#include "coordinateSystem.h"
#include "pvector.h"
#include "dcast.h"

// Because our token type contains objects of type string, which
// require correct copy construction (and not simply memcpying), we
// cannot use bison's built-in auto-stack-grow feature.  As an easy
// solution, we ensure here that we have enough yacc stack to start
// with, and that it doesn't ever try to grow.
#define YYINITDEPTH 1000
#define YYMAXDEPTH 1000

// We need a stack of EggObject pointers.  Each time we encounter a
// nested EggObject of some kind, we'll allocate a new one of these
// and push it onto the stack.  At any given time, the top of the
// stack is the EggObject we are currently scanning.

typedef pvector< PT(EggObject) > EggStack;
static EggStack egg_stack;

// There's one "top-level" egg node, which is where we should parent
// things (e.g. implicit textures) encountered in the egg file that
// don't have an explicit place in the tree.  If this is NULL, such
// things won't be parented anywhere.
static EggGroupNode *egg_top_node;

// We need a table mapping vertex pool names to vertex pools.
typedef pmap<string,  PT(EggVertexPool) > VertexPools;
static VertexPools vertex_pools;

// And another one mapping texture names to textures.
typedef pmap<string,  PT_EggTexture > Textures;
static Textures textures;

// And again for material names to materials.
typedef pmap<string,  PT_EggMaterial > Materials;
static Materials materials;

// We need to be able to save the index number requested for a vertex
// temporarily.
static int vertex_index;

// We need to hold a matrix for a little bit while parsing the
// <Transform> entries.
static LMatrix3d matrix_2d;


////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

void
egg_init_parser(istream &in, const string &filename,
                EggObject *tos, EggGroupNode *top_node) {
  egg_init_lexer(in, filename);

  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();

  egg_stack.push_back(tos);
  egg_top_node = top_node;
}

void
egg_cleanup_parser() {
  // Clean these out after we're done, so we don't keep big memory
  // structures around needlessly.
  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();
}

#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		683
#define	YYFLAG		-32768
#define	YYNTBASE	87

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 338 ? yytranslate[x] : 196)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    85,     2,    86,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    17,    19,    21,
      23,    25,    27,    29,    31,    33,    35,    37,    39,    41,
      43,    45,    50,    56,    57,    65,    67,    74,    77,    78,
      85,    87,    94,   100,   107,   108,   115,   117,   120,   121,
     127,   128,   135,   137,   140,   144,   149,   155,   161,   167,
     176,   185,   188,   196,   204,   208,   217,   226,   231,   241,
     251,   252,   259,   260,   267,   268,   275,   277,   284,   290,
     298,   306,   312,   318,   324,   330,   336,   342,   348,   355,
     361,   364,   367,   370,   373,   375,   377,   380,   381,   387,
     389,   392,   395,   398,   401,   404,   407,   410,   417,   422,
     427,   432,   440,   447,   452,   457,   459,   476,   477,   483,
     485,   488,   491,   494,   497,   503,   508,   514,   519,   521,
     531,   541,   543,   550,   555,   567,   580,   581,   588,   589,
     596,   597,   604,   605,   612,   614,   620,   626,   632,   635,
     641,   647,   653,   660,   662,   668,   674,   680,   683,   689,
     695,   701,   707,   713,   719,   722,   728,   735,   737,   743,
     749,   755,   758,   764,   770,   776,   782,   788,   795,   797,
     799,   801,   805,   814,   823,   828,   838,   848,   850,   859,
     862,   864,   866,   868,   874,   876,   879,   881,   883,   884,
     891,   892,   899,   901,   904,   907,   910,   913,   916,   917,
     924,   926,   933,   939,   940,   947,   949,   956,   962,   963,
     970,   972,   979,   982,   984,   987,   989,   992,   994,   996,
     998,  1000,  1002,  1004,  1006,  1008,  1010,  1012,  1014,  1016,
    1018,  1020,  1022,  1024,  1027,  1029,  1031,  1033,  1035,  1037,
    1039,  1041
};
static const short yyrhs[] =
{
      81,    88,     0,    82,   115,     0,    83,    94,     0,    84,
     149,     0,   195,     0,    88,    89,     0,    90,     0,    91,
       0,    92,     0,    95,     0,    98,     0,    99,     0,   109,
       0,   111,     0,   113,     0,   141,     0,   143,     0,   145,
       0,   147,     0,   166,     0,    14,    85,   187,    86,     0,
      13,   186,    85,   190,    86,     0,     0,    65,   185,    85,
     187,    93,    94,    86,     0,   195,     0,    94,    55,   185,
      85,   193,    86,     0,    94,   129,     0,     0,    35,   185,
      85,    96,    97,    86,     0,   195,     0,    97,    55,   185,
      85,   193,    86,     0,    25,   186,    85,   187,    86,     0,
     189,    25,   186,    85,   187,    86,     0,     0,    77,   185,
     100,    85,   101,    86,     0,   195,     0,   101,   102,     0,
       0,    75,   103,    85,   105,    86,     0,     0,    75,   194,
     104,    85,   105,    86,     0,   192,     0,   192,   192,     0,
     192,   192,   192,     0,   192,   192,   192,   192,     0,   105,
      73,    85,   106,    86,     0,   105,    40,    85,   107,    86,
       0,   105,    49,    85,   108,    86,     0,   105,    20,   189,
      85,   192,   192,   192,    86,     0,   105,    20,    85,   189,
     192,   192,   192,    86,     0,   192,   192,     0,   106,    19,
     189,    85,   192,   192,    86,     0,   106,    19,    85,   189,
     192,   192,    86,     0,   192,   192,   192,     0,   107,    17,
     189,    85,   192,   192,   192,    86,     0,   107,    17,    85,
     189,   192,   192,   192,    86,     0,   192,   192,   192,   192,
       0,   108,    18,   189,    85,   192,   192,   192,   192,    86,
       0,   108,    18,    85,   189,   192,   192,   192,   192,    86,
       0,     0,    27,   186,   110,    85,   115,    86,     0,     0,
      30,   186,   112,    85,   115,    86,     0,     0,    33,   186,
     114,    85,   115,    86,     0,   195,     0,   115,    55,   185,
      85,   193,    86,     0,   115,     8,    85,   189,    86,     0,
     115,     9,    85,   192,   192,   192,    86,     0,   115,    12,
     186,    85,   116,   117,    86,     0,   115,    21,    85,   194,
      86,     0,   115,    21,    85,     5,    86,     0,   115,    16,
      85,   194,    86,     0,   115,    16,    85,     5,    86,     0,
     115,    59,    85,   194,    86,     0,   115,    43,    85,   187,
      86,     0,   115,    38,    85,   194,    86,     0,   115,    63,
     186,    85,   190,    86,     0,   115,    64,    85,   194,    86,
       0,   115,   118,     0,   115,   137,     0,   115,   139,     0,
     115,    89,     0,   189,     0,   195,     0,   117,   189,     0,
       0,    67,   119,    85,   120,    86,     0,   195,     0,   120,
     121,     0,   120,   122,     0,   120,   123,     0,   120,   124,
       0,   120,   125,     0,   120,   126,     0,   120,   127,     0,
      68,    85,   192,   192,   192,    86,     0,    51,    85,   192,
      86,     0,    52,    85,   192,    86,     0,    53,    85,   192,
      86,     0,    50,    85,   192,   192,   192,   192,    86,     0,
      56,    85,   192,   192,   192,    86,     0,    56,    85,   192,
      86,     0,    37,    85,   128,    86,     0,   195,     0,   192,
     192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
     192,   192,   192,   192,   192,     0,     0,    67,   130,    85,
     131,    86,     0,   195,     0,   131,   135,     0,   131,   132,
       0,   131,   133,     0,   131,   134,     0,    68,    85,   192,
     192,    86,     0,    50,    85,   192,    86,     0,    56,    85,
     192,   192,    86,     0,    36,    85,   136,    86,     0,   195,
       0,   192,   192,   192,   192,   192,   192,   192,   192,   192,
       0,    78,    85,   180,   138,    48,    85,   184,    86,    86,
       0,   195,     0,   138,    55,   185,    85,   193,    86,     0,
      60,    85,   140,    86,     0,    22,    85,   192,   192,    75,
      85,   192,   192,   192,    86,    86,     0,    22,    85,   192,
     192,   192,    75,    85,   192,   192,   192,    86,    86,     0,
       0,    47,   186,   142,    85,   149,    86,     0,     0,    46,
     186,   144,    85,   149,    86,     0,     0,    42,   186,   146,
      85,   150,    86,     0,     0,    41,   186,   148,    85,   151,
      86,     0,   195,     0,   149,    69,    85,   152,    86,     0,
     149,    65,    85,   153,    86,     0,   149,    39,    85,   154,
      86,     0,   149,   158,     0,   149,    40,    85,   155,    86,
       0,   149,    49,    85,   156,    86,     0,   149,     7,    85,
     157,    86,     0,   149,    55,   185,    85,   193,    86,     0,
     195,     0,   150,    69,    85,   152,    86,     0,   150,    65,
      85,   153,    86,     0,   150,    39,    85,   154,    86,     0,
     150,   158,     0,   150,    40,    85,   155,    86,     0,   150,
      49,    85,   156,    86,     0,   150,     7,    85,   157,    86,
       0,   150,    44,    85,   159,    86,     0,   150,    72,    85,
     160,    86,     0,   150,    74,    85,   161,    86,     0,   150,
     147,     0,   150,    70,    85,   162,    86,     0,   150,    55,
     185,    85,   193,    86,     0,   195,     0,   151,    69,    85,
     152,    86,     0,   151,    65,    85,   153,    86,     0,   151,
      39,    85,   154,    86,     0,   151,   158,     0,   151,    40,
      85,   155,    86,     0,   151,    49,    85,   156,    86,     0,
     151,     7,    85,   157,    86,     0,   151,    44,    85,   164,
      86,     0,   151,    31,    85,   165,    86,     0,   151,    55,
     185,    85,   193,    86,     0,   182,     0,   185,     0,   183,
       0,   192,   192,   192,     0,   155,    17,   189,    85,   192,
     192,   192,    86,     0,   155,    17,    85,   189,   192,   192,
     192,    86,     0,   192,   192,   192,   192,     0,   156,    18,
     189,    85,   192,   192,   192,   192,    86,     0,   156,    18,
      85,   189,   192,   192,   192,   192,    86,     0,   194,     0,
      78,    85,   180,    48,    85,   184,    86,    86,     0,   194,
     194,     0,   181,     0,   181,     0,   195,     0,   162,    34,
      85,   163,    86,     0,   195,     0,   163,   147,     0,   194,
       0,   181,     0,     0,    61,   186,   167,    85,   170,    86,
       0,     0,    10,   186,   169,    85,   170,    86,     0,   195,
       0,   170,   166,     0,   170,   168,     0,   170,   171,     0,
     170,   174,     0,   170,   177,     0,     0,    54,   186,   172,
      85,   173,    86,     0,   195,     0,   173,    55,   185,    85,
     193,    86,     0,   173,    62,    85,   181,    86,     0,     0,
      79,   186,   175,    85,   176,    86,     0,   195,     0,   176,
      55,   185,    85,   193,    86,     0,   176,    62,    85,   181,
      86,     0,     0,    80,   186,   178,    85,   179,    86,     0,
     195,     0,   179,    55,   185,    85,   193,    86,     0,   179,
     171,     0,   195,     0,   180,   194,     0,   195,     0,   181,
     192,     0,   185,     0,   185,     0,   185,     0,   195,     0,
     189,     0,   188,     0,   195,     0,   189,     0,   195,     0,
     189,     0,     3,     0,     4,     0,     5,     0,   195,     0,
     191,     0,   189,     0,   191,   189,     0,     3,     0,     4,
       0,     3,     0,     4,     0,     5,     0,     3,     0,     4,
       0,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   179,   181,   182,   183,   193,   195,   209,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   233,   256,   270,   270,   298,   300,   407,   417,   417,
     444,   446,   540,   548,   567,   567,   595,   597,   607,   607,
     619,   619,   664,   669,   673,   677,   681,   682,   683,   684,
     692,   710,   715,   723,   740,   745,   753,   770,   775,   783,
     800,   800,   820,   820,   841,   841,   862,   864,   918,   930,
     935,   942,   948,   961,   968,   981,   987,   993,   999,  1004,
    1010,  1011,  1012,  1013,  1026,  1048,  1050,  1071,  1071,  1087,
    1089,  1090,  1091,  1092,  1093,  1094,  1095,  1098,  1104,  1110,
    1116,  1122,  1128,  1132,  1138,  1142,  1144,  1165,  1165,  1184,
    1186,  1187,  1188,  1189,  1192,  1198,  1204,  1210,  1213,  1215,
    1233,  1266,  1271,  1295,  1307,  1313,  1329,  1329,  1348,  1348,
    1367,  1367,  1386,  1386,  1406,  1408,  1409,  1410,  1411,  1412,
    1413,  1414,  1415,  1463,  1465,  1466,  1467,  1468,  1469,  1470,
    1471,  1472,  1473,  1474,  1475,  1481,  1482,  1535,  1537,  1538,
    1539,  1540,  1541,  1542,  1543,  1544,  1545,  1546,  1604,  1621,
    1661,  1678,  1683,  1691,  1708,  1713,  1721,  1738,  1754,  1785,
    1803,  1823,  1843,  1849,  1859,  1866,  1884,  1900,  1921,  1921,
    1943,  1943,  1965,  1967,  1971,  1975,  1979,  1983,  1997,  1997,
    2018,  2020,  2032,  2045,  2045,  2066,  2068,  2085,  2098,  2098,
    2119,  2121,  2136,  2150,  2155,  2168,  2173,  2186,  2207,  2228,
    2250,  2256,  2267,  2279,  2285,  2295,  2300,  2313,  2318,  2322,
    2334,  2339,  2354,  2359,  2372,  2374,  2388,  2395,  2401,  2417,
    2426,  2432
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "NUMBER", "ULONG", "STRING", "BEZIERCURVE", 
  "BFACE", "BILLBOARD", "BILLBOARDCENTER", "BUNDLE", "CLOSED", "COLLIDE", 
  "COMMENT", "COORDSYSTEM", "CV", "DART", "DNORMAL", "DRGBA", "DUV", 
  "DXYZ", "DCS", "DISTANCE", "DTREF", "DYNAMICVERTEXPOOL", 
  "EXTERNAL_FILE", "FLIGHT", "GROUP", "HIP", "INTANGENT", "JOINT", 
  "KNOTS", "INCLUDE", "INSTANCE", "LOOP", "MATERIAL", "MATRIX3", 
  "MATRIX4", "MODEL", "MREF", "NORMAL", "NURBSCURVE", "NURBSSURFACE", 
  "OBJECTTYPE", "ORDER", "OUTTANGENT", "POINTLIGHT", "POLYGON", "REF", 
  "RGBA", "ROTATE", "ROTX", "ROTY", "ROTZ", "SANIM", "SCALAR", "SCALE", 
  "SEQUENCE", "SHADING", "SWITCH", "SWITCHCONDITION", "TABLE", "TABLE_V", 
  "TAG", "TEXLIST", "TEXTURE", "TLENGTHS", "TRANSFORM", "TRANSLATE", 
  "TREF", "TRIM", "TXT", "UKNOTS", "UV", "VKNOTS", "VERTEX", "VERTEXANIM", 
  "VERTEXPOOL", "VERTEXREF", "XFMANIM", "XFMSANIM", "START_EGG", 
  "START_GROUP_BODY", "START_TEXTURE_BODY", "START_PRIMITIVE_BODY", "'{'", 
  "'}'", "grammar", "egg", "node", "coordsystem", "comment", "texture", 
  "@1", "texture_body", "material", "@2", "material_body", 
  "external_reference", "vertex_pool", "@3", "vertex_pool_body", "vertex", 
  "@4", "@5", "vertex_body", "vertex_uv_body", "vertex_normal_body", 
  "vertex_color_body", "group", "@6", "joint", "@7", "instance", "@8", 
  "group_body", "cs_type", "collide_flags", "transform_3d", "@9", 
  "transform_3d_body", "translate_3d", "rotx_3d", "roty_3d", "rotz_3d", 
  "rotate_3d", "scale_3d", "matrix4_3d", "matrix4_3d_body", 
  "transform_2d", "@10", "transform_2d_body", "translate_2d", "rotate_2d", 
  "scale_2d", "matrix3_2d", "matrix3_2d_body", "group_vertex_ref", 
  "group_vertex_membership", "switchcondition", "switchcondition_body", 
  "polygon", "@11", "point_light", "@12", "nurbs_surface", "@13", 
  "nurbs_curve", "@14", "primitive_body", "nurbs_surface_body", 
  "nurbs_curve_body", "primitive_tref_body", "primitive_texture_body", 
  "primitive_material_body", "primitive_normal_body", 
  "primitive_color_body", "primitive_bface_body", "primitive_vertex_ref", 
  "nurbs_surface_order_body", "nurbs_surface_uknots_body", 
  "nurbs_surface_vknots_body", "nurbs_surface_trim_body", 
  "nurbs_surface_trim_loop_body", "nurbs_curve_order_body", 
  "nurbs_curve_knots_body", "table", "@15", "bundle", "@16", "table_body", 
  "sanim", "@17", "sanim_body", "xfmanim", "@18", "xfmanim_body", 
  "xfm_s_anim", "@19", "xfm_s_anim_body", "integer_list", "real_list", 
  "texture_name", "material_name", "vertex_pool_name", "required_name", 
  "optional_name", "required_string", "optional_string", "string", 
  "repeated_string", "repeated_string_body", "real", "real_or_string", 
  "integer", "empty", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    87,    87,    87,    87,    88,    88,    89,    89,    89,
      89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
      89,    90,    91,    93,    92,    94,    94,    94,    96,    95,
      97,    97,    98,    98,   100,    99,   101,   101,   103,   102,
     104,   102,   105,   105,   105,   105,   105,   105,   105,   105,
     105,   106,   106,   106,   107,   107,   107,   108,   108,   108,
     110,   109,   112,   111,   114,   113,   115,   115,   115,   115,
     115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
     115,   115,   115,   115,   116,   117,   117,   119,   118,   120,
     120,   120,   120,   120,   120,   120,   120,   121,   122,   123,
     124,   125,   126,   126,   127,   128,   128,   130,   129,   131,
     131,   131,   131,   131,   132,   133,   134,   135,   136,   136,
     137,   138,   138,   139,   140,   140,   142,   141,   144,   143,
     146,   145,   148,   147,   149,   149,   149,   149,   149,   149,
     149,   149,   149,   150,   150,   150,   150,   150,   150,   150,
     150,   150,   150,   150,   150,   150,   150,   151,   151,   151,
     151,   151,   151,   151,   151,   151,   151,   151,   152,   153,
     154,   155,   155,   155,   156,   156,   156,   157,   158,   159,
     160,   161,   162,   162,   163,   163,   164,   165,   167,   166,
     169,   168,   170,   170,   170,   170,   170,   170,   172,   171,
     173,   173,   173,   175,   174,   176,   176,   176,   178,   177,
     179,   179,   179,   180,   180,   181,   181,   182,   183,   184,
     185,   185,   186,   187,   187,   188,   188,   189,   189,   189,
     190,   190,   191,   191,   192,   192,   193,   193,   193,   194,
     194,   195
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     5,     0,     7,     1,     6,     2,     0,     6,
       1,     6,     5,     6,     0,     6,     1,     2,     0,     5,
       0,     6,     1,     2,     3,     4,     5,     5,     5,     8,
       8,     2,     7,     7,     3,     8,     8,     4,     9,     9,
       0,     6,     0,     6,     0,     6,     1,     6,     5,     7,
       7,     5,     5,     5,     5,     5,     5,     5,     6,     5,
       2,     2,     2,     2,     1,     1,     2,     0,     5,     1,
       2,     2,     2,     2,     2,     2,     2,     6,     4,     4,
       4,     7,     6,     4,     4,     1,    16,     0,     5,     1,
       2,     2,     2,     2,     5,     4,     5,     4,     1,     9,
       9,     1,     6,     4,    11,    12,     0,     6,     0,     6,
       0,     6,     0,     6,     1,     5,     5,     5,     2,     5,
       5,     5,     6,     1,     5,     5,     5,     2,     5,     5,
       5,     5,     5,     5,     2,     5,     6,     1,     5,     5,
       5,     2,     5,     5,     5,     5,     5,     6,     1,     1,
       1,     3,     8,     8,     4,     9,     9,     1,     8,     2,
       1,     1,     1,     5,     1,     2,     1,     1,     0,     6,
       0,     6,     1,     2,     2,     2,     2,     2,     0,     6,
       1,     6,     5,     0,     6,     1,     6,     5,     0,     6,
       1,     6,     2,     1,     2,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,   241,   241,   241,   241,     1,     5,     2,    66,     3,
      25,     4,   134,   227,   228,   229,   241,     0,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,     0,     0,     0,   241,     0,
       0,     0,     0,   241,     0,     0,   241,     0,    87,     0,
      83,    80,    81,    82,   241,   107,    27,     0,     0,     0,
       0,   241,     0,     0,     0,   138,     0,   222,   226,   225,
     241,     0,    60,    62,    64,     0,   221,   220,   132,   130,
     128,   126,   188,     0,    34,   241,     0,     0,     0,     0,
       0,     0,   241,     0,     0,     0,     0,     0,     0,   241,
       0,     0,     0,   241,     0,     0,     0,   241,   241,   241,
     241,     0,   224,   223,   241,     0,     0,     0,    28,     0,
       0,     0,     0,     0,   241,     0,     0,     0,   234,   235,
       0,     0,   239,   240,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   241,     0,   241,   241,   213,     0,
     241,     0,   177,     0,   170,   218,     0,     0,     0,     0,
       0,     0,   169,     0,   168,   217,     0,   232,     0,   231,
     230,    21,     0,   241,   241,   241,   241,   241,   241,   241,
     241,   241,    23,   241,   241,    68,     0,   241,    84,    74,
      73,    72,    71,    77,    76,   236,   237,   238,     0,    75,
       0,   123,     0,    79,     0,    89,     0,   214,   121,     0,
       0,   109,   141,   137,     0,   139,     0,     0,   140,     0,
       0,   136,   135,     0,    22,   233,    32,     0,     0,     0,
       0,    30,     0,   157,     0,   143,     0,     0,     0,   192,
     241,     0,    36,     0,     0,     0,    85,    67,     0,    78,
       0,     0,     0,     0,     0,     0,     0,    88,    90,    91,
      92,    93,    94,    95,    96,     0,   241,    26,     0,     0,
       0,     0,   108,   111,   112,   113,   110,     0,     0,   171,
       0,     0,     0,   142,   241,    61,    63,    65,   241,    29,
       0,     0,     0,     0,     0,     0,   241,     0,     0,   133,
     161,     0,     0,     0,     0,     0,   241,     0,     0,     0,
       0,     0,   131,   154,   147,   129,   127,   241,   241,   241,
     241,   189,   193,   194,   195,   196,   197,     0,    38,    35,
      37,    33,    69,    70,    86,     0,   241,     0,     0,     0,
       0,     0,     0,   241,     0,   241,     0,     0,     0,     0,
       0,     0,     0,   174,     0,   219,     0,     0,   241,   241,
       0,     0,     0,     0,   241,   241,     0,   241,     0,     0,
       0,     0,   241,   241,   241,   241,   241,   190,   198,   203,
     208,    24,     0,    40,     0,     0,     0,     0,   105,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   187,   215,     0,     0,     0,   186,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   182,     0,   180,     0,   181,     0,     0,     0,     0,
       0,     0,     0,     0,   104,     0,     0,    98,    99,   100,
     103,     0,     0,     0,     0,   117,     0,   115,     0,     0,
       0,     0,     0,     0,   178,     0,   164,   166,   216,   160,
     162,   165,   163,     0,   159,   158,   150,   146,   148,   151,
     179,   149,     0,   145,   144,     0,   155,   152,   153,   241,
     241,   241,   241,     0,    42,     0,     0,     0,     0,     0,
       0,     0,   120,   122,     0,   116,   114,     0,     0,     0,
       0,    31,   167,   156,   241,     0,     0,   200,     0,   205,
       0,   210,     0,     0,     0,     0,    39,    43,     0,     0,
       0,     0,     0,   102,    97,     0,   173,   172,     0,     0,
       0,   184,   191,   241,     0,   199,   241,     0,   204,   241,
     209,   212,     0,     0,     0,     0,     0,    44,    41,     0,
       0,     0,   101,     0,   176,   175,   183,   185,     0,   241,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    47,     0,     0,    48,     0,     0,
      46,    51,   124,     0,     0,     0,     0,   202,     0,   207,
       0,     0,     0,     0,     0,    54,     0,     0,     0,     0,
       0,   125,     0,     0,   201,   206,   211,     0,     0,     0,
       0,     0,     0,    57,     0,     0,     0,   119,    50,    49,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    53,    52,
       0,    56,    55,     0,     0,     0,    59,    58,     0,     0,
     106,     0,     0,     0
};

static const short yydefgoto[] =
{
     681,     5,    60,    31,    32,    33,   250,     9,    34,   186,
     240,    35,    36,   135,   251,   340,   392,   451,   503,   589,
     585,   587,    37,   125,    38,   126,    39,   127,     7,   197,
     255,    61,   108,   214,   268,   269,   270,   271,   272,   273,
     274,   396,    66,   111,   220,   283,   284,   285,   286,   407,
      62,   216,    63,   153,    40,   132,    41,   131,    42,   130,
      43,   129,    11,   244,   242,   173,   171,   163,   166,   168,
     161,    75,   434,   442,   444,   440,   550,   425,   420,    44,
     133,   333,   446,   248,   334,   447,   526,   335,   448,   528,
     336,   449,   530,   157,   421,   174,   164,   364,   165,    76,
     121,    77,    86,   178,   179,   478,   208,   162,    87
};

static const short yypact[] =
{
     230,-32768,-32768,-32768,-32768,   739,-32768,  1168,-32768,    26,
  -32768,   148,-32768,-32768,-32768,-32768,   248,    -3,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,    73,    16,    38,   248,    62,
      84,   110,   125,   248,   131,   135,   248,   150,-32768,   156,
  -32768,-32768,-32768,-32768,   248,-32768,-32768,   158,   162,   170,
     172,   248,   174,   176,   178,-32768,   195,-32768,-32768,-32768,
     248,   198,-32768,-32768,-32768,   201,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   203,-32768,   248,   248,   262,   204,   269,
     288,   273,   248,   211,   273,   223,   214,   273,   219,-32768,
     225,   244,   273,   248,   262,   262,   245,   248,   248,-32768,
     248,    -8,-32768,-32768,   248,   246,   247,   249,-32768,   252,
     253,   254,   255,   256,   248,   257,   266,    98,-32768,-32768,
     262,   248,-32768,-32768,   276,   281,   283,   285,   286,   287,
     316,   289,   267,   291,   248,   293,-32768,   273,-32768,   316,
  -32768,   294,-32768,   295,-32768,-32768,    -7,   262,    10,   262,
     316,   296,-32768,   297,-32768,-32768,   104,-32768,   298,   248,
  -32768,-32768,   299,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   248,-32768,   262,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   300,-32768,
     262,-32768,   301,-32768,   250,-32768,    56,-32768,-32768,   302,
     107,-32768,-32768,-32768,    37,-32768,   262,    41,-32768,   262,
     303,-32768,-32768,   305,-32768,-32768,-32768,   864,  1004,  1071,
      32,-32768,    93,-32768,   137,-32768,   189,   229,   151,-32768,
  -32768,    53,-32768,   306,   307,    31,-32768,-32768,   262,-32768,
     309,   311,   313,   314,   315,   318,   319,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,   320,   248,-32768,   322,   323,
     330,   331,-32768,-32768,-32768,-32768,-32768,   248,   332,-32768,
     248,   333,   262,-32768,   248,-32768,-32768,-32768,   248,-32768,
     334,   335,   336,   337,   338,   339,   248,   340,   341,-32768,
  -32768,   342,   343,   344,   345,   346,   248,   347,   348,   349,
     350,   351,-32768,-32768,-32768,-32768,-32768,   248,   248,   248,
     248,-32768,-32768,-32768,-32768,-32768,-32768,    99,   273,-32768,
  -32768,-32768,-32768,-32768,-32768,     5,   262,   262,   262,   262,
     262,   262,   262,   248,   352,   262,   262,   262,   262,   262,
     262,   262,   262,-32768,   353,-32768,   356,   273,-32768,   248,
     262,   273,   262,   358,   248,   248,   273,   248,   262,   273,
     262,   359,   248,   248,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   361,-32768,   362,   258,   363,   262,-32768,   262,
     369,   370,   371,    20,   262,   372,   316,   375,   262,-32768,
     376,   262,   262,   262,   262,   262,   262,   377,   316,   379,
     380,   262,-32768,   381,     0,   386,-32768,    49,   316,   387,
     388,   389,   391,    30,   392,   273,    59,   316,   393,   394,
      19,-32768,   395,   262,   396,   262,   398,   399,   400,   401,
     262,   403,   262,   404,-32768,   262,   262,-32768,-32768,-32768,
  -32768,   262,   262,   405,   406,-32768,   262,-32768,   407,   409,
     262,   262,   262,   262,-32768,   410,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   411,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   412,-32768,-32768,   414,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,    54,   262,   262,   262,   262,   262,   262,
     415,   422,-32768,-32768,   262,-32768,-32768,   424,   425,   262,
     262,-32768,-32768,-32768,-32768,   160,   118,-32768,   163,-32768,
      55,-32768,    45,   428,   429,   430,-32768,   262,   222,   262,
     262,   262,   433,-32768,-32768,   262,-32768,-32768,   434,   435,
      48,-32768,-32768,   248,   431,-32768,   248,   437,-32768,   248,
  -32768,-32768,   248,   438,   262,   262,   262,   262,-32768,   439,
     262,   262,-32768,   262,-32768,-32768,-32768,-32768,   441,-32768,
     443,-32768,   444,   262,   262,    35,   262,    70,   262,    39,
     262,-32768,   445,   446,   262,   262,   316,    28,   316,    34,
     316,   262,   262,    61,-32768,   262,    65,-32768,   262,    68,
  -32768,-32768,-32768,   447,   262,   262,   448,-32768,   450,-32768,
     456,   262,   262,   248,   459,-32768,   248,   460,   262,   248,
     461,-32768,   262,   262,-32768,-32768,-32768,   462,   463,   262,
     262,   262,   262,-32768,   262,   262,   262,-32768,-32768,-32768,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   464,   465,   262,   466,   467,   262,   262,-32768,-32768,
     262,-32768,-32768,   468,   469,   262,-32768,-32768,   262,   262,
  -32768,   374,   490,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,   495,-32768,-32768,-32768,-32768,    85,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -114,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   143,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    -241,-32768,   127,-32768,-32768,  -224,  -214,  -205,  -188,  -189,
    -291,   -44,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -244,
  -32768,-32768,-32768,    25,   -21,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   440,  -380,-32768,-32768,   177,   423,    36,
     -95,-32768,    -5,   402,-32768,    -2,  -158,   -74,   668
};


#define	YYLAST		1249


static const short yytable[] =
{
      45,   219,    45,   323,   332,   443,   445,   149,   138,   139,
     224,    78,   230,    78,    78,    78,    78,   224,    78,    78,
      78,    78,    78,   138,   139,   145,   147,   148,   227,   182,
     151,   138,   139,   155,    13,    14,    15,   138,   139,   192,
      13,    14,    15,    78,    13,    14,    15,   224,    13,    14,
      15,    78,   603,   495,    81,    82,    83,    84,   609,    88,
      89,    90,    91,    92,    13,    14,    15,   227,    13,    14,
      15,    13,    14,    15,   532,   122,   419,   227,   181,   225,
     394,    64,    80,   217,    98,   431,   480,   298,   606,    23,
      78,   137,   106,    65,   533,   140,   228,   122,    95,   253,
     300,    96,   217,   534,   275,   496,   460,   142,   143,   328,
     559,   276,   167,   169,   617,   177,   488,   343,   299,   122,
     619,   604,   287,    97,   301,   610,   290,   535,   338,   122,
     562,   136,   302,   303,   576,   482,   198,   304,   196,   339,
     536,   560,   305,   278,   311,   491,   623,    99,   306,   177,
     626,   430,   233,   629,    64,    67,   607,   279,   307,   439,
     429,   327,   308,   280,   423,   226,    65,   229,   438,   100,
     327,    74,   432,   553,   235,   281,   312,   313,    23,   309,
     554,   314,   424,   427,   195,   391,   315,    68,    69,   122,
     433,   436,   316,   282,   254,   101,    67,    70,   310,   597,
     324,   599,   317,    71,   555,   328,   318,   319,   258,   320,
     102,   321,    27,    72,   328,    74,   104,    73,   556,   288,
     105,    27,   291,   322,   289,   557,    74,   292,    68,    69,
     329,   330,    45,    45,    45,   107,    67,   331,    70,   329,
     330,   109,   532,   112,    71,   152,   552,   113,   464,   558,
     344,    13,    14,    15,    72,   114,   345,   115,    73,   117,
     475,   118,   533,   119,   393,   138,   139,    74,    68,    69,
     483,   534,   142,   143,   144,   325,   142,   143,    70,   492,
     120,   332,   359,   124,    71,   361,   128,   260,   134,   141,
     363,   142,   143,   146,    72,   535,   150,   426,    73,   154,
     261,   262,   263,   264,   156,   435,   265,    74,   568,   577,
     159,     1,     2,     3,     4,   326,   246,   247,   266,   205,
     206,   207,    78,    78,    78,    78,   237,   238,   239,   160,
     170,   183,   184,   453,   185,   337,   267,   187,   188,   189,
     190,   191,   193,   395,   397,   399,   400,   401,   402,   403,
     404,   194,   210,   408,   410,   411,   412,   413,   414,   415,
     416,   490,   199,   387,   388,   389,   390,   200,   167,   201,
     169,   202,   203,   204,   682,   209,   167,   211,   169,   213,
     222,   223,   231,   232,   234,   236,   257,   259,   277,   293,
     294,   538,   341,   342,   346,   455,   347,   456,   348,   349,
     350,   461,   462,   351,   352,   353,   466,   355,   356,   468,
     469,   470,   471,   472,   473,   357,   358,   360,   362,   367,
     368,   369,   370,   371,   372,   374,   375,   376,   377,   378,
     379,   380,   382,   383,   384,   385,   386,   406,   616,   417,
     618,   418,   620,   428,   437,    85,   450,   452,   504,   454,
     506,    93,    94,   508,   509,   457,   458,   459,   463,   510,
     511,   465,   467,   474,   514,   476,   477,   479,   517,   518,
     519,   520,   481,   484,   485,   486,   103,   487,   489,   493,
     494,   497,   498,   499,   500,   501,   502,   110,   505,   507,
     683,   512,   513,   515,   116,   516,   521,   522,   523,   524,
      30,   543,   537,   504,   539,   540,   541,   542,   544,   561,
     546,   547,   545,   564,   565,   566,   579,   548,   549,   572,
     574,   575,   581,   584,   525,   592,   596,   563,   598,   600,
     405,   612,   613,   631,   634,   567,   635,   569,   570,   571,
     172,   175,   636,   573,   640,   642,   645,     0,   648,   649,
     668,   669,   671,   672,   676,   677,   212,   583,     0,   176,
       0,     0,   586,   588,   590,   591,     0,     0,   593,   594,
       0,   595,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   601,   602,     0,   605,     0,   608,     0,   611,     0,
       0,     0,   614,   615,     0,     0,     0,     0,   624,   621,
     622,   627,     0,   625,   630,     0,   628,     0,     0,     0,
       0,     0,   632,   633,     0,     0,     0,     0,   639,   637,
     638,   641,     0,     0,   644,     0,   643,     0,     0,     0,
     646,   647,     0,     0,     0,     0,     0,   650,   651,   652,
     653,     0,   654,   655,   656,     0,     0,     0,   657,   658,
     659,   660,   661,   662,   663,   664,   665,   666,   667,     0,
       0,   670,     0,     0,   673,   674,     0,     0,   675,     6,
       8,    10,    12,   678,     0,     0,   679,   680,     0,     0,
       0,     0,     0,     0,    79,     0,    79,    79,    79,    79,
       0,    79,    79,    79,    79,    79,     0,     0,     0,   354,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    79,   365,     0,     0,
       0,   366,     0,     0,    79,     0,     0,     0,     0,   373,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   381,
       0,     0,    13,    14,    15,     0,     0,     0,   123,     0,
       0,     0,    16,    17,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    79,    18,     0,    19,     0,     0,    20,
     123,     0,    21,     0,    22,     0,   365,   158,     0,     0,
      23,    24,     0,     0,     0,    25,    26,   158,   180,     0,
       0,     0,   123,     0,     0,     0,     0,   172,   175,     0,
      27,     0,   123,     0,    28,   172,   175,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,     0,     0,     0,
       0,     0,   180,     0,   215,   218,     0,     0,   221,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     8,     8,     8,   241,   243,   245,    12,    12,   249,
       0,   252,   123,     0,     0,   256,     0,    13,    14,    15,
       0,     0,    46,    47,     0,     0,    48,    16,    17,     0,
      49,     0,     0,     0,     0,    50,     0,     0,     0,    18,
       0,    19,     0,     0,    20,     0,     0,    21,     0,    22,
       0,     0,    51,     0,     0,    23,    24,    52,     0,     0,
      25,    26,     0,     0,     0,     0,     0,     0,    10,    53,
       0,     0,     0,    54,    55,    27,     0,    56,    57,    28,
       0,    58,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,    59,     0,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   578,     0,     0,   580,
       0,     0,   582,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    79,    79,    79,    79,     0,
       0,     0,     0,     0,     0,     0,     0,    13,    14,    15,
       0,     0,    46,    47,   398,     0,    48,    16,    17,     0,
      49,     0,     0,   409,     0,    50,     0,     0,     0,    18,
       0,    19,     0,     0,    20,     0,   422,    21,     0,    22,
       0,     0,    51,     0,     0,    23,    24,    52,     0,     0,
      25,    26,   441,   422,   422,     0,     0,     0,     0,    53,
       0,     0,     0,    54,    55,    27,     0,    56,    57,    28,
       0,    58,     0,     0,    13,    14,    15,     0,     0,    46,
      47,    29,    59,    48,    16,    17,     0,    49,     0,     0,
     296,     0,    50,     0,     0,     0,    18,     0,    19,     0,
       0,    20,     0,     0,    21,     0,    22,     0,     0,    51,
       0,     0,    23,    24,    52,     0,     0,    25,    26,     0,
       0,     0,     0,     0,     0,     0,    53,     0,     0,     0,
      54,    55,    27,     0,    56,    57,    28,     0,    58,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    29,    59,
       0,     0,     0,     0,     0,     0,     0,   297,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   249,   527,   529,
     531,    13,    14,    15,     0,     0,    46,    47,     0,     0,
      48,    16,    17,     0,    49,     0,     0,     0,     0,    50,
       0,     0,   551,    18,     0,    19,     0,     0,    20,     0,
       0,    21,     0,    22,     0,     0,    51,     0,     0,    23,
      24,    52,     0,     0,    25,    26,     0,     0,     0,     0,
       0,     0,     0,    53,     0,     0,     0,    54,    55,    27,
       0,    56,    57,    28,     0,    58,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    29,    59,   422,     0,   422
};

static const short yycheck[] =
{
       5,   159,     7,   244,   248,   385,   386,   102,     3,     4,
      17,    16,   170,    18,    19,    20,    21,    17,    23,    24,
      25,    26,    27,     3,     4,    99,   100,   101,    18,   124,
     104,     3,     4,   107,     3,     4,     5,     3,     4,   134,
       3,     4,     5,    48,     3,     4,     5,    17,     3,     4,
       5,    56,    17,    34,    18,    19,    20,    21,    19,    23,
      24,    25,    26,    27,     3,     4,     5,    18,     3,     4,
       5,     3,     4,     5,    20,    80,   367,    18,    86,    86,
      75,    55,    85,   157,    48,   376,    86,    55,    18,    41,
      95,    96,    56,    67,    40,    97,    86,   102,    25,   194,
       7,    85,   176,    49,    48,    86,    86,     3,     4,    54,
      55,    55,   114,   115,    86,   120,    86,    86,    86,   124,
      86,    86,    85,    85,    31,    86,    85,    73,    75,   134,
      85,    95,    39,    40,    86,    86,   141,    44,   140,    86,
      86,    86,    49,    36,     7,    86,    85,    85,    55,   154,
      85,   375,    48,    85,    55,     7,    86,    50,    65,   383,
     374,    10,    69,    56,   369,   167,    67,   169,   382,    85,
      10,    78,   377,    55,   179,    68,    39,    40,    41,    86,
      62,    44,   370,   372,    86,    86,    49,    39,    40,   194,
     378,   380,    55,    86,   196,    85,     7,    49,   242,   579,
     244,   581,    65,    55,    86,    54,    69,    70,   210,    72,
      85,    74,    61,    65,    54,    78,    85,    69,    55,   224,
      85,    61,   227,    86,   226,    62,    78,   229,    39,    40,
      79,    80,   237,   238,   239,    85,     7,    86,    49,    79,
      80,    85,    20,    85,    55,    22,    86,    85,   406,    86,
     255,     3,     4,     5,    65,    85,   258,    85,    69,    85,
     418,    85,    40,    85,   338,     3,     4,    78,    39,    40,
     428,    49,     3,     4,     5,    86,     3,     4,    49,   437,
      85,   525,   287,    85,    55,   290,    85,    37,    85,    85,
     292,     3,     4,     5,    65,    73,    85,   371,    69,    85,
      50,    51,    52,    53,    85,   379,    56,    78,    86,   550,
      85,    81,    82,    83,    84,    86,   189,   190,    68,     3,
       4,     5,   327,   328,   329,   330,   183,   184,   185,    85,
      85,    85,    85,    75,    85,   250,    86,    85,    85,    85,
      85,    85,    85,   345,   346,   347,   348,   349,   350,   351,
     352,    85,    85,   355,   356,   357,   358,   359,   360,   361,
     362,   435,    86,   327,   328,   329,   330,    86,   370,    86,
     372,    86,    86,    86,     0,    86,   378,    86,   380,    86,
      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
      85,   505,    86,    86,    85,   397,    85,   399,    85,    85,
      85,   403,   404,    85,    85,    85,   408,    85,    85,   411,
     412,   413,   414,   415,   416,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
      85,    85,    85,    85,    85,    85,    85,    85,   596,    86,
     598,    85,   600,    85,    85,    22,    85,    85,   450,    86,
     452,    28,    29,   455,   456,    86,    86,    86,    86,   461,
     462,    86,    86,    86,   466,    86,    86,    86,   470,   471,
     472,   473,    86,    86,    86,    86,    53,    86,    86,    86,
      86,    86,    86,    85,    85,    85,    85,    64,    85,    85,
       0,    86,    86,    86,    71,    86,    86,    86,    86,    85,
       5,    86,   504,   505,   506,   507,   508,   509,    86,   530,
      86,    86,   514,    85,    85,    85,    85,   519,   520,    86,
      86,    86,    85,    85,   499,    86,    85,   532,    85,    85,
     353,    86,    86,    86,    86,   537,    86,   539,   540,   541,
     117,   118,    86,   545,    85,    85,    85,    -1,    86,    86,
      86,    86,    86,    86,    86,    86,   154,   562,    -1,   119,
      -1,    -1,   564,   565,   566,   567,    -1,    -1,   570,   571,
      -1,   573,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   583,   584,    -1,   586,    -1,   588,    -1,   590,    -1,
      -1,    -1,   594,   595,    -1,    -1,    -1,    -1,   603,   601,
     602,   606,    -1,   605,   609,    -1,   608,    -1,    -1,    -1,
      -1,    -1,   614,   615,    -1,    -1,    -1,    -1,   623,   621,
     622,   626,    -1,    -1,   629,    -1,   628,    -1,    -1,    -1,
     632,   633,    -1,    -1,    -1,    -1,    -1,   639,   640,   641,
     642,    -1,   644,   645,   646,    -1,    -1,    -1,   650,   651,
     652,   653,   654,   655,   656,   657,   658,   659,   660,    -1,
      -1,   663,    -1,    -1,   666,   667,    -1,    -1,   670,     1,
       2,     3,     4,   675,    -1,    -1,   678,   679,    -1,    -1,
      -1,    -1,    -1,    -1,    16,    -1,    18,    19,    20,    21,
      -1,    23,    24,    25,    26,    27,    -1,    -1,    -1,   276,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    48,   294,    -1,    -1,
      -1,   298,    -1,    -1,    56,    -1,    -1,    -1,    -1,   306,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,
      -1,    -1,     3,     4,     5,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    95,    25,    -1,    27,    -1,    -1,    30,
     102,    -1,    33,    -1,    35,    -1,   353,   109,    -1,    -1,
      41,    42,    -1,    -1,    -1,    46,    47,   119,   120,    -1,
      -1,    -1,   124,    -1,    -1,    -1,    -1,   374,   375,    -1,
      61,    -1,   134,    -1,    65,   382,   383,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,
      -1,    -1,   154,    -1,   156,   157,    -1,    -1,   160,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,    -1,    -1,   197,    -1,     3,     4,     5,
      -1,    -1,     8,     9,    -1,    -1,    12,    13,    14,    -1,
      16,    -1,    -1,    -1,    -1,    21,    -1,    -1,    -1,    25,
      -1,    27,    -1,    -1,    30,    -1,    -1,    33,    -1,    35,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    -1,
      46,    47,    -1,    -1,    -1,    -1,    -1,    -1,   250,    55,
      -1,    -1,    -1,    59,    60,    61,    -1,    63,    64,    65,
      -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   553,    -1,    -1,   556,
      -1,    -1,   559,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   327,   328,   329,   330,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
      -1,    -1,     8,     9,   346,    -1,    12,    13,    14,    -1,
      16,    -1,    -1,   355,    -1,    21,    -1,    -1,    -1,    25,
      -1,    27,    -1,    -1,    30,    -1,   368,    33,    -1,    35,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    -1,
      46,    47,   384,   385,   386,    -1,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    59,    60,    61,    -1,    63,    64,    65,
      -1,    67,    -1,    -1,     3,     4,     5,    -1,    -1,     8,
       9,    77,    78,    12,    13,    14,    -1,    16,    -1,    -1,
      86,    -1,    21,    -1,    -1,    -1,    25,    -1,    27,    -1,
      -1,    30,    -1,    -1,    33,    -1,    35,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    -1,    46,    47,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
      59,    60,    61,    -1,    63,    64,    65,    -1,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    78,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,   500,   501,
     502,     3,     4,     5,    -1,    -1,     8,     9,    -1,    -1,
      12,    13,    14,    -1,    16,    -1,    -1,    -1,    -1,    21,
      -1,    -1,   524,    25,    -1,    27,    -1,    -1,    30,    -1,
      -1,    33,    -1,    35,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    -1,    46,    47,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    59,    60,    61,
      -1,    63,    64,    65,    -1,    67,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    77,    78,   579,    -1,   581
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 6:
#line 196 "parser.yxx"
{
  DCAST(EggData, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 21:
#line 235 "parser.yxx"
{
  string strval = yyvsp[-1]._string;
  EggCoordinateSystem *cs = new EggCoordinateSystem;

  CoordinateSystem f = parse_coordinate_system_string(strval);
  if (f == CS_invalid) {
    eggyywarning("Unknown coordinate system " + strval);
  } else {
    cs->set_value(f);
  }
  yyval._egg = cs;
}
    break;
case 22:
#line 258 "parser.yxx"
{
  yyval._egg = new EggComment(yyvsp[-3]._string, yyvsp[-1]._string);
}
    break;
case 23:
#line 272 "parser.yxx"
{
  string tref_name = yyvsp[-2]._string;
  Filename filename = yyvsp[0]._string;
  EggTexture *texture = new EggTexture(tref_name, filename);

  if (textures.find(tref_name) != textures.end()) {
    eggyywarning("Duplicate texture name " + tref_name);
  }
  textures[tref_name] = texture;

  egg_stack.push_back(texture);
}
    break;
case 24:
#line 285 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 26:
#line 301 "parser.yxx"
{
  EggTexture *texture = DCAST(EggTexture, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "format") == 0) {
    EggTexture::Format f = EggTexture::string_format(strval);
    if (f == EggTexture::F_unspecified) {
      eggyywarning("Unknown texture format " + strval);
    } else {
      texture->set_format(f);
    }

  } else if (cmp_nocase_uh(name, "wrap") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_mode(w);
    }

  } else if (cmp_nocase_uh(name, "wrapu") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_u(w);
    }

  } else if (cmp_nocase_uh(name, "wrapv") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_v(w);
    }

  } else if (cmp_nocase_uh(name, "minfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_minfilter(f);
    }

  } else if (cmp_nocase_uh(name, "magfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_magfilter(f);
    }
  } else if (cmp_nocase_uh(name, "anisotropic_degree") == 0) {
    texture->set_anisotropic_degree((int)value);

  } else if (cmp_nocase_uh(name, "envtype") == 0) {
    EggTexture::EnvType e = EggTexture::string_env_type(strval);
    if (e == EggTexture::ET_unspecified) {
      eggyywarning("Unknown texture env type " + strval);
    } else {
      texture->set_env_type(e);
    }

  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      texture->set_alpha_mode(a);
    }

  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      texture->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      texture->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    texture->set_draw_order((int)value);

  } else if (cmp_nocase_uh(name, "bin") == 0) {
    texture->set_bin(strval);

  } else if (cmp_nocase_uh(name, "alpha_file") == 0) {
    texture->set_alpha_filename(strval);

  } else if (cmp_nocase_uh(name, "alpha_file_channel") == 0) {
    texture->set_alpha_file_channel((int)value);

  } else {
    eggyywarning("Unsupported texture scalar: " + name);
  }
}
    break;
case 28:
#line 419 "parser.yxx"
{
  string mref_name = yyvsp[-1]._string;
  EggMaterial *material = new EggMaterial(mref_name);

  if (materials.find(mref_name) != materials.end()) {
    eggyywarning("Duplicate material name " + mref_name);
  }
  materials[mref_name] = material;

  egg_stack.push_back(material);
}
    break;
case 29:
#line 431 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 31:
#line 447 "parser.yxx"
{
  EggMaterial *material = DCAST(EggMaterial, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "diffr") == 0) {
    Colorf diff = material->get_diff();
    diff[0] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffg") == 0) {
    Colorf diff = material->get_diff();
    diff[1] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffb") == 0) {
    Colorf diff = material->get_diff();
    diff[2] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffa") == 0) {
    Colorf diff = material->get_diff();
    diff[3] = value;
    material->set_diff(diff);

  } else if (cmp_nocase_uh(name, "ambr") == 0) {
    Colorf amb = material->get_amb();
    amb[0] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambg") == 0) {
    Colorf amb = material->get_amb();
    amb[1] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambb") == 0) {
    Colorf amb = material->get_amb();
    amb[2] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "amba") == 0) {
    Colorf amb = material->get_amb();
    amb[3] = value;
    material->set_amb(amb);

  } else if (cmp_nocase_uh(name, "emitr") == 0) {
    Colorf emit = material->get_emit();
    emit[0] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitg") == 0) {
    Colorf emit = material->get_emit();
    emit[1] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitb") == 0) {
    Colorf emit = material->get_emit();
    emit[2] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emita") == 0) {
    Colorf emit = material->get_emit();
    emit[3] = value;
    material->set_emit(emit);

  } else if (cmp_nocase_uh(name, "specr") == 0) {
    Colorf spec = material->get_spec();
    spec[0] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specg") == 0) {
    Colorf spec = material->get_spec();
    spec[1] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specb") == 0) {
    Colorf spec = material->get_spec();
    spec[2] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "speca") == 0) {
    Colorf spec = material->get_spec();
    spec[3] = value;
    material->set_spec(spec);

  } else if (cmp_nocase_uh(name, "shininess") == 0) {
    material->set_shininess(value);

  } else if (cmp_nocase_uh(name, "local") == 0) {
    material->set_local(value != 0.0);

  } else {
    eggyywarning("Unsupported material scalar: " + name);
  }
}
    break;
case 32:
#line 542 "parser.yxx"
{
  string node_name = yyvsp[-3]._string;
  Filename filename = yyvsp[-1]._string;
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  yyval._egg = ref;
}
    break;
case 33:
#line 549 "parser.yxx"
{
  if (cmp_nocase_uh(yyvsp[-5]._string, "group") != 0) {
    eggyyerror("keyword 'group' expected");
  }
  string node_name = yyvsp[-3]._string;
  Filename filename = yyvsp[-1]._string;
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  yyval._egg = ref;
}
    break;
case 34:
#line 569 "parser.yxx"
{
  string name = yyvsp[0]._string;
  EggVertexPool *pool = new EggVertexPool(name);

  if (vertex_pools.find(name) != vertex_pools.end()) {
    eggyywarning("Duplicate vertex pool name " + name);
  }
  vertex_pools[name] = pool;

  egg_stack.push_back(pool);
}
    break;
case 35:
#line 581 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 38:
#line 609 "parser.yxx"
{
  egg_stack.push_back(new EggVertex);
}
    break;
case 39:
#line 613 "parser.yxx"
{
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  DCAST(EggVertexPool, egg_stack.back())->add_vertex(vtx);
}
    break;
case 40:
#line 620 "parser.yxx"
{
  vertex_index = (int)yyvsp[0]._number;
  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());

  if (vertex_index < 0) {
    ostringstream errmsg;
    errmsg << "Ignoring invalid vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;

  } else if (pool->get_vertex(vertex_index) != NULL) {
    ostringstream errmsg;
    errmsg << "Ignoring duplicate vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;
  }

  // Even if we didn't like the vertex index number, we still need to
  // go ahead and parse the vertex.  We just won't save it.

  egg_stack.push_back(new EggVertex);
}
    break;
case 41:
#line 645 "parser.yxx"
{
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());
  if (vertex_index != -1) {
    pool->add_vertex(vtx, vertex_index);
  }
}
    break;
case 42:
#line 666 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(yyvsp[0]._number);
}
    break;
case 43:
#line 670 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint2d(yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 44:
#line 674 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint3d(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 45:
#line 678 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint4d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 49:
#line 685 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;
case 50:
#line 693 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
}
    break;
case 51:
#line 712 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_uv(TexCoordd(yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 52:
#line 716 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-4]._string, LVector2d(yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
}
    break;
case 53:
#line 724 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-3]._string, LVector2d(yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-3]._string);
  }
}
    break;
case 54:
#line 742 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_normal(Normald(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 55:
#line 746 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;
case 56:
#line 754 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
}
    break;
case 57:
#line 772 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_color(Colorf(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 58:
#line 776 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-6]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-6]._string);
  }
}
    break;
case 59:
#line 784 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-5]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;
case 60:
#line 802 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  egg_stack.push_back(group);
}
    break;
case 61:
#line 807 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 62:
#line 822 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  group->set_group_type(EggGroup::GT_joint);
  egg_stack.push_back(group);
}
    break;
case 63:
#line 828 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 64:
#line 843 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  group->set_group_type(EggGroup::GT_instance);
  egg_stack.push_back(group);
}
    break;
case 65:
#line 849 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 67:
#line 865 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  unsigned long ulong_value = yyvsp[-1]._ulong;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    group->set_switch_fps(value);
  } else if (cmp_nocase_uh(name, "no_fog") == 0) {
    group->set_nofog_flag(value != 0);
  } else if (cmp_nocase_uh(name, "decal") == 0) {
    group->set_decal_flag(value != 0);
  } else if (cmp_nocase_uh(name, "direct") == 0) {
    group->set_direct_flag(value != 0);
  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      group->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      group->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      group->set_depth_test_mode(m);
    }
  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    group->set_draw_order(ulong_value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    group->set_bin(strval);
  } else if (cmp_nocase_uh(name, "collide_mask") == 0) {
    group->set_collide_mask(group->get_collide_mask() | ulong_value);
  } else if (cmp_nocase_uh(name, "from_collide_mask") == 0) {
    group->set_from_collide_mask(group->get_from_collide_mask() | ulong_value);
  } else if (cmp_nocase_uh(name, "into_collide_mask") == 0) {
    group->set_into_collide_mask(group->get_into_collide_mask() | ulong_value);
  } else {
    eggyywarning("Unknown group scalar " + name);
  }
}
    break;
case 68:
#line 919 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::BillboardType f = EggGroup::string_billboard_type(strval);
  if (f == EggGroup::BT_none) {
    eggyywarning("Unknown billboard type " + strval);
  } else {
    group->set_billboard_type(f);
  }
}
    break;
case 69:
#line 931 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_billboard_center(LPoint3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
}
    break;
case 70:
#line 936 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = yyvsp[-4]._string;

  group->set_collision_name(name);
}
    break;
case 71:
#line 943 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_dcs_type(value!=0 ? EggGroup::DC_default : EggGroup::DC_none);
}
    break;
case 72:
#line 949 "parser.yxx"
{
  // The special flavor of DCS, with { sync } or { nosync }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::DCSType f = EggGroup::string_dcs_type(strval);
  if (f == EggGroup::DC_none) {
    eggyywarning("Unknown DCS type " + strval);
  } else {
    group->set_dcs_type(f);
  }
}
    break;
case 73:
#line 962 "parser.yxx"
{
  // The traditional flavor of DART, with { 0 } or { 1 }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_dart_type(value!=0 ? EggGroup::DT_default : EggGroup::DT_none);
}
    break;
case 74:
#line 969 "parser.yxx"
{
  // The special flavor of DART, with { sync } or { nosync }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::DartType f = EggGroup::string_dart_type(strval);
  if (f == EggGroup::DT_none) {
    eggyywarning("Unknown dart type " + strval);
  } else {
    group->set_dart_type(f);
  }
}
    break;
case 75:
#line 982 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_switch_flag(value!=0);
}
    break;
case 76:
#line 988 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string type = yyvsp[-1]._string;
  group->add_object_type(type);
}
    break;
case 77:
#line 994 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_model_flag(value!=0);
}
    break;
case 78:
#line 1000 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_tag(yyvsp[-3]._string, yyvsp[-1]._string);
}
    break;
case 79:
#line 1005 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_texlist_flag(value!=0);
}
    break;
case 83:
#line 1014 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 84:
#line 1028 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[0]._string;

  EggGroup::CollisionSolidType f = EggGroup::string_cs_type(strval);
  if (f == EggGroup::CST_none) {
    eggyywarning("Unknown collision solid type " + strval);
  } else {
    group->set_cs_type(f);
  }
}
    break;
case 86:
#line 1051 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[0]._string;

  EggGroup::CollideFlags f = EggGroup::string_collide_flags(strval);
  if (f == EggGroup::CF_none) {
    eggyywarning("Unknown collision flag " + strval);
  } else {
    group->set_collide_flags(group->get_collide_flags() | f);
  }
}
    break;
case 87:
#line 1073 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->clear_transform();
}
    break;
case 97:
#line 1099 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_translate(LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
}
    break;
case 98:
#line 1105 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_rotx(yyvsp[-1]._number);
}
    break;
case 99:
#line 1111 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_roty(yyvsp[-1]._number);
}
    break;
case 100:
#line 1117 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_rotz(yyvsp[-1]._number);
}
    break;
case 101:
#line 1123 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_rotate(yyvsp[-4]._number, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
}
    break;
case 102:
#line 1129 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_scale(LVecBase3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
}
    break;
case 103:
#line 1133 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_uniform_scale(yyvsp[-1]._number);
}
    break;
case 106:
#line 1148 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_matrix
    (LMatrix4d(yyvsp[-15]._number, yyvsp[-14]._number, yyvsp[-13]._number, yyvsp[-12]._number,
               yyvsp[-11]._number, yyvsp[-10]._number, yyvsp[-9]._number, yyvsp[-8]._number,
               yyvsp[-7]._number, yyvsp[-6]._number, yyvsp[-5]._number, yyvsp[-4]._number,
               yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 107:
#line 1167 "parser.yxx"
{
  matrix_2d = LMatrix3d::ident_mat();
}
    break;
case 108:
#line 1171 "parser.yxx"
{
  DCAST(EggTexture, egg_stack.back())->set_transform(matrix_2d);
}
    break;
case 114:
#line 1193 "parser.yxx"
{
  matrix_2d *= LMatrix3d::translate_mat(yyvsp[-2]._number, yyvsp[-1]._number);
}
    break;
case 115:
#line 1199 "parser.yxx"
{
  matrix_2d *= LMatrix3d::rotate_mat(yyvsp[-1]._number);
}
    break;
case 116:
#line 1205 "parser.yxx"
{
  matrix_2d *= LMatrix3d::scale_mat(yyvsp[-2]._number, yyvsp[-1]._number);
}
    break;
case 119:
#line 1218 "parser.yxx"
{
  matrix_2d *= LMatrix3d(yyvsp[-8]._number, yyvsp[-7]._number, yyvsp[-6]._number,
                         yyvsp[-5]._number, yyvsp[-4]._number, yyvsp[-3]._number,
                         yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number);
}
    break;
case 120:
#line 1235 "parser.yxx"
{
  if (yyvsp[-2]._egg != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, yyvsp[-2]._egg);
    EggGroup *group = DCAST(EggGroup, egg_stack.back());
    PTA_double nums = yyvsp[-6]._number_list;
    double membership = yyvsp[-5]._number;

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        group->ref_vertex(vertex, membership);
      }
    }
  }
}
    break;
case 121:
#line 1268 "parser.yxx"
{
  yyval._number = 1.0;
}
    break;
case 122:
#line 1272 "parser.yxx"
{
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  double result = yyvsp[-5]._number;
  
  if (cmp_nocase_uh(name, "membership") == 0) {
    result = value;
  } else {
    eggyywarning("Unknown group vertex scalar " + name);
  }

  yyval._number = result;
}
    break;
case 124:
#line 1309 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance(yyvsp[-8]._number, yyvsp[-7]._number, LPoint3d(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number)));
}
    break;
case 125:
#line 1314 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance(yyvsp[-9]._number, yyvsp[-8]._number, LPoint3d(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number), yyvsp[-7]._number));
}
    break;
case 126:
#line 1331 "parser.yxx"
{
  egg_stack.push_back(new EggPolygon(yyvsp[0]._string));
}
    break;
case 127:
#line 1335 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 128:
#line 1350 "parser.yxx"
{
  egg_stack.push_back(new EggPoint(yyvsp[0]._string));
}
    break;
case 129:
#line 1354 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 130:
#line 1369 "parser.yxx"
{
  egg_stack.push_back(new EggNurbsSurface(yyvsp[0]._string));
}
    break;
case 131:
#line 1373 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 132:
#line 1388 "parser.yxx"
{
  egg_stack.push_back(new EggNurbsCurve(yyvsp[0]._string));
}
    break;
case 133:
#line 1392 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 142:
#line 1416 "parser.yxx"
{
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }
  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else {
    eggyywarning("Unknown scalar " + name);
  }
}
    break;
case 154:
#line 1476 "parser.yxx"
{
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, yyvsp[0]._egg);
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_curves_on_surface.push_back(curve);
}
    break;
case 156:
#line 1483 "parser.yxx"
{
  EggNurbsSurface *primitive = DCAST(EggNurbsSurface, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }
  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "u_subdiv") == 0) {
    primitive->set_u_subdiv((int)value);
  } else if (cmp_nocase_uh(name, "v_subdiv") == 0) {
    primitive->set_v_subdiv((int)value);
  } else {
    eggyywarning("Unknown scalar " + name);
  }
}
    break;
case 167:
#line 1547 "parser.yxx"
{
  EggNurbsCurve *primitive = DCAST(EggNurbsCurve, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }
  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "subdiv") == 0) {
    primitive->set_subdiv((int)value);
  } else if (cmp_nocase_uh(name, "type") == 0) {
    EggCurve::CurveType a = EggCurve::string_curve_type(strval);
    if (a == EggCurve::CT_none) {
      eggyywarning("Unknown curve type " + strval);
    } else {
      primitive->set_curve_type(a);
    }
    
  } else {
    eggyywarning("Unknown scalar " + name);
  }
}
    break;
case 168:
#line 1606 "parser.yxx"
{
  if (yyvsp[0]._egg != (EggTexture *)NULL) {
    EggTexture *texture = DCAST(EggTexture, yyvsp[0]._egg);
    DCAST(EggPrimitive, egg_stack.back())->set_texture(texture);
  }
}
    break;
case 169:
#line 1623 "parser.yxx"
{
  EggTexture *texture = NULL;

  // Defining a texture on-the-fly.
  Filename filename = yyvsp[0]._string;
  string tref_name = filename.get_basename();

  Textures::iterator vpi = textures.find(tref_name);
  if (vpi == textures.end()) {
    // The texture was not yet defined.  Define it.
    texture = new EggTexture(tref_name, filename);
    textures[tref_name] = texture;

    if (egg_top_node != NULL) {
      egg_top_node->add_child(texture);
    }

  } else {
    // The texture already existed.  Use it.
    texture = (*vpi).second;
    if (filename != texture->get_filename()) {
      eggyywarning(string("Using previous path: ") + 
                   texture->get_filename().get_fullpath());
    }
  }

  nassertr(texture != NULL, 0);
  DCAST(EggPrimitive, egg_stack.back())->set_texture(texture);
}
    break;
case 170:
#line 1663 "parser.yxx"
{
  if (yyvsp[0]._egg != (EggMaterial *)NULL) {
    EggMaterial *material = DCAST(EggMaterial, yyvsp[0]._egg);
    DCAST(EggPrimitive, egg_stack.back())->set_material(material);
  }
}
    break;
case 171:
#line 1680 "parser.yxx"
{
  DCAST(EggPrimitive, egg_stack.back())->set_normal(Normald(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 172:
#line 1684 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;
case 173:
#line 1692 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
}
    break;
case 174:
#line 1710 "parser.yxx"
{
  DCAST(EggPrimitive, egg_stack.back())->set_color(Colorf(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 175:
#line 1714 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-6]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-6]._string);
  }
}
    break;
case 176:
#line 1722 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-5]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;
case 177:
#line 1740 "parser.yxx"
{
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  int value = (int)yyvsp[0]._number;
  primitive->set_bface_flag(value!=0);
}
    break;
case 178:
#line 1756 "parser.yxx"
{
  if (yyvsp[-2]._egg != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, yyvsp[-2]._egg);
    EggPrimitive *prim = DCAST(EggPrimitive, egg_stack.back());
    PTA_double nums = yyvsp[-5]._number_list;

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        prim->add_vertex(vertex);
      }
    }
  }
}
    break;
case 179:
#line 1787 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  int u_order = (int)yyvsp[-1]._number;
  int v_order = (int)yyvsp[0]._number;
  nurbs->set_u_order(u_order);
  nurbs->set_v_order(v_order);
}
    break;
case 180:
#line 1805 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_u_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_u_knot(i, nums[i]);
  }
}
    break;
case 181:
#line 1825 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_v_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_v_knot(i, nums[i]);
  }
}
    break;
case 182:
#line 1845 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_trims.push_back(EggNurbsSurface::Trim());
}
    break;
case 184:
#line 1861 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nurbs->_trims.back().push_back(EggNurbsSurface::Loop());
}
    break;
case 185:
#line 1867 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nassertr(!nurbs->_trims.back().empty(), 0);
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, yyvsp[0]._egg); 
  nurbs->_trims.back().back().push_back(curve);
}
    break;
case 186:
#line 1886 "parser.yxx"
{
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  int order = (int)yyvsp[0]._number;
  nurbs->set_order(order);
}
    break;
case 187:
#line 1902 "parser.yxx"
{
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_knot(i, nums[i]);
  }
}
    break;
case 188:
#line 1923 "parser.yxx"
{
  EggTable *table = new EggTable(yyvsp[0]._string);
  table->set_table_type(EggTable::TT_table);
  egg_stack.push_back(table);
}
    break;
case 189:
#line 1929 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 190:
#line 1945 "parser.yxx"
{
  EggTable *table = new EggTable(yyvsp[0]._string);
  table->set_table_type(EggTable::TT_bundle);
  egg_stack.push_back(table);
}
    break;
case 191:
#line 1951 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 193:
#line 1968 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 194:
#line 1972 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 195:
#line 1976 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 196:
#line 1980 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 197:
#line 1984 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 198:
#line 1999 "parser.yxx"
{
  EggSAnimData *anim_data = new EggSAnimData(yyvsp[0]._string);
  egg_stack.push_back(anim_data);
}
    break;
case 199:
#line 2004 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 201:
#line 2021 "parser.yxx"
{
  EggSAnimData *anim_data = DCAST(EggSAnimData, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else {
    eggyywarning("Unsupported S$Anim scalar: " + name);
  }
}
    break;
case 202:
#line 2033 "parser.yxx"
{
  DCAST(EggSAnimData, egg_stack.back())->set_data(yyvsp[-1]._number_list);
}
    break;
case 203:
#line 2047 "parser.yxx"
{
  EggXfmAnimData *anim_data = new EggXfmAnimData(yyvsp[0]._string);
  egg_stack.push_back(anim_data);
}
    break;
case 204:
#line 2052 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 206:
#line 2069 "parser.yxx"
{
  EggXfmAnimData *anim_data = DCAST(EggXfmAnimData, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_data->set_order(strval);
  } else if (cmp_nocase_uh(name, "contents") == 0) {
    anim_data->set_contents(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim scalar: " + name);
  }
}
    break;
case 207:
#line 2086 "parser.yxx"
{
  DCAST(EggXfmAnimData, egg_stack.back())->set_data(yyvsp[-1]._number_list);
}
    break;
case 208:
#line 2100 "parser.yxx"
{
  EggXfmSAnim *anim_group = new EggXfmSAnim(yyvsp[0]._string);
  egg_stack.push_back(anim_group);
}
    break;
case 209:
#line 2105 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 211:
#line 2122 "parser.yxx"
{
  EggXfmSAnim *anim_group = DCAST(EggXfmSAnim, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_group->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_group->set_order(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim_S$ scalar: " + name);
  }
}
    break;
case 212:
#line 2137 "parser.yxx"
{
  DCAST(EggXfmSAnim, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 213:
#line 2152 "parser.yxx"
{
  yyval._number_list = PTA_double::empty_array(0);
}
    break;
case 214:
#line 2156 "parser.yxx"
{
  yyval._number_list.push_back((double)yyvsp[0]._number);
}
    break;
case 215:
#line 2170 "parser.yxx"
{
  yyval._number_list = PTA_double::empty_array(0);
}
    break;
case 216:
#line 2174 "parser.yxx"
{
  yyval._number_list.push_back(yyvsp[0]._number);
}
    break;
case 217:
#line 2188 "parser.yxx"
{
  string name = yyvsp[0]._string;
  Textures::iterator vpi = textures.find(name);
  if (vpi == textures.end()) {
    eggyyerror("Unknown texture " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
}
    break;
case 218:
#line 2209 "parser.yxx"
{
  string name = yyvsp[0]._string;
  Materials::iterator vpi = materials.find(name);
  if (vpi == materials.end()) {
    eggyyerror("Unknown material " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
}
    break;
case 219:
#line 2230 "parser.yxx"
{
  string name = yyvsp[0]._string;
  VertexPools::iterator vpi = vertex_pools.find(name);
  if (vpi == vertex_pools.end()) {
    eggyyerror("Unknown vertex pool " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
}
    break;
case 220:
#line 2252 "parser.yxx"
{
  eggyyerror("Name required.");
  yyval._string = "";
}
    break;
case 223:
#line 2281 "parser.yxx"
{
  eggyyerror("String required.");
  yyval._string = "";
}
    break;
case 225:
#line 2297 "parser.yxx"
{
  yyval._string = "";
}
    break;
case 227:
#line 2315 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
}
    break;
case 228:
#line 2319 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
}
    break;
case 230:
#line 2336 "parser.yxx"
{
  yyval._string = "";
}
    break;
case 231:
#line 2340 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
}
    break;
case 232:
#line 2356 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
}
    break;
case 233:
#line 2360 "parser.yxx"
{
  yyval._string = yyvsp[-1]._string + "\n" + yyvsp[0]._string;
}
    break;
case 235:
#line 2375 "parser.yxx"
{
  yyval._number = yyvsp[0]._ulong;
}
    break;
case 236:
#line 2390 "parser.yxx"
{
  yyval._number = yyvsp[0]._number;
  yyval._ulong = (unsigned long)yyvsp[0]._number;
  yyval._string = yyvsp[0]._string;
}
    break;
case 237:
#line 2396 "parser.yxx"
{
  yyval._number = yyvsp[0]._ulong;
  yyval._ulong = yyvsp[0]._ulong;
  yyval._string = yyvsp[0]._string;
}
    break;
case 238:
#line 2402 "parser.yxx"
{
  yyval._number = 0.0;
  yyval._ulong = 0;
  yyval._string = yyvsp[0]._string;
}
    break;
case 239:
#line 2419 "parser.yxx"
{
  int i = (int)yyvsp[0]._number;
  if ((double)i != yyvsp[0]._number) {
    eggyywarning("Integer expected.");
    yyval._number = (double)i;
  }
}
    break;
case 240:
#line 2427 "parser.yxx"
{
  yyval._number = yyvsp[0]._ulong;
}
    break;
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 2434 "parser.yxx"

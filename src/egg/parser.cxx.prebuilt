
/*  A Bison parser, made from parser.yxx
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse eggyyparse
#define yylex eggyylex
#define yyerror eggyyerror
#define yylval eggyylval
#define yychar eggyychar
#define yydebug eggyydebug
#define yynerrs eggyynerrs
#define	EGG_NUMBER	257
#define	EGG_ULONG	258
#define	EGG_STRING	259
#define	ANIMPRELOAD	260
#define	BEZIERCURVE	261
#define	BFACE	262
#define	BILLBOARD	263
#define	BILLBOARDCENTER	264
#define	BINORMAL	265
#define	BUNDLE	266
#define	CLOSED	267
#define	COLLIDE	268
#define	COMMENT	269
#define	COMPONENT	270
#define	COORDSYSTEM	271
#define	CV	272
#define	DART	273
#define	DNORMAL	274
#define	DRGBA	275
#define	DUV	276
#define	DXYZ	277
#define	DCS	278
#define	DISTANCE	279
#define	DTREF	280
#define	DYNAMICVERTEXPOOL	281
#define	EXTERNAL_FILE	282
#define	GROUP	283
#define	DEFAULTPOSE	284
#define	JOINT	285
#define	KNOTS	286
#define	INCLUDE	287
#define	INSTANCE	288
#define	LINE	289
#define	LOOP	290
#define	MATERIAL	291
#define	MATRIX3	292
#define	MATRIX4	293
#define	MODEL	294
#define	MREF	295
#define	NORMAL	296
#define	NURBSCURVE	297
#define	NURBSSURFACE	298
#define	OBJECTTYPE	299
#define	ORDER	300
#define	OUTTANGENT	301
#define	POINTLIGHT	302
#define	POLYGON	303
#define	REF	304
#define	RGBA	305
#define	ROTATE	306
#define	ROTX	307
#define	ROTY	308
#define	ROTZ	309
#define	SANIM	310
#define	SCALAR	311
#define	SCALE	312
#define	SEQUENCE	313
#define	SHADING	314
#define	SWITCH	315
#define	SWITCHCONDITION	316
#define	TABLE	317
#define	TABLE_V	318
#define	TAG	319
#define	TANGENT	320
#define	TEXLIST	321
#define	TEXTURE	322
#define	TLENGTHS	323
#define	TRANSFORM	324
#define	TRANSLATE	325
#define	TREF	326
#define	TRIANGLEFAN	327
#define	TRIANGLESTRIP	328
#define	TRIM	329
#define	TXT	330
#define	UKNOTS	331
#define	UV	332
#define	VKNOTS	333
#define	VERTEX	334
#define	VERTEXANIM	335
#define	VERTEXPOOL	336
#define	VERTEXREF	337
#define	XFMANIM	338
#define	XFMSANIM	339
#define	START_EGG	340
#define	START_GROUP_BODY	341
#define	START_TEXTURE_BODY	342
#define	START_PRIMITIVE_BODY	343

#line 6 "parser.yxx"


#include "pandabase.h"
#include "config_egg.h"
#include "parserDefs.h"
#include "lexerDefs.h"
#include "eggObject.h"
#include "eggGroup.h"
#include "eggVertex.h"
#include "eggVertexPool.h"
#include "eggVertexUV.h"
#include "eggPolygon.h"
#include "eggCompositePrimitive.h"
#include "eggTriangleFan.h"
#include "eggTriangleStrip.h"
#include "eggPoint.h"
#include "eggLine.h"
#include "eggNurbsSurface.h"
#include "eggNurbsCurve.h"
#include "eggTable.h"
#include "eggSAnimData.h"
#include "eggXfmSAnim.h"
#include "eggXfmAnimData.h"
#include "eggTexture.h"
#include "eggMaterial.h"
#include "eggComment.h"
#include "eggCoordinateSystem.h"
#include "eggExternalReference.h"
#include "eggData.h"
#include "eggAnimPreload.h"
#include "eggTransform.h"
#include "pt_EggTexture.h"
#include "pt_EggMaterial.h"

#include "string_utils.h"
#include "filename.h"
#include "luse.h"
#include "lmatrix.h"
#include "coordinateSystem.h"
#include "pvector.h"
#include "dcast.h"
#include "thread.h"

// Because our token type contains objects of type string, which
// require correct copy construction (and not simply memcpying), we
// cannot use bison's built-in auto-stack-grow feature.  As an easy
// solution, we ensure here that we have enough yacc stack to start
// with, and that it doesn't ever try to grow.
#define YYINITDEPTH 1000
#define YYMAXDEPTH 1000

// We need a stack of EggObject pointers.  Each time we encounter a
// nested EggObject of some kind, we'll allocate a new one of these
// and push it onto the stack.  At any given time, the top of the
// stack is the EggObject we are currently scanning.

typedef pvector< PT(EggObject) > EggStack;
static EggStack egg_stack;

// This is used just when parsing a <Transform> or <DefaultPose> entry.
static EggTransform *egg_top_transform;

// There's one "top-level" egg node, which is where we should parent
// things (e.g. implicit textures) encountered in the egg file that
// don't have an explicit place in the tree.  If this is NULL, such
// things won't be parented anywhere.
static EggGroupNode *egg_top_node;

// We need a table mapping vertex pool names to vertex pools.
typedef pmap<string,  PT(EggVertexPool) > VertexPools;
static VertexPools vertex_pools;

// And another one mapping texture names to textures.
typedef pmap<string,  PT_EggTexture > Textures;
static Textures textures;

// And again for material names to materials.
typedef pmap<string,  PT_EggMaterial > Materials;
static Materials materials;

// Group names to groups.
typedef pmap<string,  PT(EggGroup) > Groups;
static Groups groups;

// We need to be able to save the index number requested for a vertex
// temporarily.
static int vertex_index;

// We need to hold a matrix for a little bit while parsing the
// <Transform> entries.
static LMatrix3d matrix_2d;


////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

void
egg_init_parser(istream &in, const string &filename,
                EggObject *tos, EggGroupNode *top_node) {
  egg_init_lexer(in, filename);

  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();
  groups.clear();

  egg_stack.push_back(tos);
  egg_top_node = top_node;
}

void
egg_cleanup_parser() {
  // Check for undefined vertex pools.
  VertexPools::const_iterator vpi;
  for (vpi = vertex_pools.begin(); vpi != vertex_pools.end(); ++vpi) {
    EggVertexPool *pool = (*vpi).second;
    if (pool->has_forward_vertices()) {
      if (!pool->has_defined_vertices()) {
        eggyyerror("Undefined vertex pool " + pool->get_name());
      } else {
        eggyyerror("Undefined vertices in pool " + pool->get_name());
        
        egg_cat.error(false)
          << "Undefined vertex index numbers:";
        EggVertexPool::const_iterator vi;
        for (vi = pool->begin(); vi != pool->end(); ++vi) {
          EggVertex *vertex = (*vi);
          if (vertex->is_forward_reference()) {
            egg_cat.error(false)
              << " " << vertex->get_index();
          }
        }
        egg_cat.error(false) 
          << "\n";
      }
    }
  }

  // Clean these out after we're done, so we don't keep big memory
  // structures around needlessly.
  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();
  groups.clear();
}

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		746
#define	YYFLAG		-32768
#define	YYNTBASE	92

#define YYTRANSLATE(x) ((unsigned)(x) <= 343 ? yytranslate[x] : 214)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    90,     2,    91,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     6,     9,    12,    14,    17,    19,    21,    23,
    25,    27,    29,    31,    33,    35,    37,    39,    41,    43,
    45,    47,    49,    51,    53,    58,    64,    65,    73,    75,
    82,    85,    86,    93,    95,   102,   108,   115,   116,   123,
   125,   128,   129,   135,   136,   143,   145,   148,   152,   157,
   158,   166,   172,   178,   187,   196,   199,   203,   211,   219,
   227,   236,   244,   253,   257,   266,   275,   280,   290,   300,
   301,   308,   309,   316,   317,   324,   326,   333,   339,   347,
   355,   361,   367,   373,   379,   385,   391,   397,   404,   410,
   413,   416,   419,   422,   428,   431,   433,   435,   438,   439,
   445,   446,   452,   454,   457,   460,   463,   466,   469,   472,
   475,   478,   481,   484,   487,   490,   496,   503,   508,   513,
   518,   523,   531,   537,   544,   549,   554,   556,   566,   571,
   573,   590,   600,   602,   609,   614,   626,   639,   640,   647,
   648,   655,   656,   663,   664,   671,   672,   679,   680,   687,
   688,   695,   697,   703,   709,   711,   712,   720,   726,   732,
   738,   741,   747,   753,   759,   766,   768,   774,   780,   786,
   789,   795,   801,   807,   813,   819,   825,   828,   834,   841,
   843,   849,   855,   861,   864,   870,   876,   882,   888,   894,
   901,   903,   905,   907,   911,   920,   929,   934,   944,   954,
   956,   965,   968,   970,   972,   974,   980,   982,   985,   987,
   989,   990,   997,   998,  1005,  1007,  1010,  1013,  1016,  1019,
  1022,  1023,  1030,  1032,  1039,  1045,  1046,  1053,  1055,  1062,
  1068,  1069,  1076,  1078,  1085,  1088,  1089,  1096,  1098,  1105,
  1107,  1110,  1112,  1115,  1117,  1119,  1121,  1123,  1125,  1127,
  1129,  1131,  1133,  1135,  1137,  1139,  1141,  1143,  1145,  1147,
  1149,  1152,  1154,  1156,  1158,  1160,  1162,  1164,  1166
};

static const short yyrhs[] = {    86,
    93,     0,    87,   121,     0,    88,    99,     0,    89,   162,
     0,   213,     0,    93,    94,     0,    95,     0,    96,     0,
    97,     0,   100,     0,   103,     0,   104,     0,   115,     0,
   117,     0,   119,     0,   147,     0,   149,     0,   151,     0,
   153,     0,   155,     0,   157,     0,   159,     0,   180,     0,
   194,     0,    17,    90,   205,    91,     0,    15,   204,    90,
   208,    91,     0,     0,    68,   203,    90,   205,    98,    99,
    91,     0,   213,     0,    99,    57,   203,    90,   211,    91,
     0,    99,   124,     0,     0,    37,   203,    90,   101,   102,
    91,     0,   213,     0,   102,    57,   203,    90,   211,    91,
     0,    28,   204,    90,   205,    91,     0,   207,    28,   204,
    90,   205,    91,     0,     0,    82,   203,   105,    90,   106,
    91,     0,   213,     0,   106,   107,     0,     0,    80,   108,
    90,   110,    91,     0,     0,    80,   212,   109,    90,   110,
    91,     0,   210,     0,   210,   210,     0,   210,   210,   210,
     0,   210,   210,   210,   210,     0,     0,   110,    78,   204,
    90,   111,   112,    91,     0,   110,    42,    90,   113,    91,
     0,   110,    51,    90,   114,    91,     0,   110,    23,   207,
    90,   210,   210,   210,    91,     0,   110,    23,    90,   207,
   210,   210,   210,    91,     0,   210,   210,     0,   210,   210,
   210,     0,   112,    66,    90,   210,   210,   210,    91,     0,
   112,    11,    90,   210,   210,   210,    91,     0,   112,    22,
   207,    90,   210,   210,    91,     0,   112,    22,   207,    90,
   210,   210,   210,    91,     0,   112,    22,    90,   207,   210,
   210,    91,     0,   112,    22,    90,   207,   210,   210,   210,
    91,     0,   210,   210,   210,     0,   113,    20,   207,    90,
   210,   210,   210,    91,     0,   113,    20,    90,   207,   210,
   210,   210,    91,     0,   210,   210,   210,   210,     0,   114,
    21,   207,    90,   210,   210,   210,   210,    91,     0,   114,
    21,    90,   207,   210,   210,   210,   210,    91,     0,     0,
    29,   204,   116,    90,   121,    91,     0,     0,    31,   204,
   118,    90,   121,    91,     0,     0,    34,   204,   120,    90,
   121,    91,     0,   213,     0,   121,    57,   203,    90,   211,
    91,     0,   121,     9,    90,   207,    91,     0,   121,    10,
    90,   210,   210,   210,    91,     0,   121,    14,   204,    90,
   122,   123,    91,     0,   121,    24,    90,   212,    91,     0,
   121,    24,    90,     5,    91,     0,   121,    19,    90,   212,
    91,     0,   121,    19,    90,     5,    91,     0,   121,    61,
    90,   212,    91,     0,   121,    45,    90,   205,    91,     0,
   121,    40,    90,   212,    91,     0,   121,    65,   204,    90,
   208,    91,     0,   121,    67,    90,   212,    91,     0,   121,
   124,     0,   121,   126,     0,   121,   143,     0,   121,   145,
     0,   121,    50,    90,   202,    91,     0,   121,    94,     0,
   207,     0,   213,     0,   123,   207,     0,     0,    70,   125,
    90,   128,    91,     0,     0,    30,   127,    90,   128,    91,
     0,   213,     0,   128,   129,     0,   128,   130,     0,   128,
   131,     0,   128,   132,     0,   128,   133,     0,   128,   134,
     0,   128,   135,     0,   128,   136,     0,   128,   137,     0,
   128,   138,     0,   128,   139,     0,   128,   141,     0,    71,
    90,   210,   210,    91,     0,    71,    90,   210,   210,   210,
    91,     0,    52,    90,   210,    91,     0,    53,    90,   210,
    91,     0,    54,    90,   210,    91,     0,    55,    90,   210,
    91,     0,    52,    90,   210,   210,   210,   210,    91,     0,
    58,    90,   210,   210,    91,     0,    58,    90,   210,   210,
   210,    91,     0,    58,    90,   210,    91,     0,    38,    90,
   140,    91,     0,   213,     0,   210,   210,   210,   210,   210,
   210,   210,   210,   210,     0,    39,    90,   142,    91,     0,
   213,     0,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   210,   210,   210,     0,    83,
    90,   197,   144,    50,    90,   201,    91,    91,     0,   213,
     0,   144,    57,   203,    90,   211,    91,     0,    62,    90,
   146,    91,     0,    25,    90,   210,   210,    80,    90,   210,
   210,   210,    91,    91,     0,    25,    90,   210,   210,   210,
    80,    90,   210,   210,   210,    91,    91,     0,     0,    49,
   204,   148,    90,   162,    91,     0,     0,    73,   204,   150,
    90,   162,    91,     0,     0,    74,   204,   152,    90,   162,
    91,     0,     0,    48,   204,   154,    90,   162,    91,     0,
     0,    35,   204,   156,    90,   162,    91,     0,     0,    44,
   204,   158,    90,   164,    91,     0,     0,    43,   204,   160,
    90,   165,    91,     0,   213,     0,   161,    42,    90,   169,
    91,     0,   161,    51,    90,   170,    91,     0,   213,     0,
     0,   162,    16,   212,    90,   163,   161,    91,     0,   162,
    72,    90,   166,    91,     0,   162,    68,    90,   167,    91,
     0,   162,    41,    90,   168,    91,     0,   162,   172,     0,
   162,    42,    90,   169,    91,     0,   162,    51,    90,   170,
    91,     0,   162,     8,    90,   171,    91,     0,   162,    57,
   203,    90,   211,    91,     0,   213,     0,   164,    72,    90,
   166,    91,     0,   164,    68,    90,   167,    91,     0,   164,
    41,    90,   168,    91,     0,   164,   172,     0,   164,    42,
    90,   169,    91,     0,   164,    51,    90,   170,    91,     0,
   164,     8,    90,   171,    91,     0,   164,    46,    90,   173,
    91,     0,   164,    77,    90,   174,    91,     0,   164,    79,
    90,   175,    91,     0,   164,   159,     0,   164,    75,    90,
   176,    91,     0,   164,    57,   203,    90,   211,    91,     0,
   213,     0,   165,    72,    90,   166,    91,     0,   165,    68,
    90,   167,    91,     0,   165,    41,    90,   168,    91,     0,
   165,   172,     0,   165,    42,    90,   169,    91,     0,   165,
    51,    90,   170,    91,     0,   165,     8,    90,   171,    91,
     0,   165,    46,    90,   178,    91,     0,   165,    32,    90,
   179,    91,     0,   165,    57,   203,    90,   211,    91,     0,
   199,     0,   203,     0,   200,     0,   210,   210,   210,     0,
   169,    20,   207,    90,   210,   210,   210,    91,     0,   169,
    20,    90,   207,   210,   210,   210,    91,     0,   210,   210,
   210,   210,     0,   170,    21,   207,    90,   210,   210,   210,
   210,    91,     0,   170,    21,    90,   207,   210,   210,   210,
   210,    91,     0,   212,     0,    83,    90,   197,    50,    90,
   201,    91,    91,     0,   212,   212,     0,   198,     0,   198,
     0,   213,     0,   176,    36,    90,   177,    91,     0,   213,
     0,   177,   159,     0,   212,     0,   198,     0,     0,    63,
   204,   181,    90,   184,    91,     0,     0,    12,   204,   183,
    90,   184,    91,     0,   213,     0,   184,   180,     0,   184,
   182,     0,   184,   185,     0,   184,   188,     0,   184,   191,
     0,     0,    56,   204,   186,    90,   187,    91,     0,   213,
     0,   187,    57,   203,    90,   211,    91,     0,   187,    64,
    90,   198,    91,     0,     0,    84,   204,   189,    90,   190,
    91,     0,   213,     0,   190,    57,   203,    90,   211,    91,
     0,   190,    64,    90,   198,    91,     0,     0,    85,   204,
   192,    90,   193,    91,     0,   213,     0,   193,    57,   203,
    90,   211,    91,     0,   193,   185,     0,     0,     6,   204,
   195,    90,   196,    91,     0,   213,     0,   196,    57,   203,
    90,   211,    91,     0,   213,     0,   197,   212,     0,   213,
     0,   198,   210,     0,   203,     0,   203,     0,   203,     0,
   203,     0,   213,     0,   207,     0,   206,     0,   213,     0,
   207,     0,   213,     0,   207,     0,     3,     0,     4,     0,
     5,     0,   213,     0,   209,     0,   207,     0,   209,   207,
     0,     3,     0,     4,     0,     3,     0,     4,     0,     5,
     0,     3,     0,     4,     0,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   230,   232,   233,   234,   244,   246,   261,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   289,   312,   326,   340,   354,   356,
   688,   698,   711,   725,   727,   821,   829,   848,   873,   888,
   890,   900,   905,   912,   937,   957,   962,   966,   970,   974,
   985,   989,   990,   991,   999,  1017,  1022,  1026,  1034,  1042,
  1050,  1058,  1066,  1083,  1088,  1096,  1113,  1118,  1126,  1143,
  1149,  1168,  1175,  1189,  1196,  1214,  1216,  1346,  1358,  1363,
  1370,  1376,  1389,  1396,  1409,  1415,  1421,  1427,  1432,  1438,
  1439,  1440,  1441,  1442,  1451,  1464,  1494,  1496,  1517,  1523,
  1533,  1543,  1554,  1556,  1557,  1558,  1559,  1560,  1561,  1562,
  1563,  1564,  1565,  1566,  1567,  1570,  1577,  1584,  1591,  1598,
  1605,  1612,  1619,  1626,  1633,  1640,  1644,  1646,  1657,  1661,
  1663,  1684,  1717,  1722,  1746,  1758,  1764,  1780,  1785,  1799,
  1804,  1818,  1823,  1837,  1842,  1856,  1861,  1875,  1880,  1894,
  1899,  1914,  1916,  1917,  1927,  1929,  1943,  1950,  1951,  1952,
  1953,  1954,  1955,  1956,  1957,  2029,  2031,  2032,  2033,  2034,
  2035,  2036,  2037,  2038,  2039,  2040,  2041,  2047,  2048,  2111,
  2113,  2114,  2115,  2116,  2117,  2118,  2119,  2120,  2121,  2122,
  2190,  2207,  2247,  2264,  2269,  2277,  2294,  2299,  2307,  2324,
  2340,  2371,  2389,  2409,  2429,  2435,  2445,  2452,  2470,  2486,
  2507,  2514,  2530,  2537,  2551,  2553,  2557,  2561,  2565,  2569,
  2583,  2589,  2604,  2606,  2618,  2631,  2637,  2652,  2654,  2671,
  2684,  2690,  2705,  2707,  2722,  2736,  2742,  2757,  2759,  2782,
  2787,  2800,  2805,  2818,  2839,  2860,  2885,  2906,  2912,  2923,
  2935,  2941,  2951,  2956,  2969,  2974,  2978,  2990,  2995,  3010,
  3015,  3028,  3030,  3044,  3051,  3057,  3073,  3082,  3088
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","EGG_NUMBER",
"EGG_ULONG","EGG_STRING","ANIMPRELOAD","BEZIERCURVE","BFACE","BILLBOARD","BILLBOARDCENTER",
"BINORMAL","BUNDLE","CLOSED","COLLIDE","COMMENT","COMPONENT","COORDSYSTEM","CV",
"DART","DNORMAL","DRGBA","DUV","DXYZ","DCS","DISTANCE","DTREF","DYNAMICVERTEXPOOL",
"EXTERNAL_FILE","GROUP","DEFAULTPOSE","JOINT","KNOTS","INCLUDE","INSTANCE","LINE",
"LOOP","MATERIAL","MATRIX3","MATRIX4","MODEL","MREF","NORMAL","NURBSCURVE","NURBSSURFACE",
"OBJECTTYPE","ORDER","OUTTANGENT","POINTLIGHT","POLYGON","REF","RGBA","ROTATE",
"ROTX","ROTY","ROTZ","SANIM","SCALAR","SCALE","SEQUENCE","SHADING","SWITCH",
"SWITCHCONDITION","TABLE","TABLE_V","TAG","TANGENT","TEXLIST","TEXTURE","TLENGTHS",
"TRANSFORM","TRANSLATE","TREF","TRIANGLEFAN","TRIANGLESTRIP","TRIM","TXT","UKNOTS",
"UV","VKNOTS","VERTEX","VERTEXANIM","VERTEXPOOL","VERTEXREF","XFMANIM","XFMSANIM",
"START_EGG","START_GROUP_BODY","START_TEXTURE_BODY","START_PRIMITIVE_BODY","'{'",
"'}'","grammar","egg","node","coordsystem","comment","texture","@1","texture_body",
"material","@2","material_body","external_reference","vertex_pool","@3","vertex_pool_body",
"vertex","@4","@5","vertex_body","@6","vertex_uv_body","vertex_normal_body",
"vertex_color_body","group","@7","joint","@8","instance","@9","group_body","cs_type",
"collide_flags","transform","@10","default_pose","@11","transform_body","translate2d",
"translate3d","rotate2d","rotx","roty","rotz","rotate3d","scale2d","scale3d",
"uniform_scale","matrix3","matrix3_body","matrix4","matrix4_body","group_vertex_ref",
"group_vertex_membership","switchcondition","switchcondition_body","polygon",
"@12","trianglefan","@13","trianglestrip","@14","point_light","@15","line","@16",
"nurbs_surface","@17","nurbs_curve","@18","primitive_component_body","primitive_body",
"@19","nurbs_surface_body","nurbs_curve_body","primitive_tref_body","primitive_texture_body",
"primitive_material_body","primitive_normal_body","primitive_color_body","primitive_bface_body",
"primitive_vertex_ref","nurbs_surface_order_body","nurbs_surface_uknots_body",
"nurbs_surface_vknots_body","nurbs_surface_trim_body","nurbs_surface_trim_loop_body",
"nurbs_curve_order_body","nurbs_curve_knots_body","table","@20","bundle","@21",
"table_body","sanim","@22","sanim_body","xfmanim","@23","xfmanim_body","xfm_s_anim",
"@24","xfm_s_anim_body","anim_preload","@25","anim_preload_body","integer_list",
"real_list","texture_name","material_name","vertex_pool_name","group_name","required_name",
"optional_name","required_string","optional_string","string","repeated_string",
"repeated_string_body","real","real_or_string","integer","empty", NULL
};
#endif

static const short yyr1[] = {     0,
    92,    92,    92,    92,    93,    93,    94,    94,    94,    94,
    94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
    94,    94,    94,    94,    95,    96,    98,    97,    99,    99,
    99,   101,   100,   102,   102,   103,   103,   105,   104,   106,
   106,   108,   107,   109,   107,   110,   110,   110,   110,   111,
   110,   110,   110,   110,   110,   112,   112,   112,   112,   112,
   112,   112,   112,   113,   113,   113,   114,   114,   114,   116,
   115,   118,   117,   120,   119,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   122,   123,   123,   125,   124,
   127,   126,   128,   128,   128,   128,   128,   128,   128,   128,
   128,   128,   128,   128,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   140,   141,   142,
   142,   143,   144,   144,   145,   146,   146,   148,   147,   150,
   149,   152,   151,   154,   153,   156,   155,   158,   157,   160,
   159,   161,   161,   161,   162,   163,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   164,   164,   164,   164,   164,
   164,   164,   164,   164,   164,   164,   164,   164,   164,   165,
   165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
   166,   167,   168,   169,   169,   169,   170,   170,   170,   171,
   172,   173,   174,   175,   176,   176,   177,   177,   178,   179,
   181,   180,   183,   182,   184,   184,   184,   184,   184,   184,
   186,   185,   187,   187,   187,   189,   188,   190,   190,   190,
   192,   191,   193,   193,   193,   195,   194,   196,   196,   197,
   197,   198,   198,   199,   200,   201,   202,   203,   203,   204,
   205,   205,   206,   206,   207,   207,   207,   208,   208,   209,
   209,   210,   210,   211,   211,   211,   212,   212,   213
};

static const short yyr2[] = {     0,
     2,     2,     2,     2,     1,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     4,     5,     0,     7,     1,     6,
     2,     0,     6,     1,     6,     5,     6,     0,     6,     1,
     2,     0,     5,     0,     6,     1,     2,     3,     4,     0,
     7,     5,     5,     8,     8,     2,     3,     7,     7,     7,
     8,     7,     8,     3,     8,     8,     4,     9,     9,     0,
     6,     0,     6,     0,     6,     1,     6,     5,     7,     7,
     5,     5,     5,     5,     5,     5,     5,     6,     5,     2,
     2,     2,     2,     5,     2,     1,     1,     2,     0,     5,
     0,     5,     1,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     5,     6,     4,     4,     4,
     4,     7,     5,     6,     4,     4,     1,     9,     4,     1,
    16,     9,     1,     6,     4,    11,    12,     0,     6,     0,
     6,     0,     6,     0,     6,     0,     6,     0,     6,     0,
     6,     1,     5,     5,     1,     0,     7,     5,     5,     5,
     2,     5,     5,     5,     6,     1,     5,     5,     5,     2,
     5,     5,     5,     5,     5,     5,     2,     5,     6,     1,
     5,     5,     5,     2,     5,     5,     5,     5,     5,     6,
     1,     1,     1,     3,     8,     8,     4,     9,     9,     1,
     8,     2,     1,     1,     1,     5,     1,     2,     1,     1,
     0,     6,     0,     6,     1,     2,     2,     2,     2,     2,
     0,     6,     1,     6,     5,     0,     6,     1,     6,     5,
     0,     6,     1,     6,     2,     0,     6,     1,     6,     1,
     2,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     1,     1,     1,     1,     1,     1,     1,     0
};

static const short yydefact[] = {     0,
   269,   269,   269,   269,     1,     5,     2,    76,     3,    29,
     4,   155,   255,   256,   257,   269,   269,     0,   269,   269,
   269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
   269,   269,   269,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,     0,     0,     0,   269,     0,     0,   101,     0,
     0,     0,   269,     0,     0,   269,     0,    99,     0,    95,
    90,    91,    92,    93,   269,    31,     0,     0,     0,     0,
     0,   269,     0,     0,     0,   161,   236,   250,   254,   253,
     0,   269,     0,    70,    72,    74,   146,     0,   249,   248,
   150,   148,   144,   138,   211,     0,   140,   142,    38,   269,
     0,     0,     0,     0,     0,     0,     0,   269,   269,     0,
     0,     0,     0,     0,     0,   269,     0,     0,   267,   268,
     0,   269,     0,     0,     0,   269,   269,   269,     0,   269,
     0,   252,   251,   269,     0,     0,     0,     0,    32,     0,
     0,     0,     0,     0,   269,     0,     0,     0,     0,     0,
   262,   263,     0,     0,     0,     0,     0,     0,   269,     0,
     0,     0,   247,     0,     0,     0,     0,   269,     0,   269,
   269,   240,     0,     0,   200,   156,     0,   193,   245,     0,
     0,     0,     0,     0,     0,   192,     0,   191,   244,     0,
   269,   260,     0,   259,   258,    25,     0,   269,   269,   269,
   269,   269,   269,   269,   269,   269,   269,    27,   269,   269,
   269,   269,    78,     0,   269,    96,    84,    83,    82,    81,
     0,   103,    87,    86,    94,   264,   265,   266,     0,    85,
     0,   135,     0,    89,     0,     0,   241,   133,     0,   164,
   269,   160,     0,   162,     0,     0,   163,     0,     0,   159,
   158,     0,     0,   238,    26,   261,    36,     0,     0,     0,
     0,     0,    34,     0,   180,     0,   166,     0,     0,     0,
   215,   269,     0,     0,     0,    40,     0,     0,     0,    97,
     0,     0,     0,     0,     0,     0,     0,     0,   102,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,    77,     0,    88,   100,     0,   269,    30,     0,   152,
     0,     0,   194,     0,     0,     0,   165,   269,   269,   237,
    71,    73,    75,   147,   269,    33,     0,     0,     0,     0,
     0,     0,   269,     0,     0,   151,   184,     0,     0,     0,
     0,     0,   269,     0,     0,     0,     0,     0,   149,   177,
   170,   145,   139,   269,   269,   269,   269,   212,   216,   217,
   218,   219,   220,     0,   141,   143,    42,    39,    41,    37,
    79,    80,    98,   269,   269,     0,     0,     0,     0,     0,
     0,     0,   269,     0,     0,     0,   157,     0,     0,     0,
     0,   197,     0,   246,     0,     0,     0,   269,   269,     0,
     0,     0,     0,   269,   269,     0,   269,     0,     0,     0,
     0,   269,   269,   269,   269,   269,   213,   221,   226,   231,
    28,     0,    44,     0,     0,   127,     0,     0,   130,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   210,   242,     0,     0,     0,   209,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   205,     0,   203,     0,   204,     0,     0,     0,     0,     0,
     0,   126,     0,   129,     0,   118,     0,   119,   120,   121,
   125,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   201,     0,     0,   187,   189,   243,   183,
   185,   188,   186,     0,   182,   181,   173,   169,   171,   174,
   202,   172,     0,   168,   167,     0,   178,   175,   176,   269,
   269,   269,   269,     0,    46,     0,     0,     0,     0,   123,
     0,   116,     0,     0,     0,   132,   134,   153,   154,     0,
     0,     0,     0,   239,    35,   190,   179,   269,     0,     0,
   223,     0,   228,     0,   233,     0,     0,     0,   269,    43,
    47,     0,     0,     0,     0,   124,   117,     0,     0,   196,
   195,     0,     0,     0,   207,   214,   269,     0,   222,   269,
     0,   227,   269,   232,   235,     0,     0,     0,     0,     0,
    48,    45,     0,     0,   122,     0,     0,   199,   198,   206,
   208,     0,   269,     0,   269,     0,     0,     0,     0,     0,
     0,     0,    50,    49,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    52,     0,     0,    53,
     0,     0,     0,     0,   136,     0,     0,   225,     0,   230,
     0,     0,     0,     0,     0,    64,     0,     0,     0,     0,
     0,     0,     0,   137,   224,   229,   234,     0,     0,     0,
     0,     0,     0,    67,     0,     0,     0,    51,    56,   128,
     0,    55,    54,     0,     0,     0,     0,     0,     0,     0,
     0,    57,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    66,    65,     0,     0,     0,     0,     0,     0,     0,
    69,    68,    59,    62,     0,    60,     0,    58,     0,    63,
    61,     0,   131,     0,     0,     0
};

static const short yydefgoto[] = {   744,
     5,    70,    35,    36,    37,   282,     9,    38,   212,   272,
    39,    40,   158,   285,   379,   432,   491,   544,   652,   670,
   629,   631,    41,   145,    42,   146,    43,   147,     7,   225,
   289,    71,   125,    72,   116,   231,   300,   301,   302,   303,
   304,   305,   306,   307,   308,   309,   310,   434,   311,   437,
    73,   246,    74,   177,    44,   153,    45,   156,    46,   157,
    47,   152,    48,   148,    49,   151,    50,   150,   319,    11,
   251,   276,   274,   197,   195,   187,   190,   192,   184,    86,
   474,   482,   484,   480,   594,   465,   460,    51,   154,   370,
   486,   280,   371,   487,   570,   372,   488,   572,   373,   489,
   574,    52,   139,   263,   181,   461,   198,   188,   403,   172,
   189,    87,   141,    88,    99,   203,   204,   519,   239,   185,
   100
};

static const short yypact[] = {   166,
-32768,-32768,-32768,-32768,  1039,-32768,  1363,-32768,    73,-32768,
   284,-32768,-32768,-32768,-32768,   253,   253,   -65,   253,   253,
   253,   253,   253,   253,   253,   253,   253,   253,   253,   253,
   253,   253,   253,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,     1,   -55,    37,   253,    39,   104,-32768,   118,
   123,   136,   253,   148,   154,   253,   191,-32768,   195,-32768,
-32768,-32768,-32768,-32768,   253,-32768,   197,   243,   206,   208,
   209,   253,   213,   214,   216,-32768,-32768,-32768,-32768,-32768,
   217,   253,   241,-32768,-32768,-32768,-32768,   242,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   244,-32768,-32768,-32768,   253,
   253,   287,   246,   306,   310,   248,   243,   253,   253,   249,
   243,   120,   250,   243,   254,-32768,   256,   243,-32768,-32768,
   257,   253,   287,   287,   258,   253,   253,-32768,   259,   253,
    19,-32768,-32768,   253,   261,   263,   264,   265,-32768,   267,
   268,   273,   274,   275,   253,   278,   279,   282,   283,    45,
-32768,-32768,   287,   253,    63,    74,   140,   144,-32768,   149,
   252,   288,-32768,   319,   290,   292,   293,   253,   294,-32768,
   243,-32768,   319,   296,-32768,-32768,   307,-32768,-32768,    27,
   287,   -11,   287,   319,   308,-32768,   309,-32768,-32768,   111,
-32768,-32768,   316,   253,-32768,-32768,   317,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   253,-32768,   287,-32768,-32768,-32768,-32768,-32768,-32768,
   556,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   318,-32768,
   287,-32768,   320,-32768,   757,   162,-32768,-32768,   322,-32768,
-32768,-32768,    79,-32768,   287,    85,-32768,   287,   324,-32768,
-32768,   327,    92,-32768,-32768,-32768,-32768,   958,  1147,  1280,
   329,   143,-32768,   229,-32768,   150,-32768,   419,   421,   158,
-32768,-32768,   731,   736,    43,-32768,   328,   330,    53,-32768,
   333,   335,   336,   338,   340,   341,   342,   343,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   287,-32768,-32768,   344,   253,-32768,    77,-32768,
   253,   346,-32768,   253,   348,   287,-32768,   253,   253,-32768,
-32768,-32768,-32768,-32768,   253,-32768,   350,   351,   353,   355,
   356,   357,   253,   360,   361,-32768,-32768,   362,   363,   375,
   377,   379,   253,   381,   383,   384,   385,   387,-32768,-32768,
-32768,-32768,-32768,   253,   253,   253,   253,-32768,-32768,-32768,
-32768,-32768,-32768,   133,-32768,-32768,   243,-32768,-32768,-32768,
-32768,-32768,-32768,   287,   287,   287,   287,   287,   287,   287,
   287,    46,   253,   389,   390,   391,-32768,   287,   287,   287,
   287,-32768,   392,-32768,   394,   395,   243,-32768,   253,   287,
   243,   287,   396,   253,   253,   243,   253,   287,   243,   287,
   398,   253,   253,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   400,-32768,   401,   287,-32768,   404,   287,-32768,    50,
   405,   407,   409,    56,   287,   413,    96,   414,   319,   287,
   287,   287,   287,   287,   287,   418,   319,   319,   420,   422,
   287,-32768,   427,    42,   428,-32768,    20,   319,   429,   430,
   431,   432,    51,   433,   243,    55,   319,   434,   435,    72,
-32768,   436,   287,   437,   287,   439,   440,   441,   442,   287,
   443,-32768,   287,-32768,   287,-32768,   287,-32768,-32768,-32768,
-32768,    60,    62,   287,   444,   445,   446,    66,    64,   287,
   287,   287,   287,-32768,   448,   449,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   450,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   451,-32768,-32768,   453,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   188,   287,   287,   287,   287,   287,-32768,
   454,-32768,   455,   287,   287,-32768,-32768,-32768,-32768,   457,
   463,   287,   287,-32768,-32768,-32768,-32768,-32768,   204,   141,
-32768,   145,-32768,   129,-32768,    88,   465,   466,   253,-32768,
   287,   227,   287,   287,   469,-32768,-32768,   287,   287,-32768,
-32768,   470,   471,    61,-32768,-32768,   253,   467,-32768,   253,
   473,-32768,   253,-32768,-32768,   253,   474,   287,   287,   475,
   287,-32768,   287,   287,-32768,   477,   287,-32768,-32768,-32768,
-32768,   479,-32768,   480,-32768,   482,   287,   287,    83,   287,
    86,   287,-32768,-32768,   287,   287,   484,   485,   319,    65,
   319,    69,   319,   287,   287,    91,-32768,   287,    94,-32768,
   287,   287,   287,   287,-32768,   487,   488,-32768,   489,-32768,
   490,   287,   287,   253,   483,-32768,   253,   492,   287,    98,
   287,   287,   287,-32768,-32768,-32768,-32768,   493,   495,   287,
   287,   287,   287,-32768,   501,    97,   507,-32768,   287,-32768,
   287,-32768,-32768,   287,   287,   287,   287,   287,   253,   508,
   287,-32768,   287,   287,   287,   287,   287,   287,   287,   287,
   287,   287,   509,   511,   287,   287,   287,   287,   287,   287,
   287,-32768,-32768,   512,   513,   515,    71,    75,   516,   287,
-32768,-32768,-32768,-32768,   525,-32768,   528,-32768,   287,-32768,
-32768,   287,-32768,   182,   374,-32768
};

static const short yypgoto[] = {-32768,
-32768,   378,-32768,-32768,-32768,-32768,   128,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -213,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   119,-32768,
-32768,    -8,-32768,-32768,-32768,   238,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -273,-32768,-32768,    57,
-32768,-32768,-32768,  -298,  -234,  -194,  -278,  -241,  -403,  -152,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -275,-32768,-32768,
-32768,   -58,   -39,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   461,  -419,-32768,-32768,   190,-32768,
   514,    11,   -74,-32768,    -5,   447,-32768,     4,  -175,   -69,
   734
};


#define	YYLAST		1446


static const short yytable[] = {    53,
    76,    53,   360,   459,   369,   483,   485,   249,   131,   256,
    89,    89,   471,    89,    89,    89,    89,    89,   259,    89,
    89,    89,    89,    89,    92,    89,    89,    91,   110,    93,
    94,    95,    96,    97,   111,   101,   102,   103,   104,   105,
   256,   107,   108,   171,   166,   168,   253,   170,   161,   162,
    89,   175,   161,   162,   179,    13,    14,    15,   161,   162,
    89,   253,   161,   162,   161,   162,   113,   161,   162,   207,
   253,   161,   162,   161,   162,   256,   123,   161,   162,   257,
   218,    13,    14,    15,   256,   253,   142,    13,    14,    15,
    13,    14,    15,    13,    14,    15,    13,    14,    15,    13,
    14,    15,   646,    25,    89,   160,   649,   536,   685,   206,
   523,   247,   142,   129,   130,   163,   470,   254,   395,   686,
   159,   347,   377,   361,   479,   446,   112,   396,   114,    75,
   247,   464,   521,   378,   202,   223,   191,   193,   142,   473,
   496,   529,    68,   382,   176,   532,   501,   287,   329,   142,
   550,   620,   552,   227,   559,   658,   558,   348,   226,   660,
   262,   734,   537,   687,   228,   736,   224,   397,   321,   364,
   467,   508,   202,   647,   324,   505,   650,   606,   476,   469,
   664,   745,   330,   667,   365,   603,   699,   478,   688,    75,
   349,   350,    25,   115,   255,   351,   258,   597,   266,   335,
   352,   600,    68,   640,   598,   642,   353,   117,   601,   509,
   576,   316,   118,   365,   463,   364,   142,   354,   317,   604,
    29,   355,   472,   431,   356,   119,   357,   288,   358,   577,
   229,   599,    85,   336,   230,   602,   337,   121,   578,   233,
   359,   366,   367,   122,   313,   129,   130,   322,   368,   576,
   325,     1,     2,     3,     4,    13,    14,    15,   323,   365,
   338,   326,    53,    53,    53,   579,    29,   271,   577,   339,
   340,   278,   279,   507,   341,   283,   284,   578,   580,   342,
   124,   515,   516,   383,   126,   343,   128,   366,   367,   161,
   162,    77,   524,   369,   596,   132,   344,   133,   134,    78,
   345,   533,   136,   137,   579,   138,   140,   433,   129,   130,
   165,    85,   129,   130,   167,   398,   392,   612,   400,   346,
   621,   236,   237,   238,    79,    80,   268,   269,   270,   402,
   144,   149,   582,   155,    81,   164,    77,   169,   174,   178,
    82,   466,   234,   180,    78,   183,   186,   194,   201,   475,
   208,    83,   209,   210,   211,    84,   213,   214,    89,    89,
    89,    89,   215,   216,   217,    76,    85,   219,   220,    79,
    80,   221,   222,   746,   427,   428,   429,   430,   235,    81,
   240,   241,    34,   242,   244,    82,   250,   435,   438,   440,
   441,   442,   443,   444,   445,   447,    83,   252,   260,   261,
    84,   452,   453,   454,   455,   531,   265,   267,   312,   374,
   314,    85,   318,   191,   327,   193,   328,   245,   380,   334,
   381,   191,   384,   193,   385,   386,    77,   387,    77,   388,
   389,   390,   391,   393,    78,   399,    78,   401,   493,   407,
   408,   495,   409,   497,   410,   411,   412,   502,   503,   414,
   415,   416,   417,   191,   193,   510,   511,   512,   513,    79,
    80,    79,    80,   657,   418,   659,   419,   661,   420,    81,
   422,    81,   423,   424,   425,    82,   426,    82,   449,   450,
   451,   569,   456,   457,   458,   468,    83,   477,    83,   490,
    84,   492,    84,   545,   494,   498,   547,   499,   548,   500,
   549,    85,   504,    85,   506,   551,   553,   554,   514,   362,
   517,   363,   518,   560,   561,   562,   563,   520,   522,   525,
   526,   527,   528,   530,   534,   535,   538,   539,   540,   541,
   542,   543,   546,   555,   605,   556,   557,    98,   564,   565,
   566,   567,   568,   106,   586,   587,   109,   590,   581,   545,
   583,   584,   585,   591,   608,   609,   623,   588,   589,   615,
   618,   619,   625,   628,   633,   592,   593,   637,   639,   641,
   607,   643,   681,    89,   655,   656,   120,   674,   675,   676,
   677,   683,   448,   692,   611,   693,   613,   614,   127,   610,
   698,   616,   617,   291,   292,   135,   701,   710,   200,   722,
   627,   723,   731,   732,     0,   733,   738,   293,   294,   295,
   296,   630,   632,   297,   634,   740,   635,   636,   741,     0,
   638,     0,     0,     0,   243,     0,   298,     0,     0,     0,
   644,   645,   173,   648,     0,   651,     0,     0,   653,   654,
   665,     0,     0,   668,     0,     0,   299,   662,   663,   196,
   199,   666,     0,     0,   669,   671,   672,   673,   680,     0,
     0,   682,     0,     0,     0,   678,   679,     0,     0,     0,
     0,     0,   684,     0,   689,   690,   691,     0,     0,     0,
   700,     0,     0,   694,   695,   696,   697,     0,     0,     0,
     0,     0,   702,   709,   703,     0,     0,   704,   705,   706,
   707,   708,     0,     0,   711,     0,   712,   713,   714,   715,
   716,   717,   718,   719,   720,   721,     0,     0,   724,   725,
   726,   727,   728,   729,   730,     0,     0,     0,     0,     0,
   735,   737,     0,   739,     6,     8,    10,    12,    77,     0,
     0,     0,   742,    77,     0,   743,    78,     0,     0,    90,
    90,    78,    90,    90,    90,    90,    90,     0,    90,    90,
    90,    90,    90,     0,    90,    90,     0,     0,     0,     0,
     0,    79,    80,     0,     0,     0,    79,    80,     0,     0,
     0,    81,     0,     0,     0,     0,    81,    82,     0,    90,
     0,     0,    82,     0,   291,   292,     0,     0,    83,    90,
     0,     0,    84,    83,     0,     0,     0,    84,   293,   294,
   295,   296,     0,    85,   297,     0,     0,     0,    85,     0,
     0,   375,     0,     0,     0,   143,   376,   298,     0,     0,
   394,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   404,   405,    90,     0,     0,     0,   315,   406,     0,
     0,   143,     0,     0,     0,     0,   413,     0,     0,   182,
     0,     0,     0,     0,     0,     0,   421,     0,     0,     0,
     0,   182,     0,   205,     0,     0,     0,   143,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   143,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   232,     0,     0,     0,   404,     0,     0,     0,
     0,   205,     0,   232,   248,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   196,   199,     0,
     0,     0,     0,     0,   264,   196,   199,     0,     0,     0,
     0,     8,     8,     8,    12,   273,   275,   277,    12,    12,
   281,     0,    12,    12,   286,   143,     0,     0,   290,     0,
    13,    14,    15,    16,     0,     0,    54,    55,     0,     0,
     0,    56,    17,     0,    18,     0,    57,     0,     0,     0,
     0,    58,     0,     0,   320,    19,    20,    59,    21,     0,
     0,    22,    23,     0,    24,     0,     0,    60,     0,     0,
    25,    26,    61,     0,     0,    27,    28,    62,     0,     0,
     0,     0,     0,     0,    63,    10,     0,     0,    64,    65,
    29,     0,    66,     0,    67,    30,     0,    68,     0,     0,
    31,    32,     0,     0,     0,     0,     0,     0,     0,    33,
    69,    13,    14,    15,    16,     0,     0,     0,   331,     0,
     0,     0,     0,    17,     0,    18,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    19,    20,     0,    21,
     0,     0,    22,    23,     0,    24,     0,     0,     0,     0,
     0,    25,    26,     0,     0,     0,    27,    28,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    90,    90,    90,
    90,    29,     0,     0,     0,     0,    30,     0,     0,     0,
   622,    31,    32,   624,     0,     0,   626,   436,   439,     0,
    33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   462,     0,     0,     0,     0,     0,     0,     0,    13,
    14,    15,    16,     0,     0,    54,    55,   481,   462,   462,
    56,    17,     0,    18,     0,    57,     0,     0,     0,     0,
    58,     0,     0,     0,    19,    20,    59,    21,     0,     0,
    22,    23,     0,    24,     0,     0,    60,     0,     0,    25,
    26,    61,     0,     0,    27,    28,    62,     0,     0,     0,
     0,     0,     0,    63,     0,     0,     0,    64,    65,    29,
     0,    66,     0,    67,    30,     0,    68,     0,     0,    31,
    32,     0,     0,     0,     0,     0,     0,     0,    33,    69,
     0,     0,     0,     0,     0,     0,     0,   332,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   281,   571,   573,   575,     0,     0,     0,
     0,     0,    13,    14,    15,    16,     0,     0,    54,    55,
     0,     0,     0,    56,    17,     0,    18,     0,    57,     0,
     0,   595,     0,    58,     0,     0,     0,    19,    20,    59,
    21,     0,    90,    22,    23,     0,    24,     0,     0,    60,
     0,     0,    25,    26,    61,     0,     0,    27,    28,    62,
     0,     0,     0,     0,     0,     0,    63,     0,     0,     0,
    64,    65,    29,     0,    66,     0,    67,    30,     0,    68,
     0,     0,    31,    32,     0,     0,   462,     0,   462,     0,
     0,    33,    69,     0,     0,    13,    14,    15,    16,     0,
   333,    54,    55,     0,     0,     0,    56,    17,     0,    18,
     0,    57,     0,     0,     0,     0,    58,     0,     0,     0,
    19,    20,    59,    21,     0,     0,    22,    23,     0,    24,
     0,     0,    60,     0,     0,    25,    26,    61,     0,     0,
    27,    28,    62,     0,     0,     0,     0,     0,     0,    63,
     0,     0,     0,    64,    65,    29,     0,    66,     0,    67,
    30,     0,    68,     0,     0,    31,    32,     0,     0,     0,
     0,     0,     0,     0,    33,    69
};

static const short yycheck[] = {     5,
     9,     7,   276,   407,   280,   425,   426,   183,    78,    21,
    16,    17,   416,    19,    20,    21,    22,    23,   194,    25,
    26,    27,    28,    29,    90,    31,    32,    17,    28,    19,
    20,    21,    22,    23,    90,    25,    26,    27,    28,    29,
    21,    31,    32,   118,   114,   115,    20,   117,     3,     4,
    56,   121,     3,     4,   124,     3,     4,     5,     3,     4,
    66,    20,     3,     4,     3,     4,    56,     3,     4,   144,
    20,     3,     4,     3,     4,    21,    66,     3,     4,    91,
   155,     3,     4,     5,    21,    20,    92,     3,     4,     5,
     3,     4,     5,     3,     4,     5,     3,     4,     5,     3,
     4,     5,    20,    43,   110,   111,    21,    36,    11,    91,
    91,   181,   118,     3,     4,   112,   415,    91,    42,    22,
   110,   274,    80,   276,   423,    80,    90,    51,    90,    57,
   200,   410,    91,    91,   140,    91,   133,   134,   144,   418,
    91,    91,    70,    91,    25,    91,    91,   222,    57,   155,
    91,    91,    91,    91,    91,    91,    91,     8,   164,    91,
    50,    91,    91,    66,    91,    91,   163,    91,    90,    12,
   412,   450,   178,    91,    90,    80,    91,    90,   420,   414,
    90,     0,    91,    90,    56,    57,    90,   422,    91,    57,
    41,    42,    43,    90,   191,    46,   193,    57,   204,    57,
    51,    57,    70,   623,    64,   625,    57,    90,    64,   451,
    23,    50,    90,    56,   409,    12,   222,    68,    57,    91,
    63,    72,   417,    91,    75,    90,    77,   224,    79,    42,
    91,    91,    83,    91,    91,    91,     8,    90,    51,    91,
    91,    84,    85,    90,   241,     3,     4,   253,    91,    23,
   256,    86,    87,    88,    89,     3,     4,     5,   255,    56,
    32,   258,   268,   269,   270,    78,    63,   211,    42,    41,
    42,   215,   216,   449,    46,   219,   220,    51,    91,    51,
    90,   457,   458,   289,    90,    57,    90,    84,    85,     3,
     4,     8,   468,   569,    91,    90,    68,    90,    90,    16,
    72,   477,    90,    90,    78,    90,    90,   377,     3,     4,
     5,    83,     3,     4,     5,   321,   313,    91,   324,    91,
   594,     3,     4,     5,    41,    42,   208,   209,   210,   326,
    90,    90,   546,    90,    51,    90,     8,    90,    90,    90,
    57,   411,    91,    90,    16,    90,    90,    90,    90,   419,
    90,    68,    90,    90,    90,    72,    90,    90,   364,   365,
   366,   367,    90,    90,    90,   374,    83,    90,    90,    41,
    42,    90,    90,     0,   364,   365,   366,   367,    91,    51,
    91,    90,     5,    91,    91,    57,    91,   384,   385,   386,
   387,   388,   389,   390,   391,   392,    68,    91,    91,    91,
    72,   398,   399,   400,   401,   475,    91,    91,    91,   282,
    91,    83,    91,   410,    91,   412,    90,   180,    91,    91,
    91,   418,    90,   420,    90,    90,     8,    90,     8,    90,
    90,    90,    90,    90,    16,    90,    16,    90,   435,    90,
    90,   438,    90,   440,    90,    90,    90,   444,   445,    90,
    90,    90,    90,   450,   451,   452,   453,   454,   455,    41,
    42,    41,    42,   639,    90,   641,    90,   643,    90,    51,
    90,    51,    90,    90,    90,    57,    90,    57,    90,    90,
    90,   540,    91,    90,    90,    90,    68,    90,    68,    90,
    72,    91,    72,   490,    91,    91,   493,    91,   495,    91,
   497,    83,    90,    83,    91,   502,   503,   504,    91,    91,
    91,    91,    91,   510,   511,   512,   513,    91,    91,    91,
    91,    91,    91,    91,    91,    91,    91,    91,    90,    90,
    90,    90,    90,    90,   574,    91,    91,    24,    91,    91,
    91,    91,    90,    30,    91,    91,    33,    91,   545,   546,
   547,   548,   549,    91,    90,    90,    90,   554,   555,    91,
    91,    91,    90,    90,    90,   562,   563,    91,    90,    90,
   576,    90,    90,   579,    91,    91,    63,    91,    91,    91,
    91,    90,   393,    91,   581,    91,   583,   584,    75,   579,
    90,   588,   589,    38,    39,    82,    90,    90,   138,    91,
   606,    91,    91,    91,    -1,    91,    91,    52,    53,    54,
    55,   608,   609,    58,   611,    91,   613,   614,    91,    -1,
   617,    -1,    -1,    -1,   178,    -1,    71,    -1,    -1,    -1,
   627,   628,   119,   630,    -1,   632,    -1,    -1,   635,   636,
   646,    -1,    -1,   649,    -1,    -1,    91,   644,   645,   136,
   137,   648,    -1,    -1,   651,   652,   653,   654,   664,    -1,
    -1,   667,    -1,    -1,    -1,   662,   663,    -1,    -1,    -1,
    -1,    -1,   669,    -1,   671,   672,   673,    -1,    -1,    -1,
   686,    -1,    -1,   680,   681,   682,   683,    -1,    -1,    -1,
    -1,    -1,   689,   699,   691,    -1,    -1,   694,   695,   696,
   697,   698,    -1,    -1,   701,    -1,   703,   704,   705,   706,
   707,   708,   709,   710,   711,   712,    -1,    -1,   715,   716,
   717,   718,   719,   720,   721,    -1,    -1,    -1,    -1,    -1,
   727,   728,    -1,   730,     1,     2,     3,     4,     8,    -1,
    -1,    -1,   739,     8,    -1,   742,    16,    -1,    -1,    16,
    17,    16,    19,    20,    21,    22,    23,    -1,    25,    26,
    27,    28,    29,    -1,    31,    32,    -1,    -1,    -1,    -1,
    -1,    41,    42,    -1,    -1,    -1,    41,    42,    -1,    -1,
    -1,    51,    -1,    -1,    -1,    -1,    51,    57,    -1,    56,
    -1,    -1,    57,    -1,    38,    39,    -1,    -1,    68,    66,
    -1,    -1,    72,    68,    -1,    -1,    -1,    72,    52,    53,
    54,    55,    -1,    83,    58,    -1,    -1,    -1,    83,    -1,
    -1,    91,    -1,    -1,    -1,    92,    91,    71,    -1,    -1,
   317,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   328,   329,   110,    -1,    -1,    -1,    91,   335,    -1,
    -1,   118,    -1,    -1,    -1,    -1,   343,    -1,    -1,   126,
    -1,    -1,    -1,    -1,    -1,    -1,   353,    -1,    -1,    -1,
    -1,   138,    -1,   140,    -1,    -1,    -1,   144,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   169,    -1,    -1,    -1,   393,    -1,    -1,    -1,
    -1,   178,    -1,   180,   181,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   414,   415,    -1,
    -1,    -1,    -1,    -1,   201,   422,   423,    -1,    -1,    -1,
    -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
   217,    -1,   219,   220,   221,   222,    -1,    -1,   225,    -1,
     3,     4,     5,     6,    -1,    -1,     9,    10,    -1,    -1,
    -1,    14,    15,    -1,    17,    -1,    19,    -1,    -1,    -1,
    -1,    24,    -1,    -1,   251,    28,    29,    30,    31,    -1,
    -1,    34,    35,    -1,    37,    -1,    -1,    40,    -1,    -1,
    43,    44,    45,    -1,    -1,    48,    49,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    57,   282,    -1,    -1,    61,    62,
    63,    -1,    65,    -1,    67,    68,    -1,    70,    -1,    -1,
    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
    83,     3,     4,     5,     6,    -1,    -1,    -1,    91,    -1,
    -1,    -1,    -1,    15,    -1,    17,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    -1,    31,
    -1,    -1,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,
    -1,    43,    44,    -1,    -1,    -1,    48,    49,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,   365,   366,
   367,    63,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,
   597,    73,    74,   600,    -1,    -1,   603,   384,   385,    -1,
    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
     4,     5,     6,    -1,    -1,     9,    10,   424,   425,   426,
    14,    15,    -1,    17,    -1,    19,    -1,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    28,    29,    30,    31,    -1,    -1,
    34,    35,    -1,    37,    -1,    -1,    40,    -1,    -1,    43,
    44,    45,    -1,    -1,    48,    49,    50,    -1,    -1,    -1,
    -1,    -1,    -1,    57,    -1,    -1,    -1,    61,    62,    63,
    -1,    65,    -1,    67,    68,    -1,    70,    -1,    -1,    73,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    83,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   540,   541,   542,   543,    -1,    -1,    -1,
    -1,    -1,     3,     4,     5,     6,    -1,    -1,     9,    10,
    -1,    -1,    -1,    14,    15,    -1,    17,    -1,    19,    -1,
    -1,   568,    -1,    24,    -1,    -1,    -1,    28,    29,    30,
    31,    -1,   579,    34,    35,    -1,    37,    -1,    -1,    40,
    -1,    -1,    43,    44,    45,    -1,    -1,    48,    49,    50,
    -1,    -1,    -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,
    61,    62,    63,    -1,    65,    -1,    67,    68,    -1,    70,
    -1,    -1,    73,    74,    -1,    -1,   623,    -1,   625,    -1,
    -1,    82,    83,    -1,    -1,     3,     4,     5,     6,    -1,
    91,     9,    10,    -1,    -1,    -1,    14,    15,    -1,    17,
    -1,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    28,    29,    30,    31,    -1,    -1,    34,    35,    -1,    37,
    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    -1,
    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    57,
    -1,    -1,    -1,    61,    62,    63,    -1,    65,    -1,    67,
    68,    -1,    70,    -1,    -1,    73,    74,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    82,    83
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 6:
#line 247 "parser.yxx"
{
  assert(!egg_stack.empty());
  DCAST(EggData, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 25:
#line 291 "parser.yxx"
{
  string strval = yyvsp[-1]._string;
  EggCoordinateSystem *cs = new EggCoordinateSystem;

  CoordinateSystem f = parse_coordinate_system_string(strval);
  if (f == CS_invalid) {
    eggyywarning("Unknown coordinate system " + strval);
  } else {
    cs->set_value(f);
  }
  yyval._egg = cs;
;
    break;}
case 26:
#line 314 "parser.yxx"
{
  yyval._egg = new EggComment(yyvsp[-3]._string, yyvsp[-1]._string);
;
    break;}
case 27:
#line 328 "parser.yxx"
{
  string tref_name = yyvsp[-2]._string;
  Filename filename = yyvsp[0]._string;
  EggTexture *texture = new EggTexture(tref_name, filename);

  if (textures.find(tref_name) != textures.end()) {
    eggyywarning("Duplicate texture name " + tref_name);
  }
  textures[tref_name] = texture;

  egg_stack.push_back(texture);
;
    break;}
case 28:
#line 341 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 30:
#line 357 "parser.yxx"
{
  EggTexture *texture = DCAST(EggTexture, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "type") == 0) {
    EggTexture::TextureType tt = EggTexture::string_texture_type(strval);
    if (tt == EggTexture::TT_unspecified) {
      eggyywarning("Unknown texture texture_type " + strval);
    } else {
      texture->set_texture_type(tt);
    }

  } else if (cmp_nocase_uh(name, "format") == 0) {
    EggTexture::Format f = EggTexture::string_format(strval);
    if (f == EggTexture::F_unspecified) {
      eggyywarning("Unknown texture format " + strval);
    } else {
      texture->set_format(f);
    }

  } else if (cmp_nocase_uh(name, "compression") == 0) {
    EggTexture::CompressionMode w = EggTexture::string_compression_mode(strval);
    if (w == EggTexture::CM_default) {
      eggyywarning("Unknown texture compression mode " + strval);
    } else {
      texture->set_compression_mode(w);
    }

  } else if (cmp_nocase_uh(name, "wrap") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_mode(w);
    }

  } else if (cmp_nocase_uh(name, "wrapu") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_u(w);
    }

  } else if (cmp_nocase_uh(name, "wrapv") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_v(w);
    }

  } else if (cmp_nocase_uh(name, "minfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_minfilter(f);
    }

  } else if (cmp_nocase_uh(name, "magfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_magfilter(f);
    }

  } else if (cmp_nocase_uh(name, "anisotropic_degree") == 0) {
    texture->set_anisotropic_degree((int)value);

  } else if (cmp_nocase_uh(name, "envtype") == 0) {
    EggTexture::EnvType e = EggTexture::string_env_type(strval);
    if (e == EggTexture::ET_unspecified) {
      eggyywarning("Unknown texture env type " + strval);
    } else {
      texture->set_env_type(e);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb") == 0) {
    EggTexture::CombineMode cm = EggTexture::string_combine_mode(strval);
    if (cm == EggTexture::CM_unspecified) {
      eggyywarning("Unknown combine mode " + strval);
    } else {
      texture->set_combine_mode(EggTexture::CC_rgb, cm);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source0") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 0, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand0") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 0, co);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source1") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 1, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand1") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 1, co);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source2") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 2, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand2") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 2, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha") == 0) {
    EggTexture::CombineMode cm = EggTexture::string_combine_mode(strval);
    if (cm == EggTexture::CM_unspecified) {
      eggyywarning("Unknown combine mode " + strval);
    } else {
      texture->set_combine_mode(EggTexture::CC_alpha, cm);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source0") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 0, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand0") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 0, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source1") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 1, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand1") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 1, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source2") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 2, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand2") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 2, co);
    }

  } else if (cmp_nocase_uh(name, "saved_result") == 0) {
    texture->set_saved_result(((int)value) != 0);

  } else if (cmp_nocase_uh(name, "tex_gen") == 0) {
    EggTexture::TexGen tex_gen = EggTexture::string_tex_gen(strval);
    if (tex_gen == EggTexture::TG_unspecified) {
      eggyywarning("Unknown tex-gen " + strval);
    } else {
      texture->set_tex_gen(tex_gen);
    }

  } else if (cmp_nocase_uh(name, "quality_level") == 0) {
    EggTexture::QualityLevel quality_level = EggTexture::string_quality_level(strval);
    if (quality_level == EggTexture::QL_unspecified) {
      eggyywarning("Unknown quality-level " + strval);
    } else {
      texture->set_quality_level(quality_level);
    }

  } else if (cmp_nocase_uh(name, "stage_name") == 0) {
    texture->set_stage_name(strval);

  } else if (cmp_nocase_uh(name, "priority") == 0) {
    texture->set_priority((int)value);

  } else if (cmp_nocase_uh(name, "blendr") == 0) {
    Colorf color = texture->get_color();
    color[0] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blendg") == 0) {
    Colorf color = texture->get_color();
    color[1] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blendb") == 0) {
    Colorf color = texture->get_color();
    color[2] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blenda") == 0) {
    Colorf color = texture->get_color();
    color[3] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "borderr") == 0) {
    Colorf border_color = texture->get_border_color();
    border_color[0] = value;
    texture->set_border_color(border_color);

  } else if (cmp_nocase_uh(name, "borderg") == 0) {
    Colorf border_color = texture->get_border_color();
    border_color[1] = value;
    texture->set_border_color(border_color);

  } else if (cmp_nocase_uh(name, "borderb") == 0) {
    Colorf border_color = texture->get_border_color();
    border_color[2] = value;
    texture->set_border_color(border_color);

  } else if (cmp_nocase_uh(name, "bordera") == 0) {
    Colorf border_color = texture->get_border_color();
    border_color[3] = value;
    texture->set_border_color(border_color);

  } else if (cmp_nocase_uh(name, "uv_name") == 0) {
    texture->set_uv_name(strval);

  } else if (cmp_nocase_uh(name, "rgb_scale") == 0) {
    int int_value = (int)value;
    if (int_value != 1 && int_value != 2 && int_value != 4) {
      eggyyerror("Invalid rgb-scale value " + strval);
    } else {
      texture->set_rgb_scale(int_value);
    }

  } else if (cmp_nocase_uh(name, "alpha_scale") == 0) {
    int int_value = (int)value;
    if (int_value != 1 && int_value != 2 && int_value != 4) {
      eggyyerror("Invalid alpha-scale value " + strval);
    } else {
      texture->set_alpha_scale(int_value);
    }

  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      texture->set_alpha_mode(a);
    }

  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      texture->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      texture->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      texture->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    texture->set_draw_order((int)value);

  } else if (cmp_nocase_uh(name, "bin") == 0) {
    texture->set_bin(strval);

  } else if (cmp_nocase_uh(name, "alpha_file") == 0) {
    texture->set_alpha_filename(strval);

  } else if (cmp_nocase_uh(name, "alpha_file_channel") == 0) {
    texture->set_alpha_file_channel((int)value);

  } else if (cmp_nocase_uh(name, "read_mipmaps") == 0) {
    texture->set_read_mipmaps(((int)value) != 0);

  } else {
    eggyywarning("Unsupported texture scalar: " + name);
  }
;
    break;}
case 32:
#line 700 "parser.yxx"
{
  string mref_name = yyvsp[-1]._string;
  EggMaterial *material = new EggMaterial(mref_name);

  if (materials.find(mref_name) != materials.end()) {
    eggyywarning("Duplicate material name " + mref_name);
  }
  materials[mref_name] = material;

  egg_stack.push_back(material);
;
    break;}
case 33:
#line 712 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 35:
#line 728 "parser.yxx"
{
  EggMaterial *material = DCAST(EggMaterial, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "diffr") == 0) {
    Colorf diff = material->get_diff();
    diff[0] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffg") == 0) {
    Colorf diff = material->get_diff();
    diff[1] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffb") == 0) {
    Colorf diff = material->get_diff();
    diff[2] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffa") == 0) {
    Colorf diff = material->get_diff();
    diff[3] = value;
    material->set_diff(diff);

  } else if (cmp_nocase_uh(name, "ambr") == 0) {
    Colorf amb = material->get_amb();
    amb[0] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambg") == 0) {
    Colorf amb = material->get_amb();
    amb[1] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambb") == 0) {
    Colorf amb = material->get_amb();
    amb[2] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "amba") == 0) {
    Colorf amb = material->get_amb();
    amb[3] = value;
    material->set_amb(amb);

  } else if (cmp_nocase_uh(name, "emitr") == 0) {
    Colorf emit = material->get_emit();
    emit[0] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitg") == 0) {
    Colorf emit = material->get_emit();
    emit[1] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitb") == 0) {
    Colorf emit = material->get_emit();
    emit[2] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emita") == 0) {
    Colorf emit = material->get_emit();
    emit[3] = value;
    material->set_emit(emit);

  } else if (cmp_nocase_uh(name, "specr") == 0) {
    Colorf spec = material->get_spec();
    spec[0] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specg") == 0) {
    Colorf spec = material->get_spec();
    spec[1] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specb") == 0) {
    Colorf spec = material->get_spec();
    spec[2] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "speca") == 0) {
    Colorf spec = material->get_spec();
    spec[3] = value;
    material->set_spec(spec);

  } else if (cmp_nocase_uh(name, "shininess") == 0) {
    material->set_shininess(value);

  } else if (cmp_nocase_uh(name, "local") == 0) {
    material->set_local(value != 0.0);

  } else {
    eggyywarning("Unsupported material scalar: " + name);
  }
;
    break;}
case 36:
#line 823 "parser.yxx"
{
  string node_name = yyvsp[-3]._string;
  Filename filename = yyvsp[-1]._string;
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  yyval._egg = ref;
;
    break;}
case 37:
#line 830 "parser.yxx"
{
  if (cmp_nocase_uh(yyvsp[-5]._string, "group") != 0) {
    eggyyerror("keyword 'group' expected");
  }
  string node_name = yyvsp[-3]._string;
  Filename filename = yyvsp[-1]._string;
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  yyval._egg = ref;
;
    break;}
case 38:
#line 850 "parser.yxx"
{
  string name = yyvsp[0]._string;
  EggVertexPool *pool = NULL;

  VertexPools::const_iterator vpi = vertex_pools.find(name);
  if (vpi != vertex_pools.end()) {
    pool = (*vpi).second;
    if (pool->has_defined_vertices()) {
      eggyywarning("Duplicate vertex pool name " + name);
      pool = new EggVertexPool(name);
      // The egg syntax starts counting at 1 by convention.
      pool->set_highest_index(0);
      vertex_pools[name] = pool;
    }
  } else {
    pool = new EggVertexPool(name);
    // The egg syntax starts counting at 1 by convention.
    pool->set_highest_index(0);
    vertex_pools[name] = pool;
  }

  egg_stack.push_back(pool);
;
    break;}
case 39:
#line 874 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 42:
#line 902 "parser.yxx"
{
  egg_stack.push_back(new EggVertex);
;
    break;}
case 43:
#line 906 "parser.yxx"
{
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  DCAST(EggVertexPool, egg_stack.back())->add_vertex(vtx);
;
    break;}
case 44:
#line 913 "parser.yxx"
{
  vertex_index = (int)yyvsp[0]._number;
  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());

  if (vertex_index < 0) {
    ostringstream errmsg;
    errmsg << "Ignoring invalid vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;

  } else if (pool->has_vertex(vertex_index)) {
    ostringstream errmsg;
    errmsg << "Ignoring duplicate vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;
  }

  // Even if we didn't like the vertex index number, we still need to
  // go ahead and parse the vertex.  We just won't save it.

  egg_stack.push_back(new EggVertex);
;
    break;}
case 45:
#line 938 "parser.yxx"
{
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());
  if (vertex_index != -1) {
    pool->add_vertex(vtx, vertex_index);
  }
;
    break;}
case 46:
#line 959 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(yyvsp[0]._number);
;
    break;}
case 47:
#line 963 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint2d(yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 48:
#line 967 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint3d(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 49:
#line 971 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint4d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 50:
#line 975 "parser.yxx"
{
  EggVertex *vertex = DCAST(EggVertex, egg_stack.back());
  EggVertexUV *uv = new EggVertexUV(yyvsp[-1]._string, TexCoordd::zero());
  egg_stack.push_back(uv);
  if (vertex->has_uv(yyvsp[-1]._string)) {
    eggyywarning("Ignoring repeated UV name " + yyvsp[-1]._string);
  } else {
    vertex->set_uv_obj(uv);
  }
;
    break;}
case 51:
#line 986 "parser.yxx"
{
  egg_stack.pop_back();
;
    break;}
case 54:
#line 992 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 55:
#line 1000 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 56:
#line 1019 "parser.yxx"
{
  DCAST(EggVertexUV, egg_stack.back())->set_uv(TexCoordd(yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 57:
#line 1023 "parser.yxx"
{
  DCAST(EggVertexUV, egg_stack.back())->set_uvw(LVecBase3d(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 58:
#line 1027 "parser.yxx"
{
  if (DCAST(EggVertexUV, egg_stack.back())->has_tangent()) {
    eggyywarning("Ignoring repeated tangent");
  } else {
    DCAST(EggVertexUV, egg_stack.back())->set_tangent(Normald(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
  }
;
    break;}
case 59:
#line 1035 "parser.yxx"
{
  if (DCAST(EggVertexUV, egg_stack.back())->has_binormal()) {
    eggyywarning("Ignoring repeated binormal");
  } else {
    DCAST(EggVertexUV, egg_stack.back())->set_binormal(Normald(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
  }
;
    break;}
case 60:
#line 1043 "parser.yxx"
{
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-4]._string, LVector3d(yyvsp[-2]._number, yyvsp[-1]._number, 0.0))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 61:
#line 1051 "parser.yxx"
{
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 62:
#line 1059 "parser.yxx"
{
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-3]._string, LVector3d(yyvsp[-2]._number, yyvsp[-1]._number, 0.0))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-3]._string);
  }
;
    break;}
case 63:
#line 1067 "parser.yxx"
{
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 64:
#line 1085 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_normal(Normald(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 65:
#line 1089 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 66:
#line 1097 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 67:
#line 1115 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_color(Colorf(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 68:
#line 1119 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-6]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-6]._string);
  }
;
    break;}
case 69:
#line 1127 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-5]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 70:
#line 1145 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  egg_stack.push_back(group);
;
    break;}
case 71:
#line 1150 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  yyval._egg = group;
  egg_stack.pop_back();
  if (group->has_name()) {
    groups[group->get_name()] = group;
  }
  Thread::consider_yield();
;
    break;}
case 72:
#line 1170 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  group->set_group_type(EggGroup::GT_joint);
  egg_stack.push_back(group);
;
    break;}
case 73:
#line 1176 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 74:
#line 1191 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  group->set_group_type(EggGroup::GT_instance);
  egg_stack.push_back(group);
;
    break;}
case 75:
#line 1197 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  yyval._egg = group;
  egg_stack.pop_back();
  if (group->has_name()) {
    groups[group->get_name()] = group;
  }
;
    break;}
case 77:
#line 1217 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  unsigned long ulong_value = yyvsp[-1]._ulong;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    group->set_switch_fps(value);

  } else if (cmp_nocase_uh(name, "no_fog") == 0) {
    group->set_nofog_flag(value != 0);

  } else if (cmp_nocase_uh(name, "decal") == 0) {
    group->set_decal_flag(value != 0);

  } else if (cmp_nocase_uh(name, "direct") == 0) {
    group->set_direct_flag(value != 0);

  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      group->set_alpha_mode(a);
    }

  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      group->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      group->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      group->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    group->set_draw_order(ulong_value);

  } else if (cmp_nocase_uh(name, "bin") == 0) {
    group->set_bin(strval);

  } else if (cmp_nocase_uh(name, "collide_mask") == 0) {
    group->set_collide_mask(group->get_collide_mask() | ulong_value);

  } else if (cmp_nocase_uh(name, "from_collide_mask") == 0) {
    group->set_from_collide_mask(group->get_from_collide_mask() | ulong_value);

  } else if (cmp_nocase_uh(name, "into_collide_mask") == 0) {
    group->set_into_collide_mask(group->get_into_collide_mask() | ulong_value);

  } else if (cmp_nocase_uh(name, "portal") == 0) {
    group->set_portal_flag(value != 0);

  } else if (cmp_nocase_uh(name, "polylight") == 0) {
    group->set_polylight_flag(value != 0);

  } else if (cmp_nocase_uh(name, "indexed") == 0) {
    group->set_indexed_flag(value != 0);

  } else if (cmp_nocase_uh(name, "blend") == 0) {
    EggGroup::BlendMode blend_mode =
      EggGroup::string_blend_mode(strval);
    if (blend_mode == EggGroup::BM_unspecified) {
      eggyywarning("Unknown blend mode " + strval);
    } else {
      group->set_blend_mode(blend_mode);
    }

  } else if (cmp_nocase_uh(name, "blendop_a") == 0) {
    EggGroup::BlendOperand blend_operand =
      EggGroup::string_blend_operand(strval);
    if (blend_operand == EggGroup::BO_unspecified) {
      eggyywarning("Unknown blend operand " + strval);
    } else {
      group->set_blend_operand_a(blend_operand);
    }

  } else if (cmp_nocase_uh(name, "blendop_b") == 0) {
    EggGroup::BlendOperand blend_operand =
      EggGroup::string_blend_operand(strval);
    if (blend_operand == EggGroup::BO_unspecified) {
      eggyywarning("Unknown blend operand " + strval);
    } else {
      group->set_blend_operand_b(blend_operand);
    }

  } else if (cmp_nocase_uh(name, "blendr") == 0) {
    Colorf color = group->get_blend_color();
    color[0] = value;
    group->set_blend_color(color);

  } else if (cmp_nocase_uh(name, "blendg") == 0) {
    Colorf color = group->get_blend_color();
    color[1] = value;
    group->set_blend_color(color);

  } else if (cmp_nocase_uh(name, "blendb") == 0) {
    Colorf color = group->get_blend_color();
    color[2] = value;
    group->set_blend_color(color);

  } else if (cmp_nocase_uh(name, "blenda") == 0) {
    Colorf color = group->get_blend_color();
    color[3] = value;
    group->set_blend_color(color);

  } else {
    eggyywarning("Unknown group scalar " + name);
  }
;
    break;}
case 78:
#line 1347 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::BillboardType f = EggGroup::string_billboard_type(strval);
  if (f == EggGroup::BT_none) {
    eggyywarning("Unknown billboard type " + strval);
  } else {
    group->set_billboard_type(f);
  }
;
    break;}
case 79:
#line 1359 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_billboard_center(LPoint3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 80:
#line 1364 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = yyvsp[-4]._string;

  group->set_collision_name(name);
;
    break;}
case 81:
#line 1371 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_dcs_type(value!=0 ? EggGroup::DC_default : EggGroup::DC_none);
;
    break;}
case 82:
#line 1377 "parser.yxx"
{
  // The special flavor of DCS, with { sync } or { nosync }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::DCSType f = EggGroup::string_dcs_type(strval);
  if (f == EggGroup::DC_unspecified) {
    eggyywarning("Unknown DCS type " + strval);
  } else {
    group->set_dcs_type(f);
  }
;
    break;}
case 83:
#line 1390 "parser.yxx"
{
  // The traditional flavor of DART, with { 0 } or { 1 }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_dart_type(value!=0 ? EggGroup::DT_default : EggGroup::DT_none);
;
    break;}
case 84:
#line 1397 "parser.yxx"
{
  // The special flavor of DART, with { sync } or { nosync }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::DartType f = EggGroup::string_dart_type(strval);
  if (f == EggGroup::DT_none) {
    eggyywarning("Unknown dart type " + strval);
  } else {
    group->set_dart_type(f);
  }
;
    break;}
case 85:
#line 1410 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_switch_flag(value!=0);
;
    break;}
case 86:
#line 1416 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string type = yyvsp[-1]._string;
  group->add_object_type(type);
;
    break;}
case 87:
#line 1422 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_model_flag(value!=0);
;
    break;}
case 88:
#line 1428 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_tag(yyvsp[-3]._string, yyvsp[-1]._string);
;
    break;}
case 89:
#line 1433 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_texlist_flag(value!=0);
;
    break;}
case 94:
#line 1443 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  if (group->get_group_type() != EggGroup::GT_instance) {
    eggyyerror("<Ref> valid only within <Instance>");
  } else if (yyvsp[-1]._egg != (EggObject *)NULL) {
    group->add_group_ref(DCAST(EggGroup, yyvsp[-1]._egg));
  }
;
    break;}
case 95:
#line 1452 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 96:
#line 1466 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[0]._string;

  EggGroup::CollisionSolidType f = EggGroup::string_cs_type(strval);
  if (f == EggGroup::CST_none) {
    eggyywarning("Unknown collision solid type " + strval);
  } else {
    if (f == EggGroup::CST_polyset && group->get_cs_type() != EggGroup::CST_none) {
      // By convention, a CST_polyset doesn't replace any existing
      // contradictory type, so ignore it if this happens.  This
      // allows the artist to place, for instance, <ObjectType> {
      // sphere } and <ObjectType> { trigger } together.

    } else {
      group->set_cs_type(f);
    }
  }
;
    break;}
case 98:
#line 1497 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[0]._string;

  EggGroup::CollideFlags f = EggGroup::string_collide_flags(strval);
  if (f == EggGroup::CF_none) {
    eggyywarning("Unknown collision flag " + strval);
  } else {
    group->set_collide_flags(group->get_collide_flags() | f);
  }
;
    break;}
case 99:
#line 1519 "parser.yxx"
{
  egg_top_transform = egg_stack.back()->as_transform();
  egg_top_transform->clear_transform();
;
    break;}
case 101:
#line 1535 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  if (group->get_group_type() != EggGroup::GT_joint) {
    eggyywarning("Unexpected <DefaultPose> outside of <Joint>");
  }
  egg_top_transform = &group->modify_default_pose();
  egg_top_transform->clear_transform();
;
    break;}
case 116:
#line 1572 "parser.yxx"
{
  egg_top_transform->add_translate2d(LVector2d(yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 117:
#line 1579 "parser.yxx"
{
  egg_top_transform->add_translate3d(LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 118:
#line 1586 "parser.yxx"
{
  egg_top_transform->add_rotate2d(yyvsp[-1]._number);
;
    break;}
case 119:
#line 1593 "parser.yxx"
{
  egg_top_transform->add_rotx(yyvsp[-1]._number);
;
    break;}
case 120:
#line 1600 "parser.yxx"
{
  egg_top_transform->add_roty(yyvsp[-1]._number);
;
    break;}
case 121:
#line 1607 "parser.yxx"
{
  egg_top_transform->add_rotz(yyvsp[-1]._number);
;
    break;}
case 122:
#line 1614 "parser.yxx"
{
  egg_top_transform->add_rotate3d(yyvsp[-4]._number, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 123:
#line 1621 "parser.yxx"
{
  egg_top_transform->add_scale2d(LVecBase2d(yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 124:
#line 1628 "parser.yxx"
{
  egg_top_transform->add_scale3d(LVecBase3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 125:
#line 1635 "parser.yxx"
{
  egg_top_transform->add_uniform_scale(yyvsp[-1]._number);
;
    break;}
case 128:
#line 1649 "parser.yxx"
{
  egg_top_transform->add_matrix3
    (LMatrix3d(yyvsp[-8]._number, yyvsp[-7]._number, yyvsp[-6]._number,
               yyvsp[-5]._number, yyvsp[-4]._number, yyvsp[-3]._number,
               yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 131:
#line 1667 "parser.yxx"
{
  egg_top_transform->add_matrix4
    (LMatrix4d(yyvsp[-15]._number, yyvsp[-14]._number, yyvsp[-13]._number, yyvsp[-12]._number,
               yyvsp[-11]._number, yyvsp[-10]._number, yyvsp[-9]._number, yyvsp[-8]._number,
               yyvsp[-7]._number, yyvsp[-6]._number, yyvsp[-5]._number, yyvsp[-4]._number,
               yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 132:
#line 1686 "parser.yxx"
{
  if (yyvsp[-2]._egg != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, yyvsp[-2]._egg);
    EggGroup *group = DCAST(EggGroup, egg_stack.back());
    PTA_double nums = yyvsp[-6]._number_list;
    double membership = yyvsp[-5]._number;

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_forward_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        group->ref_vertex(vertex, membership);
      }
    }
  }
;
    break;}
case 133:
#line 1719 "parser.yxx"
{
  yyval._number = 1.0;
;
    break;}
case 134:
#line 1723 "parser.yxx"
{
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  double result = yyvsp[-5]._number;
  
  if (cmp_nocase_uh(name, "membership") == 0) {
    result = value;
  } else {
    eggyywarning("Unknown group vertex scalar " + name);
  }

  yyval._number = result;
;
    break;}
case 136:
#line 1760 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance(yyvsp[-8]._number, yyvsp[-7]._number, LPoint3d(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number)));
;
    break;}
case 137:
#line 1765 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance(yyvsp[-9]._number, yyvsp[-8]._number, LPoint3d(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number), yyvsp[-7]._number));
;
    break;}
case 138:
#line 1782 "parser.yxx"
{
  egg_stack.push_back(new EggPolygon(yyvsp[0]._string));
;
    break;}
case 139:
#line 1786 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 140:
#line 1801 "parser.yxx"
{
  egg_stack.push_back(new EggTriangleFan(yyvsp[0]._string));
;
    break;}
case 141:
#line 1805 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 142:
#line 1820 "parser.yxx"
{
  egg_stack.push_back(new EggTriangleStrip(yyvsp[0]._string));
;
    break;}
case 143:
#line 1824 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 144:
#line 1839 "parser.yxx"
{
  egg_stack.push_back(new EggPoint(yyvsp[0]._string));
;
    break;}
case 145:
#line 1843 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 146:
#line 1858 "parser.yxx"
{
  egg_stack.push_back(new EggLine(yyvsp[0]._string));
;
    break;}
case 147:
#line 1862 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 148:
#line 1877 "parser.yxx"
{
  egg_stack.push_back(new EggNurbsSurface(yyvsp[0]._string));
;
    break;}
case 149:
#line 1881 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 150:
#line 1896 "parser.yxx"
{
  egg_stack.push_back(new EggNurbsCurve(yyvsp[0]._string));
;
    break;}
case 151:
#line 1900 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 156:
#line 1930 "parser.yxx"
{
  if (!egg_stack.back()->is_of_type(EggCompositePrimitive::get_class_type())) {
    eggyyerror("Not a composite primitive; components are not allowed here.");
  } else {
    PT(EggCompositePrimitive) comp = DCAST(EggCompositePrimitive, egg_stack.back());
    if (yyvsp[-1]._number < 0 || yyvsp[-1]._number >= comp->get_num_components()) {
      eggyyerror("Invalid component number");
    }
  }
  // We temporarily add an EggPolygon to the stack, just to receive
  // the component attributes.
  egg_stack.push_back(new EggPolygon);
;
    break;}
case 157:
#line 1944 "parser.yxx"
{
  PT(EggPrimitive) prim = DCAST(EggPrimitive, egg_stack.back());
  egg_stack.pop_back();
  PT(EggCompositePrimitive) comp = DCAST(EggCompositePrimitive, egg_stack.back());
  comp->set_component((int)yyvsp[-4]._number, prim);
;
    break;}
case 165:
#line 1958 "parser.yxx"
{
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "thick") == 0) {
    if (primitive->is_of_type(EggLine::get_class_type())) {
      DCAST(EggLine, primitive)->set_thick(value);
    } else if (primitive->is_of_type(EggPoint::get_class_type())) {
      DCAST(EggPoint, primitive)->set_thick(value);
    } else {
      eggyywarning("scalar thick is only meaningful for points and lines.");
    }
  } else if (cmp_nocase_uh(name, "perspective") == 0) {
    if (primitive->is_of_type(EggPoint::get_class_type())) {
      DCAST(EggPoint, primitive)->set_perspective(value != 0);
    } else {
      eggyywarning("scalar perspective is only meaningful for points.");
    }
  } else {
    eggyywarning("Unknown scalar " + name);
  }
;
    break;}
case 177:
#line 2042 "parser.yxx"
{
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, yyvsp[0]._egg);
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_curves_on_surface.push_back(curve);
;
    break;}
case 179:
#line 2049 "parser.yxx"
{
  EggNurbsSurface *primitive = DCAST(EggNurbsSurface, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "u_subdiv") == 0) {
    primitive->set_u_subdiv((int)value);
  } else if (cmp_nocase_uh(name, "v_subdiv") == 0) {
    primitive->set_v_subdiv((int)value);
  } else {
    eggyywarning("Unknown scalar " + name);
  }
;
    break;}
case 190:
#line 2123 "parser.yxx"
{
  EggNurbsCurve *primitive = DCAST(EggNurbsCurve, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "subdiv") == 0) {
    primitive->set_subdiv((int)value);
  } else if (cmp_nocase_uh(name, "type") == 0) {
    EggCurve::CurveType a = EggCurve::string_curve_type(strval);
    if (a == EggCurve::CT_none) {
      eggyywarning("Unknown curve type " + strval);
    } else {
      primitive->set_curve_type(a);
    }
    
  } else {
    eggyywarning("Unknown scalar " + name);
  }
;
    break;}
case 191:
#line 2192 "parser.yxx"
{
  if (yyvsp[0]._egg != (EggTexture *)NULL) {
    EggTexture *texture = DCAST(EggTexture, yyvsp[0]._egg);
    DCAST(EggPrimitive, egg_stack.back())->add_texture(texture);
  }
;
    break;}
case 192:
#line 2209 "parser.yxx"
{
  EggTexture *texture = NULL;

  // Defining a texture on-the-fly.
  Filename filename = yyvsp[0]._string;
  string tref_name = filename.get_basename();

  Textures::iterator vpi = textures.find(tref_name);
  if (vpi == textures.end()) {
    // The texture was not yet defined.  Define it.
    texture = new EggTexture(tref_name, filename);
    textures[tref_name] = texture;

    if (egg_top_node != NULL) {
      egg_top_node->add_child(texture);
    }

  } else {
    // The texture already existed.  Use it.
    texture = (*vpi).second;
    if (filename != texture->get_filename()) {
      eggyywarning(string("Using previous path: ") + 
                   texture->get_filename().get_fullpath());
    }
  }

  nassertr(texture != NULL, 0);
  DCAST(EggPrimitive, egg_stack.back())->add_texture(texture);
;
    break;}
case 193:
#line 2249 "parser.yxx"
{
  if (yyvsp[0]._egg != (EggMaterial *)NULL) {
    EggMaterial *material = DCAST(EggMaterial, yyvsp[0]._egg);
    DCAST(EggPrimitive, egg_stack.back())->set_material(material);
  }
;
    break;}
case 194:
#line 2266 "parser.yxx"
{
  DCAST(EggPrimitive, egg_stack.back())->set_normal(Normald(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 195:
#line 2270 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 196:
#line 2278 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 197:
#line 2296 "parser.yxx"
{
  DCAST(EggPrimitive, egg_stack.back())->set_color(Colorf(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 198:
#line 2300 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-6]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-6]._string);
  }
;
    break;}
case 199:
#line 2308 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-5]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 200:
#line 2326 "parser.yxx"
{
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  int value = (int)yyvsp[0]._number;
  primitive->set_bface_flag(value!=0);
;
    break;}
case 201:
#line 2342 "parser.yxx"
{
  if (yyvsp[-2]._egg != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, yyvsp[-2]._egg);
    EggPrimitive *prim = DCAST(EggPrimitive, egg_stack.back());
    PTA_double nums = yyvsp[-5]._number_list;

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_forward_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        prim->add_vertex(vertex);
      }
    }
  }
;
    break;}
case 202:
#line 2373 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  int u_order = (int)yyvsp[-1]._number;
  int v_order = (int)yyvsp[0]._number;
  nurbs->set_u_order(u_order);
  nurbs->set_v_order(v_order);
;
    break;}
case 203:
#line 2391 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_u_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_u_knot(i, nums[i]);
  }
;
    break;}
case 204:
#line 2411 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_v_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_v_knot(i, nums[i]);
  }
;
    break;}
case 205:
#line 2431 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_trims.push_back(EggNurbsSurface::Trim());
;
    break;}
case 207:
#line 2447 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nurbs->_trims.back().push_back(EggNurbsSurface::Loop());
;
    break;}
case 208:
#line 2453 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nassertr(!nurbs->_trims.back().empty(), 0);
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, yyvsp[0]._egg); 
  nurbs->_trims.back().back().push_back(curve);
;
    break;}
case 209:
#line 2472 "parser.yxx"
{
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  int order = (int)yyvsp[0]._number;
  nurbs->set_order(order);
;
    break;}
case 210:
#line 2488 "parser.yxx"
{
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_knot(i, nums[i]);
  }
;
    break;}
case 211:
#line 2509 "parser.yxx"
{
  EggTable *table = new EggTable(yyvsp[0]._string);
  table->set_table_type(EggTable::TT_table);
  egg_stack.push_back(table);
;
    break;}
case 212:
#line 2515 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
  Thread::consider_yield();
;
    break;}
case 213:
#line 2532 "parser.yxx"
{
  EggTable *table = new EggTable(yyvsp[0]._string);
  table->set_table_type(EggTable::TT_bundle);
  egg_stack.push_back(table);
;
    break;}
case 214:
#line 2538 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 216:
#line 2554 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 217:
#line 2558 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 218:
#line 2562 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 219:
#line 2566 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 220:
#line 2570 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 221:
#line 2585 "parser.yxx"
{
  EggSAnimData *anim_data = new EggSAnimData(yyvsp[0]._string);
  egg_stack.push_back(anim_data);
;
    break;}
case 222:
#line 2590 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 224:
#line 2607 "parser.yxx"
{
  EggSAnimData *anim_data = DCAST(EggSAnimData, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else {
    eggyywarning("Unsupported S$Anim scalar: " + name);
  }
;
    break;}
case 225:
#line 2619 "parser.yxx"
{
  DCAST(EggSAnimData, egg_stack.back())->set_data(yyvsp[-1]._number_list);
;
    break;}
case 226:
#line 2633 "parser.yxx"
{
  EggXfmAnimData *anim_data = new EggXfmAnimData(yyvsp[0]._string);
  egg_stack.push_back(anim_data);
;
    break;}
case 227:
#line 2638 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 229:
#line 2655 "parser.yxx"
{
  EggXfmAnimData *anim_data = DCAST(EggXfmAnimData, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_data->set_order(strval);
  } else if (cmp_nocase_uh(name, "contents") == 0) {
    anim_data->set_contents(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim scalar: " + name);
  }
;
    break;}
case 230:
#line 2672 "parser.yxx"
{
  DCAST(EggXfmAnimData, egg_stack.back())->set_data(yyvsp[-1]._number_list);
;
    break;}
case 231:
#line 2686 "parser.yxx"
{
  EggXfmSAnim *anim_group = new EggXfmSAnim(yyvsp[0]._string);
  egg_stack.push_back(anim_group);
;
    break;}
case 232:
#line 2691 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 234:
#line 2708 "parser.yxx"
{
  EggXfmSAnim *anim_group = DCAST(EggXfmSAnim, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_group->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_group->set_order(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim_S$ scalar: " + name);
  }
;
    break;}
case 235:
#line 2723 "parser.yxx"
{
  DCAST(EggXfmSAnim, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 236:
#line 2738 "parser.yxx"
{
  EggAnimPreload *anim_preload = new EggAnimPreload(yyvsp[0]._string);
  egg_stack.push_back(anim_preload);
;
    break;}
case 237:
#line 2743 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 239:
#line 2760 "parser.yxx"
{
  EggAnimPreload *anim_preload = DCAST(EggAnimPreload, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_preload->set_fps(value);
  } else if (cmp_nocase_uh(name, "frames") == 0) {
    anim_preload->set_num_frames((int)value);
  } else {
    eggyywarning("Unsupported AnimPreload scalar: " + name);
  }
;
    break;}
case 240:
#line 2784 "parser.yxx"
{
  yyval._number_list = PTA_double::empty_array(0);
;
    break;}
case 241:
#line 2788 "parser.yxx"
{
  yyval._number_list.push_back((double)yyvsp[0]._number);
;
    break;}
case 242:
#line 2802 "parser.yxx"
{
  yyval._number_list = PTA_double::empty_array(0);
;
    break;}
case 243:
#line 2806 "parser.yxx"
{
  yyval._number_list.push_back(yyvsp[0]._number);
;
    break;}
case 244:
#line 2820 "parser.yxx"
{
  string name = yyvsp[0]._string;
  Textures::iterator vpi = textures.find(name);
  if (vpi == textures.end()) {
    eggyyerror("Unknown texture " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
;
    break;}
case 245:
#line 2841 "parser.yxx"
{
  string name = yyvsp[0]._string;
  Materials::iterator vpi = materials.find(name);
  if (vpi == materials.end()) {
    eggyyerror("Unknown material " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
;
    break;}
case 246:
#line 2862 "parser.yxx"
{
  string name = yyvsp[0]._string;
  VertexPools::iterator vpi = vertex_pools.find(name);
  if (vpi == vertex_pools.end()) {
    // This will become a forward reference.
    EggVertexPool *pool = new EggVertexPool(name);
    // The egg syntax starts counting at 1 by convention.
    pool->set_highest_index(0);
    vertex_pools[name] = pool;
    yyval._egg = pool;
  } else {
    yyval._egg = (*vpi).second;
  }
;
    break;}
case 247:
#line 2887 "parser.yxx"
{
  string name = yyvsp[0]._string;
  Groups::iterator vpi = groups.find(name);
  if (vpi == groups.end()) {
    eggyyerror("Unknown group " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
;
    break;}
case 248:
#line 2908 "parser.yxx"
{
  eggyyerror("Name required.");
  yyval._string = "";
;
    break;}
case 251:
#line 2937 "parser.yxx"
{
  eggyyerror("String required.");
  yyval._string = "";
;
    break;}
case 253:
#line 2953 "parser.yxx"
{
  yyval._string = "";
;
    break;}
case 255:
#line 2971 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
;
    break;}
case 256:
#line 2975 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
;
    break;}
case 258:
#line 2992 "parser.yxx"
{
  yyval._string = "";
;
    break;}
case 259:
#line 2996 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
;
    break;}
case 260:
#line 3012 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
;
    break;}
case 261:
#line 3016 "parser.yxx"
{
  yyval._string = yyvsp[-1]._string + "\n" + yyvsp[0]._string;
;
    break;}
case 263:
#line 3031 "parser.yxx"
{
  yyval._number = yyvsp[0]._ulong;
;
    break;}
case 264:
#line 3046 "parser.yxx"
{
  yyval._number = yyvsp[0]._number;
  yyval._ulong = (unsigned long)yyvsp[0]._number;
  yyval._string = yyvsp[0]._string;
;
    break;}
case 265:
#line 3052 "parser.yxx"
{
  yyval._number = yyvsp[0]._ulong;
  yyval._ulong = yyvsp[0]._ulong;
  yyval._string = yyvsp[0]._string;
;
    break;}
case 266:
#line 3058 "parser.yxx"
{
  yyval._number = 0.0;
  yyval._ulong = 0;
  yyval._string = yyvsp[0]._string;
;
    break;}
case 267:
#line 3075 "parser.yxx"
{
  int i = (int)yyvsp[0]._number;
  if ((double)i != yyvsp[0]._number) {
    eggyywarning("Integer expected.");
    yyval._number = (double)i;
  }
;
    break;}
case 268:
#line 3083 "parser.yxx"
{
  yyval._number = yyvsp[0]._ulong;
;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3090 "parser.yxx"

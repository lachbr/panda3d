/* A Bison parser, made from parser.yxx
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse eggyyparse
#define yylex eggyylex
#define yyerror eggyyerror
#define yylval eggyylval
#define yychar eggyychar
#define yydebug eggyydebug
#define yynerrs eggyynerrs
# define	NUMBER	257
# define	ULONG	258
# define	STRING	259
# define	BEZIERCURVE	260
# define	BFACE	261
# define	BILLBOARD	262
# define	BILLBOARDCENTER	263
# define	BUNDLE	264
# define	CLOSED	265
# define	COLLIDE	266
# define	COMMENT	267
# define	COMPONENT	268
# define	COORDSYSTEM	269
# define	CV	270
# define	DART	271
# define	DNORMAL	272
# define	DRGBA	273
# define	DUV	274
# define	DXYZ	275
# define	DCS	276
# define	DISTANCE	277
# define	DTREF	278
# define	DYNAMICVERTEXPOOL	279
# define	EXTERNAL_FILE	280
# define	FLIGHT	281
# define	GROUP	282
# define	HIP	283
# define	INTANGENT	284
# define	JOINT	285
# define	KNOTS	286
# define	INCLUDE	287
# define	INSTANCE	288
# define	LINE	289
# define	LOOP	290
# define	MATERIAL	291
# define	MATRIX3	292
# define	MATRIX4	293
# define	MODEL	294
# define	MREF	295
# define	NORMAL	296
# define	NURBSCURVE	297
# define	NURBSSURFACE	298
# define	OBJECTTYPE	299
# define	ORDER	300
# define	OUTTANGENT	301
# define	POINTLIGHT	302
# define	POLYGON	303
# define	REF	304
# define	RGBA	305
# define	ROTATE	306
# define	ROTX	307
# define	ROTY	308
# define	ROTZ	309
# define	SANIM	310
# define	SCALAR	311
# define	SCALE	312
# define	SEQUENCE	313
# define	SHADING	314
# define	SWITCH	315
# define	SWITCHCONDITION	316
# define	TABLE	317
# define	TABLE_V	318
# define	TAG	319
# define	TEXLIST	320
# define	TEXTURE	321
# define	TLENGTHS	322
# define	TRANSFORM	323
# define	TRANSLATE	324
# define	TREF	325
# define	TRIANGLEFAN	326
# define	TRIANGLESTRIP	327
# define	TRIM	328
# define	TXT	329
# define	UKNOTS	330
# define	UV	331
# define	VKNOTS	332
# define	VERTEX	333
# define	VERTEXANIM	334
# define	VERTEXPOOL	335
# define	VERTEXREF	336
# define	XFMANIM	337
# define	XFMSANIM	338
# define	START_EGG	339
# define	START_GROUP_BODY	340
# define	START_TEXTURE_BODY	341
# define	START_PRIMITIVE_BODY	342

#line 6 "parser.yxx"


#include "pandabase.h"
#include "config_egg.h"
#include "parserDefs.h"
#include "lexerDefs.h"
#include "eggObject.h"
#include "eggGroup.h"
#include "eggVertex.h"
#include "eggVertexPool.h"
#include "eggVertexUV.h"
#include "eggPolygon.h"
#include "eggCompositePrimitive.h"
#include "eggTriangleFan.h"
#include "eggTriangleStrip.h"
#include "eggPoint.h"
#include "eggLine.h"
#include "eggNurbsSurface.h"
#include "eggNurbsCurve.h"
#include "eggTable.h"
#include "eggSAnimData.h"
#include "eggXfmSAnim.h"
#include "eggXfmAnimData.h"
#include "eggTexture.h"
#include "eggMaterial.h"
#include "eggComment.h"
#include "eggCoordinateSystem.h"
#include "eggExternalReference.h"
#include "eggData.h"
#include "pt_EggTexture.h"
#include "pt_EggMaterial.h"

#include "string_utils.h"
#include "filename.h"
#include "luse.h"
#include "lmatrix.h"
#include "coordinateSystem.h"
#include "pvector.h"
#include "dcast.h"

// Because our token type contains objects of type string, which
// require correct copy construction (and not simply memcpying), we
// cannot use bison's built-in auto-stack-grow feature.  As an easy
// solution, we ensure here that we have enough yacc stack to start
// with, and that it doesn't ever try to grow.
#define YYINITDEPTH 1000
#define YYMAXDEPTH 1000

// We need a stack of EggObject pointers.  Each time we encounter a
// nested EggObject of some kind, we'll allocate a new one of these
// and push it onto the stack.  At any given time, the top of the
// stack is the EggObject we are currently scanning.

typedef pvector< PT(EggObject) > EggStack;
static EggStack egg_stack;

// There's one "top-level" egg node, which is where we should parent
// things (e.g. implicit textures) encountered in the egg file that
// don't have an explicit place in the tree.  If this is NULL, such
// things won't be parented anywhere.
static EggGroupNode *egg_top_node;

// We need a table mapping vertex pool names to vertex pools.
typedef pmap<string,  PT(EggVertexPool) > VertexPools;
static VertexPools vertex_pools;

// And another one mapping texture names to textures.
typedef pmap<string,  PT_EggTexture > Textures;
static Textures textures;

// And again for material names to materials.
typedef pmap<string,  PT_EggMaterial > Materials;
static Materials materials;

// We need to be able to save the index number requested for a vertex
// temporarily.
static int vertex_index;

// We need to hold a matrix for a little bit while parsing the
// <Transform> entries.
static LMatrix3d matrix_2d;


////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

void
egg_init_parser(istream &in, const string &filename,
                EggObject *tos, EggGroupNode *top_node) {
  egg_init_lexer(in, filename);

  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();

  egg_stack.push_back(tos);
  egg_top_node = top_node;
}

void
egg_cleanup_parser() {
  // Check for undefined vertex pools.
  VertexPools::const_iterator vpi;
  for (vpi = vertex_pools.begin(); vpi != vertex_pools.end(); ++vpi) {
    EggVertexPool *pool = (*vpi).second;
    if (pool->has_forward_vertices()) {
      if (!pool->has_defined_vertices()) {
        eggyyerror("Undefined vertex pool " + pool->get_name());
      } else {
        eggyyerror("Undefined vertices in pool " + pool->get_name());
        
        egg_cat.error(false)
          << "Undefined vertex index numbers:";
        EggVertexPool::const_iterator vi;
        for (vi = pool->begin(); vi != pool->end(); ++vi) {
          EggVertex *vertex = (*vi);
          if (vertex->is_forward_reference()) {
            egg_cat.error(false)
              << " " << vertex->get_index();
          }
        }
        egg_cat.error(false) 
          << "\n";
      }
    }
  }

  // Clean these out after we're done, so we don't keep big memory
  // structures around needlessly.
  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();
}

#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		721
#define	YYFLAG		-32768
#define	YYNTBASE	91

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 342 ? yytranslate[x] : 209)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    89,     2,    90,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    17,    19,    21,
      23,    25,    27,    29,    31,    33,    35,    37,    39,    41,
      43,    45,    47,    49,    51,    56,    62,    63,    71,    73,
      80,    83,    84,    91,    93,   100,   106,   113,   114,   121,
     123,   126,   127,   133,   134,   141,   143,   146,   150,   155,
     156,   164,   170,   176,   185,   194,   197,   205,   213,   217,
     226,   235,   240,   250,   260,   261,   268,   269,   276,   277,
     284,   286,   293,   299,   307,   315,   321,   327,   333,   339,
     345,   351,   357,   364,   370,   373,   376,   379,   382,   384,
     386,   389,   390,   396,   398,   401,   404,   407,   410,   413,
     416,   419,   426,   431,   436,   441,   449,   456,   461,   466,
     468,   485,   486,   492,   494,   497,   500,   503,   506,   512,
     517,   523,   528,   530,   540,   550,   552,   559,   564,   576,
     589,   590,   597,   598,   605,   606,   613,   614,   621,   622,
     629,   630,   637,   638,   645,   647,   653,   659,   661,   662,
     670,   676,   682,   688,   691,   697,   703,   709,   716,   718,
     724,   730,   736,   739,   745,   751,   757,   763,   769,   775,
     778,   784,   791,   793,   799,   805,   811,   814,   820,   826,
     832,   838,   844,   851,   853,   855,   857,   861,   870,   879,
     884,   894,   904,   906,   915,   918,   920,   922,   924,   930,
     932,   935,   937,   939,   940,   947,   948,   955,   957,   960,
     963,   966,   969,   972,   973,   980,   982,   989,   995,   996,
    1003,  1005,  1012,  1018,  1019,  1026,  1028,  1035,  1038,  1040,
    1043,  1045,  1048,  1050,  1052,  1054,  1056,  1058,  1060,  1062,
    1064,  1066,  1068,  1070,  1072,  1074,  1076,  1078,  1080,  1083,
    1085,  1087,  1089,  1091,  1093,  1095,  1097
};
static const short yyrhs[] =
{
      85,    92,     0,    86,   120,     0,    87,    98,     0,    88,
     161,     0,   208,     0,    92,    93,     0,    94,     0,    95,
       0,    96,     0,    99,     0,   102,     0,   103,     0,   114,
       0,   116,     0,   118,     0,   146,     0,   148,     0,   150,
       0,   152,     0,   154,     0,   156,     0,   158,     0,   179,
       0,    15,    89,   200,    90,     0,    13,   199,    89,   203,
      90,     0,     0,    67,   198,    89,   200,    97,    98,    90,
       0,   208,     0,    98,    57,   198,    89,   206,    90,     0,
      98,   134,     0,     0,    37,   198,    89,   100,   101,    90,
       0,   208,     0,   101,    57,   198,    89,   206,    90,     0,
      26,   199,    89,   200,    90,     0,   202,    26,   199,    89,
     200,    90,     0,     0,    81,   198,   104,    89,   105,    90,
       0,   208,     0,   105,   106,     0,     0,    79,   107,    89,
     109,    90,     0,     0,    79,   207,   108,    89,   109,    90,
       0,   205,     0,   205,   205,     0,   205,   205,   205,     0,
     205,   205,   205,   205,     0,     0,   109,    77,   199,    89,
     110,   111,    90,     0,   109,    42,    89,   112,    90,     0,
     109,    51,    89,   113,    90,     0,   109,    21,   202,    89,
     205,   205,   205,    90,     0,   109,    21,    89,   202,   205,
     205,   205,    90,     0,   205,   205,     0,   111,    20,   202,
      89,   205,   205,    90,     0,   111,    20,    89,   202,   205,
     205,    90,     0,   205,   205,   205,     0,   112,    18,   202,
      89,   205,   205,   205,    90,     0,   112,    18,    89,   202,
     205,   205,   205,    90,     0,   205,   205,   205,   205,     0,
     113,    19,   202,    89,   205,   205,   205,   205,    90,     0,
     113,    19,    89,   202,   205,   205,   205,   205,    90,     0,
       0,    28,   199,   115,    89,   120,    90,     0,     0,    31,
     199,   117,    89,   120,    90,     0,     0,    34,   199,   119,
      89,   120,    90,     0,   208,     0,   120,    57,   198,    89,
     206,    90,     0,   120,     8,    89,   202,    90,     0,   120,
       9,    89,   205,   205,   205,    90,     0,   120,    12,   199,
      89,   121,   122,    90,     0,   120,    22,    89,   207,    90,
       0,   120,    22,    89,     5,    90,     0,   120,    17,    89,
     207,    90,     0,   120,    17,    89,     5,    90,     0,   120,
      61,    89,   207,    90,     0,   120,    45,    89,   200,    90,
       0,   120,    40,    89,   207,    90,     0,   120,    65,   199,
      89,   203,    90,     0,   120,    66,    89,   207,    90,     0,
     120,   123,     0,   120,   142,     0,   120,   144,     0,   120,
      93,     0,   202,     0,   208,     0,   122,   202,     0,     0,
      69,   124,    89,   125,    90,     0,   208,     0,   125,   126,
       0,   125,   127,     0,   125,   128,     0,   125,   129,     0,
     125,   130,     0,   125,   131,     0,   125,   132,     0,    70,
      89,   205,   205,   205,    90,     0,    53,    89,   205,    90,
       0,    54,    89,   205,    90,     0,    55,    89,   205,    90,
       0,    52,    89,   205,   205,   205,   205,    90,     0,    58,
      89,   205,   205,   205,    90,     0,    58,    89,   205,    90,
       0,    39,    89,   133,    90,     0,   208,     0,   205,   205,
     205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
     205,   205,   205,   205,     0,     0,    69,   135,    89,   136,
      90,     0,   208,     0,   136,   140,     0,   136,   137,     0,
     136,   138,     0,   136,   139,     0,    70,    89,   205,   205,
      90,     0,    52,    89,   205,    90,     0,    58,    89,   205,
     205,    90,     0,    38,    89,   141,    90,     0,   208,     0,
     205,   205,   205,   205,   205,   205,   205,   205,   205,     0,
      82,    89,   193,   143,    50,    89,   197,    90,    90,     0,
     208,     0,   143,    57,   198,    89,   206,    90,     0,    62,
      89,   145,    90,     0,    23,    89,   205,   205,    79,    89,
     205,   205,   205,    90,    90,     0,    23,    89,   205,   205,
     205,    79,    89,   205,   205,   205,    90,    90,     0,     0,
      49,   199,   147,    89,   161,    90,     0,     0,    72,   199,
     149,    89,   161,    90,     0,     0,    73,   199,   151,    89,
     161,    90,     0,     0,    48,   199,   153,    89,   161,    90,
       0,     0,    35,   199,   155,    89,   161,    90,     0,     0,
      44,   199,   157,    89,   163,    90,     0,     0,    43,   199,
     159,    89,   164,    90,     0,   208,     0,   160,    42,    89,
     168,    90,     0,   160,    51,    89,   169,    90,     0,   208,
       0,     0,   161,    14,   207,    89,   162,   160,    90,     0,
     161,    71,    89,   165,    90,     0,   161,    67,    89,   166,
      90,     0,   161,    41,    89,   167,    90,     0,   161,   171,
       0,   161,    42,    89,   168,    90,     0,   161,    51,    89,
     169,    90,     0,   161,     7,    89,   170,    90,     0,   161,
      57,   198,    89,   206,    90,     0,   208,     0,   163,    71,
      89,   165,    90,     0,   163,    67,    89,   166,    90,     0,
     163,    41,    89,   167,    90,     0,   163,   171,     0,   163,
      42,    89,   168,    90,     0,   163,    51,    89,   169,    90,
       0,   163,     7,    89,   170,    90,     0,   163,    46,    89,
     172,    90,     0,   163,    76,    89,   173,    90,     0,   163,
      78,    89,   174,    90,     0,   163,   158,     0,   163,    74,
      89,   175,    90,     0,   163,    57,   198,    89,   206,    90,
       0,   208,     0,   164,    71,    89,   165,    90,     0,   164,
      67,    89,   166,    90,     0,   164,    41,    89,   167,    90,
       0,   164,   171,     0,   164,    42,    89,   168,    90,     0,
     164,    51,    89,   169,    90,     0,   164,     7,    89,   170,
      90,     0,   164,    46,    89,   177,    90,     0,   164,    32,
      89,   178,    90,     0,   164,    57,   198,    89,   206,    90,
       0,   195,     0,   198,     0,   196,     0,   205,   205,   205,
       0,   168,    18,   202,    89,   205,   205,   205,    90,     0,
     168,    18,    89,   202,   205,   205,   205,    90,     0,   205,
     205,   205,   205,     0,   169,    19,   202,    89,   205,   205,
     205,   205,    90,     0,   169,    19,    89,   202,   205,   205,
     205,   205,    90,     0,   207,     0,    82,    89,   193,    50,
      89,   197,    90,    90,     0,   207,   207,     0,   194,     0,
     194,     0,   208,     0,   175,    36,    89,   176,    90,     0,
     208,     0,   176,   158,     0,   207,     0,   194,     0,     0,
      63,   199,   180,    89,   183,    90,     0,     0,    10,   199,
     182,    89,   183,    90,     0,   208,     0,   183,   179,     0,
     183,   181,     0,   183,   184,     0,   183,   187,     0,   183,
     190,     0,     0,    56,   199,   185,    89,   186,    90,     0,
     208,     0,   186,    57,   198,    89,   206,    90,     0,   186,
      64,    89,   194,    90,     0,     0,    83,   199,   188,    89,
     189,    90,     0,   208,     0,   189,    57,   198,    89,   206,
      90,     0,   189,    64,    89,   194,    90,     0,     0,    84,
     199,   191,    89,   192,    90,     0,   208,     0,   192,    57,
     198,    89,   206,    90,     0,   192,   184,     0,   208,     0,
     193,   207,     0,   208,     0,   194,   205,     0,   198,     0,
     198,     0,   198,     0,   208,     0,   202,     0,   201,     0,
     208,     0,   202,     0,   208,     0,   202,     0,     3,     0,
       4,     0,     5,     0,   208,     0,   204,     0,   202,     0,
     204,   202,     0,     3,     0,     4,     0,     3,     0,     4,
       0,     5,     0,     3,     0,     4,     0,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   215,   217,   218,   219,   229,   231,   246,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   273,   296,   310,   310,   338,   340,
     622,   632,   632,   659,   661,   755,   763,   782,   782,   822,
     824,   834,   834,   846,   846,   891,   896,   900,   904,   908,
     908,   923,   924,   925,   933,   951,   956,   964,   981,   986,
     994,  1011,  1016,  1024,  1041,  1041,  1061,  1061,  1082,  1082,
    1103,  1105,  1175,  1187,  1192,  1199,  1205,  1218,  1225,  1238,
    1244,  1250,  1256,  1261,  1267,  1268,  1269,  1270,  1283,  1313,
    1315,  1336,  1336,  1352,  1354,  1355,  1356,  1357,  1358,  1359,
    1360,  1363,  1369,  1375,  1381,  1387,  1393,  1397,  1403,  1407,
    1409,  1430,  1430,  1449,  1451,  1452,  1453,  1454,  1457,  1463,
    1469,  1475,  1478,  1480,  1498,  1531,  1536,  1560,  1572,  1578,
    1594,  1594,  1613,  1613,  1632,  1632,  1651,  1651,  1670,  1670,
    1689,  1689,  1708,  1708,  1728,  1730,  1731,  1741,  1743,  1743,
    1764,  1765,  1766,  1767,  1768,  1769,  1770,  1771,  1843,  1845,
    1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,  1854,  1855,
    1861,  1862,  1925,  1927,  1928,  1929,  1930,  1931,  1932,  1933,
    1934,  1935,  1936,  2004,  2021,  2061,  2078,  2083,  2091,  2108,
    2113,  2121,  2138,  2154,  2185,  2203,  2223,  2243,  2249,  2259,
    2266,  2284,  2300,  2321,  2321,  2343,  2343,  2365,  2367,  2371,
    2375,  2379,  2383,  2397,  2397,  2418,  2420,  2432,  2445,  2445,
    2466,  2468,  2485,  2498,  2498,  2519,  2521,  2536,  2550,  2555,
    2568,  2573,  2586,  2607,  2628,  2654,  2660,  2671,  2683,  2689,
    2699,  2704,  2717,  2722,  2726,  2738,  2743,  2758,  2763,  2776,
    2778,  2792,  2799,  2805,  2821,  2830,  2836
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "NUMBER", "ULONG", "STRING", "BEZIERCURVE", 
  "BFACE", "BILLBOARD", "BILLBOARDCENTER", "BUNDLE", "CLOSED", "COLLIDE", 
  "COMMENT", "COMPONENT", "COORDSYSTEM", "CV", "DART", "DNORMAL", "DRGBA", 
  "DUV", "DXYZ", "DCS", "DISTANCE", "DTREF", "DYNAMICVERTEXPOOL", 
  "EXTERNAL_FILE", "FLIGHT", "GROUP", "HIP", "INTANGENT", "JOINT", 
  "KNOTS", "INCLUDE", "INSTANCE", "LINE", "LOOP", "MATERIAL", "MATRIX3", 
  "MATRIX4", "MODEL", "MREF", "NORMAL", "NURBSCURVE", "NURBSSURFACE", 
  "OBJECTTYPE", "ORDER", "OUTTANGENT", "POINTLIGHT", "POLYGON", "REF", 
  "RGBA", "ROTATE", "ROTX", "ROTY", "ROTZ", "SANIM", "SCALAR", "SCALE", 
  "SEQUENCE", "SHADING", "SWITCH", "SWITCHCONDITION", "TABLE", "TABLE_V", 
  "TAG", "TEXLIST", "TEXTURE", "TLENGTHS", "TRANSFORM", "TRANSLATE", 
  "TREF", "TRIANGLEFAN", "TRIANGLESTRIP", "TRIM", "TXT", "UKNOTS", "UV", 
  "VKNOTS", "VERTEX", "VERTEXANIM", "VERTEXPOOL", "VERTEXREF", "XFMANIM", 
  "XFMSANIM", "START_EGG", "START_GROUP_BODY", "START_TEXTURE_BODY", 
  "START_PRIMITIVE_BODY", "'{'", "'}'", "grammar", "egg", "node", 
  "coordsystem", "comment", "texture", "@1", "texture_body", "material", 
  "@2", "material_body", "external_reference", "vertex_pool", "@3", 
  "vertex_pool_body", "vertex", "@4", "@5", "vertex_body", "@6", 
  "vertex_uv_body", "vertex_normal_body", "vertex_color_body", "group", 
  "@7", "joint", "@8", "instance", "@9", "group_body", "cs_type", 
  "collide_flags", "transform_3d", "@10", "transform_3d_body", 
  "translate_3d", "rotx_3d", "roty_3d", "rotz_3d", "rotate_3d", 
  "scale_3d", "matrix4_3d", "matrix4_3d_body", "transform_2d", "@11", 
  "transform_2d_body", "translate_2d", "rotate_2d", "scale_2d", 
  "matrix3_2d", "matrix3_2d_body", "group_vertex_ref", 
  "group_vertex_membership", "switchcondition", "switchcondition_body", 
  "polygon", "@12", "trianglefan", "@13", "trianglestrip", "@14", 
  "point_light", "@15", "line", "@16", "nurbs_surface", "@17", 
  "nurbs_curve", "@18", "primitive_component_body", "primitive_body", 
  "@19", "nurbs_surface_body", "nurbs_curve_body", "primitive_tref_body", 
  "primitive_texture_body", "primitive_material_body", 
  "primitive_normal_body", "primitive_color_body", "primitive_bface_body", 
  "primitive_vertex_ref", "nurbs_surface_order_body", 
  "nurbs_surface_uknots_body", "nurbs_surface_vknots_body", 
  "nurbs_surface_trim_body", "nurbs_surface_trim_loop_body", 
  "nurbs_curve_order_body", "nurbs_curve_knots_body", "table", "@20", 
  "bundle", "@21", "table_body", "sanim", "@22", "sanim_body", "xfmanim", 
  "@23", "xfmanim_body", "xfm_s_anim", "@24", "xfm_s_anim_body", 
  "integer_list", "real_list", "texture_name", "material_name", 
  "vertex_pool_name", "required_name", "optional_name", "required_string", 
  "optional_string", "string", "repeated_string", "repeated_string_body", 
  "real", "real_or_string", "integer", "empty", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    91,    91,    91,    91,    92,    92,    93,    93,    93,
      93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
      93,    93,    93,    93,    94,    95,    97,    96,    98,    98,
      98,   100,    99,   101,   101,   102,   102,   104,   103,   105,
     105,   107,   106,   108,   106,   109,   109,   109,   109,   110,
     109,   109,   109,   109,   109,   111,   111,   111,   112,   112,
     112,   113,   113,   113,   115,   114,   117,   116,   119,   118,
     120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
     120,   120,   120,   120,   120,   120,   120,   120,   121,   122,
     122,   124,   123,   125,   125,   125,   125,   125,   125,   125,
     125,   126,   127,   128,   129,   130,   131,   131,   132,   133,
     133,   135,   134,   136,   136,   136,   136,   136,   137,   138,
     139,   140,   141,   141,   142,   143,   143,   144,   145,   145,
     147,   146,   149,   148,   151,   150,   153,   152,   155,   154,
     157,   156,   159,   158,   160,   160,   160,   161,   162,   161,
     161,   161,   161,   161,   161,   161,   161,   161,   163,   163,
     163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
     163,   163,   164,   164,   164,   164,   164,   164,   164,   164,
     164,   164,   164,   165,   166,   167,   168,   168,   168,   169,
     169,   169,   170,   171,   172,   173,   174,   175,   175,   176,
     176,   177,   178,   180,   179,   182,   181,   183,   183,   183,
     183,   183,   183,   185,   184,   186,   186,   186,   188,   187,
     189,   189,   189,   191,   190,   192,   192,   192,   193,   193,
     194,   194,   195,   196,   197,   198,   198,   199,   200,   200,
     201,   201,   202,   202,   202,   203,   203,   204,   204,   205,
     205,   206,   206,   206,   207,   207,   208
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     5,     0,     7,     1,     6,
       2,     0,     6,     1,     6,     5,     6,     0,     6,     1,
       2,     0,     5,     0,     6,     1,     2,     3,     4,     0,
       7,     5,     5,     8,     8,     2,     7,     7,     3,     8,
       8,     4,     9,     9,     0,     6,     0,     6,     0,     6,
       1,     6,     5,     7,     7,     5,     5,     5,     5,     5,
       5,     5,     6,     5,     2,     2,     2,     2,     1,     1,
       2,     0,     5,     1,     2,     2,     2,     2,     2,     2,
       2,     6,     4,     4,     4,     7,     6,     4,     4,     1,
      16,     0,     5,     1,     2,     2,     2,     2,     5,     4,
       5,     4,     1,     9,     9,     1,     6,     4,    11,    12,
       0,     6,     0,     6,     0,     6,     0,     6,     0,     6,
       0,     6,     0,     6,     1,     5,     5,     1,     0,     7,
       5,     5,     5,     2,     5,     5,     5,     6,     1,     5,
       5,     5,     2,     5,     5,     5,     5,     5,     5,     2,
       5,     6,     1,     5,     5,     5,     2,     5,     5,     5,
       5,     5,     6,     1,     1,     1,     3,     8,     8,     4,
       9,     9,     1,     8,     2,     1,     1,     1,     5,     1,
       2,     1,     1,     0,     6,     0,     6,     1,     2,     2,
       2,     2,     2,     0,     6,     1,     6,     5,     0,     6,
       1,     6,     5,     0,     6,     1,     6,     2,     1,     2,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,   256,   256,   256,   256,     1,     5,     2,    70,     3,
      28,     4,   147,   242,   243,   244,   256,     0,   256,   256,
     256,   256,   256,   256,   256,   256,   256,   256,   256,   256,
     256,   256,   256,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,     0,     0,     0,   256,     0,     0,     0,     0,   256,
       0,     0,   256,     0,    91,     0,    87,    84,    85,    86,
     256,   111,    30,     0,     0,     0,     0,     0,   256,     0,
       0,     0,   153,     0,   237,   241,   240,   256,     0,    64,
      66,    68,   138,     0,   236,   235,   142,   140,   136,   130,
     203,     0,   132,   134,    37,   256,     0,     0,     0,     0,
       0,     0,   256,     0,     0,     0,     0,     0,     0,   256,
       0,     0,     0,   254,   255,     0,   256,     0,     0,     0,
     256,   256,   256,   256,     0,   239,   238,   256,     0,     0,
       0,     0,    31,     0,     0,     0,     0,     0,   256,     0,
       0,     0,     0,     0,   249,   250,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   256,     0,
     256,   256,   228,     0,   256,     0,   192,   148,     0,   185,
     233,     0,     0,     0,     0,     0,     0,   184,     0,   183,
     232,     0,   247,     0,   246,   245,    24,     0,   256,   256,
     256,   256,   256,   256,   256,   256,   256,   256,    26,   256,
     256,   256,   256,    72,     0,   256,    88,    78,    77,    76,
      75,    81,    80,   251,   252,   253,     0,    79,     0,   127,
       0,    83,     0,    93,     0,   229,   125,     0,     0,   113,
     156,   256,   152,     0,   154,     0,     0,   155,     0,     0,
     151,   150,     0,    25,   248,    35,     0,     0,     0,     0,
       0,    33,     0,   172,     0,   158,     0,     0,     0,   207,
     256,     0,     0,     0,    39,     0,     0,     0,    89,    71,
       0,    82,     0,     0,     0,     0,     0,     0,     0,    92,
      94,    95,    96,    97,    98,    99,   100,     0,   256,    29,
       0,     0,     0,     0,   112,   115,   116,   117,   114,     0,
     144,     0,     0,   186,     0,     0,     0,   157,   256,    65,
      67,    69,   139,   256,    32,     0,     0,     0,     0,     0,
       0,   256,     0,     0,   143,   176,     0,     0,     0,     0,
       0,   256,     0,     0,     0,     0,     0,   141,   169,   162,
     137,   131,   256,   256,   256,   256,   204,   208,   209,   210,
     211,   212,     0,   133,   135,    41,    38,    40,    36,    73,
      74,    90,     0,   256,     0,     0,     0,     0,     0,     0,
     256,     0,   256,     0,     0,     0,     0,     0,   149,     0,
       0,     0,     0,   189,     0,   234,     0,     0,   256,   256,
       0,     0,     0,     0,   256,   256,     0,   256,     0,     0,
       0,     0,   256,   256,   256,   256,   256,   205,   213,   218,
     223,    27,     0,    43,     0,     0,     0,     0,   109,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   202,   230,     0,     0,     0,   201,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   197,     0,   195,     0,   196,     0,     0,
       0,     0,     0,     0,     0,     0,   108,     0,     0,   102,
     103,   104,   107,     0,     0,     0,     0,   121,     0,   119,
       0,     0,     0,     0,     0,     0,     0,     0,   193,     0,
     179,   181,   231,   175,   177,   180,   178,     0,   174,   173,
     165,   161,   163,   166,   194,   164,     0,   160,   159,     0,
     170,   167,   168,   256,   256,   256,   256,     0,    45,     0,
       0,     0,     0,     0,     0,     0,   124,   126,     0,   120,
     118,   145,   146,     0,     0,     0,     0,    34,   182,   171,
     256,     0,     0,   215,     0,   220,     0,   225,     0,     0,
       0,   256,    42,    46,     0,     0,     0,     0,     0,   106,
     101,     0,   188,   187,     0,     0,     0,   199,   206,   256,
       0,   214,   256,     0,   219,   256,   224,   227,     0,     0,
       0,     0,     0,    47,    44,     0,     0,     0,   105,     0,
     191,   190,   198,   200,     0,   256,     0,   256,     0,     0,
       0,     0,     0,     0,     0,    49,    48,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    51,
       0,     0,    52,     0,     0,   128,     0,     0,     0,     0,
     217,     0,   222,     0,     0,     0,     0,     0,    58,     0,
       0,     0,     0,     0,   129,     0,     0,   216,   221,   226,
       0,     0,     0,     0,     0,     0,    61,     0,    50,    55,
       0,   123,    54,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    60,    59,     0,     0,     0,
       0,     0,    63,    62,    57,    56,     0,     0,   110,     0,
       0,     0
};

static const short yydefgoto[] =
{
     719,     5,    66,    34,    35,    36,   270,     9,    37,   202,
     260,    38,    39,   151,   273,   367,   422,   483,   537,   644,
     662,   621,   623,    40,   138,    41,   139,    42,   140,     7,
     215,   277,    67,   118,   232,   290,   291,   292,   293,   294,
     295,   296,   426,    72,   121,   238,   305,   306,   307,   308,
     437,    68,   234,    69,   167,    43,   146,    44,   149,    45,
     150,    46,   145,    47,   141,    48,   144,    49,   143,   309,
      11,   241,   264,   262,   188,   186,   178,   181,   183,   175,
      82,   466,   474,   476,   472,   586,   457,   452,    50,   147,
     358,   478,   268,   359,   479,   562,   360,   480,   564,   361,
     481,   566,   171,   453,   189,   179,   394,   180,    83,   134,
      84,    94,   193,   194,   512,   226,   176,    95
};

static const short yypact[] =
{
     228,-32768,-32768,-32768,-32768,   541,-32768,  1225,-32768,   188,
  -32768,   550,-32768,-32768,-32768,-32768,   331,   -81,   331,   331,
     331,   331,   331,   331,   331,   331,   331,   331,   331,   331,
     331,   331,   331,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    21,   -29,   -28,   331,    68,    87,    91,   107,   331,
     145,   154,   331,   165,-32768,   169,-32768,-32768,-32768,-32768,
     331,-32768,-32768,   170,    28,   186,   189,   190,   331,   194,
     199,   200,-32768,   219,-32768,-32768,-32768,   331,   229,-32768,
  -32768,-32768,-32768,   231,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   232,-32768,-32768,-32768,   331,   331,   137,   236,   336,
     361,    28,   331,   239,    28,   158,   253,    28,   254,-32768,
     257,   265,    28,-32768,-32768,   282,   331,   137,   137,   283,
     331,   331,-32768,   331,   142,-32768,-32768,   331,   285,   287,
     290,   293,-32768,   294,   298,   304,   312,   313,   331,   314,
     315,   316,   317,   177,-32768,-32768,   137,   331,   180,   196,
     320,   321,   324,   325,   365,   330,   332,   334,   331,   335,
  -32768,    28,-32768,   365,-32768,   341,-32768,-32768,   342,-32768,
  -32768,    -9,   137,   -13,   137,   365,   344,-32768,   345,-32768,
  -32768,   152,-32768,   346,   331,-32768,-32768,   349,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   331,-32768,   137,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   350,-32768,   137,-32768,
     351,-32768,   305,-32768,   223,-32768,-32768,   353,   120,-32768,
  -32768,-32768,-32768,    47,-32768,   137,    75,-32768,   137,   359,
  -32768,-32768,   362,-32768,-32768,-32768,  1012,  1083,  1154,   179,
     110,-32768,   141,-32768,   310,-32768,   366,   371,   143,-32768,
  -32768,   452,   469,    80,-32768,   360,   364,    31,-32768,-32768,
     137,-32768,   368,   373,   374,   375,   378,   379,   380,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   381,   331,-32768,
     382,   383,   384,   386,-32768,-32768,-32768,-32768,-32768,   124,
  -32768,   331,   388,-32768,   331,   389,   137,-32768,   331,-32768,
  -32768,-32768,-32768,   331,-32768,   390,   391,   392,   393,   396,
     398,   331,   399,   400,-32768,-32768,   402,   403,   406,   407,
     408,   331,   409,   410,   412,   416,   423,-32768,-32768,-32768,
  -32768,-32768,   331,   331,   331,   331,-32768,-32768,-32768,-32768,
  -32768,-32768,   178,-32768,-32768,    28,-32768,-32768,-32768,-32768,
  -32768,-32768,   134,   137,   137,   137,   137,   137,   137,   137,
     331,   424,   137,   137,   137,   137,   425,   426,-32768,   137,
     137,   137,   137,-32768,   427,-32768,   432,    28,-32768,   331,
     137,    28,   137,   433,   331,   331,    28,   331,   137,    28,
     137,   435,   331,   331,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   436,-32768,   438,   202,   439,   137,-32768,   137,
     441,   442,   443,    25,   137,   445,   365,   447,   137,-32768,
     448,   137,   137,   137,   137,   137,   137,   137,   137,   449,
     365,   451,   453,   137,-32768,   458,     9,   459,-32768,    -7,
     365,   462,   463,   465,   468,    37,   470,    28,    19,   365,
     471,   472,    61,-32768,   475,   137,   478,   137,   481,   482,
     484,   485,   137,   488,   137,   490,-32768,   137,   137,-32768,
  -32768,-32768,-32768,   137,   137,   491,   493,-32768,   137,-32768,
     496,   497,    40,    34,   137,   137,   137,   137,-32768,   498,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   504,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   505,-32768,-32768,   507,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   197,   137,   137,
     137,   137,   137,   137,   508,   509,-32768,-32768,   137,-32768,
  -32768,-32768,-32768,   510,   512,   137,   137,-32768,-32768,-32768,
  -32768,   181,   192,-32768,   220,-32768,   138,-32768,    82,   516,
     521,   331,-32768,   137,   234,   137,   137,   137,   522,-32768,
  -32768,   137,-32768,-32768,   526,   529,   126,-32768,-32768,   331,
     531,-32768,   331,   534,-32768,   331,-32768,-32768,   331,   535,
     137,   137,   540,   137,-32768,   544,   137,   137,-32768,   137,
  -32768,-32768,-32768,-32768,   542,-32768,   546,-32768,   548,   137,
     137,    49,   137,    57,   137,-32768,-32768,   549,   551,   137,
     137,   365,    36,   365,    41,   365,   137,   137,    85,-32768,
     137,    99,-32768,   137,   137,-32768,   552,   137,   137,   553,
  -32768,   554,-32768,   555,   137,   137,   331,   557,-32768,   331,
     558,   137,    39,   137,-32768,   137,   137,-32768,-32768,-32768,
     559,   560,   137,   137,   137,   137,-32768,   130,-32768,-32768,
     137,-32768,-32768,-32768,   137,   137,   137,   137,   331,   564,
     137,   137,   137,   137,   137,   137,   137,   137,   565,   566,
     137,   137,   137,   137,   137,-32768,-32768,   567,   568,   569,
     570,   137,-32768,-32768,-32768,-32768,   137,   137,-32768,   455,
     528,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,   575,-32768,-32768,-32768,-32768,   327,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    72,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   191,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,  -263,-32768,-32768,
     121,-32768,-32768,-32768,  -395,  -227,  -198,  -352,  -260,  -373,
     -47,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -261,-32768,
  -32768,-32768,    97,    74,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   506,  -412,-32768,-32768,   268,    14,    44,  -107,
  -32768,    -5,   494,-32768,   302,  -131,    51,    92
};


#define	YYLAST		1307


static const short yytable[] =
{
      51,   348,    51,   475,   477,   163,   246,   357,    87,   243,
     462,    85,   246,    85,    85,    85,    85,    85,   471,    85,
      85,    85,    85,    85,   451,    85,    85,   243,   154,   155,
     197,   123,   124,   463,    13,    14,    15,    93,   246,   154,
     155,   208,   237,   101,   154,   155,   104,   105,   456,    85,
      13,    14,    15,   246,   249,   243,   465,    85,   243,   677,
     106,   107,    88,    89,    90,    91,    92,   638,    96,    97,
      98,    99,   100,   113,   102,   103,   641,   247,    13,    14,
      15,   244,   135,   516,   120,    13,    14,    15,    13,    14,
      15,   502,   129,     6,     8,    10,    12,   529,   108,   514,
      85,   153,    13,    14,    15,   275,   116,   135,    86,   525,
      86,    86,    86,    86,    86,   492,    86,    86,    86,    86,
      86,   370,    86,    86,   552,   125,   650,   522,   192,   678,
     551,   652,   135,    13,    14,    15,   311,   154,   155,   639,
     154,   155,   459,   135,   187,   190,    86,   642,   325,   152,
     468,   530,   216,   352,    86,   123,   124,   109,   300,   365,
     159,   161,   162,   192,   314,   165,   386,   323,   169,    24,
     366,   598,   301,   326,   656,   387,   110,   461,   302,   136,
     111,   166,   327,   328,   503,   470,    73,   329,   659,   254,
     303,   352,   330,    74,   353,   595,   112,    86,   331,   353,
     324,   455,   252,   632,   136,   634,    28,   135,   332,   464,
     304,   172,   333,   424,   388,   335,   612,   349,   568,   688,
      75,    76,   235,    81,   172,   195,   354,   355,   596,   136,
      77,   334,   196,   356,   114,    70,    78,   353,   312,   569,
     136,   315,   235,   115,    28,    70,    79,    71,   570,   589,
      80,    51,    51,    51,   117,   568,   590,    71,   119,   122,
     195,    81,   233,   236,   354,   355,   239,   213,   421,   322,
     217,   588,   371,   297,   571,   126,   569,   592,   127,   128,
     298,   485,   591,   130,   593,   570,   218,   572,   131,   132,
       8,     8,     8,    12,   261,   263,   265,    12,    12,   269,
     357,    12,    12,   274,   136,   496,   389,   278,   133,   391,
     594,   571,   381,     1,     2,     3,     4,   336,   137,   509,
     142,   148,   259,   613,   604,   157,   266,   267,   164,   517,
     271,   272,   395,   310,    13,    14,    15,   396,   526,   123,
     124,   158,   168,   170,   282,   403,   173,    85,    85,    85,
      85,   337,   338,    24,   174,   411,   339,   283,   284,   285,
     286,   340,    10,   287,   123,   124,   160,   341,   223,   224,
     225,   177,   185,    73,   198,   288,   199,   342,    73,   200,
      74,   343,   201,   203,   344,    74,   345,   204,   346,   256,
     257,   258,    81,   205,   395,   289,   417,   418,   419,   420,
     347,   206,   207,   209,   210,   211,   212,    75,    76,   156,
     219,   220,    75,    76,   221,   222,   423,    77,   187,   190,
     227,   228,    77,    78,   229,   231,   187,   190,    78,   182,
     184,   240,   242,    79,   250,   251,   253,    80,    79,   255,
     279,   281,    80,   299,    86,    86,    86,    86,    81,   317,
     368,   318,   458,    81,   369,   720,   350,   373,   214,    73,
     467,   351,   374,   375,   376,   428,    74,   377,   378,   379,
     380,   382,   383,   384,   439,   385,    73,   390,   392,   397,
     398,   399,   400,    74,   245,   401,   248,   402,   404,   405,
     454,   406,   407,    75,    76,   408,   409,   410,   412,   413,
     649,   414,   651,    77,   653,   415,   473,   454,   454,    78,
      75,    76,   416,   436,   443,   444,   276,   449,   524,    79,
      77,   450,   460,    80,   469,   482,    78,   484,   721,   486,
     280,   489,   490,   491,    81,   495,    79,   497,   499,   508,
      80,   510,   363,   511,    13,    14,    15,   313,   513,   515,
     316,    81,   518,   519,    16,   520,    17,    73,   521,   364,
     523,   527,   528,   599,    74,   531,    85,    18,   532,    19,
     533,   534,    20,   535,   536,    21,    22,   539,    23,   541,
      33,   546,   372,   547,    24,    25,   549,   550,   557,    26,
      27,    75,    76,   619,   558,   559,   560,   362,   579,   580,
     582,    77,   583,   614,    28,   600,   616,    78,    29,   618,
     601,   574,   608,    30,    31,   602,   610,    79,   393,   611,
     615,    80,    32,   617,   620,   269,   563,   565,   567,   625,
     561,   631,    81,   657,   627,   633,   660,   635,   191,   645,
     597,   646,   664,   667,   668,   669,   673,   675,   435,   682,
     683,   672,   587,   696,   674,   705,   706,   712,   713,   714,
     715,     0,   230,    86,     0,     0,     0,     0,     0,     0,
       0,     0,   689,     0,   425,   427,   429,   430,   431,   432,
     433,   434,     0,   695,   438,   440,   441,   442,     0,     0,
       0,   445,   446,   447,   448,     0,     0,     0,     0,     0,
       0,     0,   182,     0,   184,     0,     0,   454,     0,   454,
     182,     0,   184,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   487,
       0,   488,     0,     0,     0,   493,   494,     0,     0,     0,
     498,     0,     0,   500,   501,   182,   184,   504,   505,   506,
     507,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   538,     0,   540,     0,     0,   542,
     543,     0,     0,     0,     0,   544,   545,     0,     0,     0,
     548,     0,     0,     0,     0,     0,   553,   554,   555,   556,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     573,   538,   575,   576,   577,   578,     0,     0,     0,     0,
     581,     0,     0,     0,     0,     0,     0,   584,   585,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   603,     0,   605,   606,   607,
       0,     0,     0,   609,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   622,   624,     0,   626,     0,     0,   628,   629,
       0,   630,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   636,   637,     0,   640,     0,   643,     0,     0,     0,
       0,   647,   648,     0,     0,     0,     0,     0,   654,   655,
       0,     0,   658,     0,     0,   661,   663,     0,     0,   665,
     666,     0,     0,     0,     0,     0,   670,   671,     0,     0,
       0,     0,     0,   676,     0,   679,     0,   680,   681,     0,
       0,     0,     0,     0,   684,   685,   686,   687,     0,     0,
       0,     0,   690,     0,     0,     0,   691,   692,   693,   694,
       0,     0,   697,   698,   699,   700,   701,   702,   703,   704,
       0,     0,   707,   708,   709,   710,   711,     0,     0,     0,
       0,     0,     0,   716,     0,    13,    14,    15,   717,   718,
      52,    53,     0,     0,    54,    16,     0,    17,     0,    55,
       0,     0,     0,     0,    56,     0,     0,     0,    18,     0,
      19,     0,     0,    20,     0,     0,    21,    22,     0,    23,
       0,     0,    57,     0,     0,    24,    25,    58,     0,     0,
      26,    27,     0,     0,     0,     0,     0,     0,     0,    59,
       0,     0,     0,    60,    61,    28,     0,    62,    63,    29,
       0,    64,     0,     0,    30,    31,    13,    14,    15,     0,
       0,    52,    53,    32,    65,    54,    16,     0,    17,     0,
      55,     0,   319,     0,     0,    56,     0,     0,     0,    18,
       0,    19,     0,     0,    20,     0,     0,    21,    22,     0,
      23,     0,     0,    57,     0,     0,    24,    25,    58,     0,
       0,    26,    27,     0,     0,     0,     0,     0,     0,     0,
      59,     0,     0,     0,    60,    61,    28,     0,    62,    63,
      29,     0,    64,     0,     0,    30,    31,    13,    14,    15,
       0,     0,    52,    53,    32,    65,    54,    16,     0,    17,
       0,    55,     0,   320,     0,     0,    56,     0,     0,     0,
      18,     0,    19,     0,     0,    20,     0,     0,    21,    22,
       0,    23,     0,     0,    57,     0,     0,    24,    25,    58,
       0,     0,    26,    27,     0,     0,     0,     0,     0,     0,
       0,    59,     0,     0,     0,    60,    61,    28,     0,    62,
      63,    29,     0,    64,     0,     0,    30,    31,    13,    14,
      15,     0,     0,    52,    53,    32,    65,    54,    16,     0,
      17,     0,    55,     0,   321,     0,     0,    56,     0,     0,
       0,    18,     0,    19,     0,     0,    20,     0,     0,    21,
      22,     0,    23,     0,     0,    57,     0,     0,    24,    25,
      58,     0,     0,    26,    27,     0,     0,     0,     0,     0,
       0,     0,    59,     0,     0,     0,    60,    61,    28,     0,
      62,    63,    29,     0,    64,     0,     0,    30,    31,     0,
       0,     0,     0,     0,     0,     0,    32,    65
};

static const short yycheck[] =
{
       5,   264,     7,   415,   416,   112,    19,   268,    89,    18,
     405,    16,    19,    18,    19,    20,    21,    22,   413,    24,
      25,    26,    27,    28,   397,    30,    31,    18,     3,     4,
     137,     3,     4,   406,     3,     4,     5,    23,    19,     3,
       4,   148,   173,    29,     3,     4,    32,    26,   400,    54,
       3,     4,     5,    19,   185,    18,   408,    62,    18,    20,
      89,    89,    18,    19,    20,    21,    22,    18,    24,    25,
      26,    27,    28,    59,    30,    31,    19,    90,     3,     4,
       5,    90,    87,    90,    70,     3,     4,     5,     3,     4,
       5,   443,    78,     1,     2,     3,     4,    36,    54,    90,
     105,   106,     3,     4,     5,   212,    62,   112,    16,    90,
      18,    19,    20,    21,    22,    90,    24,    25,    26,    27,
      28,    90,    30,    31,    90,    74,    90,    90,   133,    90,
      90,    90,   137,     3,     4,     5,    89,     3,     4,    90,
       3,     4,   402,   148,   130,   131,    54,    90,     7,   105,
     410,    90,   157,    10,    62,     3,     4,    89,    38,    79,
     109,   110,   111,   168,    89,   114,    42,    57,   117,    43,
      90,    89,    52,    32,    89,    51,    89,   404,    58,    87,
      89,    23,    41,    42,   444,   412,     7,    46,    89,   194,
      70,    10,    51,    14,    56,    57,    89,   105,    57,    56,
      90,   399,    50,   615,   112,   617,    63,   212,    67,   407,
      90,   119,    71,    79,    90,   262,    90,   264,    21,    89,
      41,    42,   171,    82,   132,   133,    83,    84,    90,   137,
      51,    90,    90,    90,    89,    57,    57,    56,   243,    42,
     148,   246,   191,    89,    63,    57,    67,    69,    51,    57,
      71,   256,   257,   258,    89,    21,    64,    69,    89,    89,
     168,    82,   170,   171,    83,    84,   174,    90,    90,    90,
      90,    90,   277,    50,    77,    89,    42,    57,    89,    89,
      57,    79,    90,    89,    64,    51,    90,    90,    89,    89,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     561,   209,   210,   211,   212,   436,   311,   215,    89,   314,
      90,    77,   298,    85,    86,    87,    88,     7,    89,   450,
      89,    89,   201,   586,    90,    89,   205,   206,    89,   460,
     209,   210,   318,   241,     3,     4,     5,   323,   469,     3,
       4,     5,    89,    89,    39,   331,    89,   352,   353,   354,
     355,    41,    42,    43,    89,   341,    46,    52,    53,    54,
      55,    51,   270,    58,     3,     4,     5,    57,     3,     4,
       5,    89,    89,     7,    89,    70,    89,    67,     7,    89,
      14,    71,    89,    89,    74,    14,    76,    89,    78,   198,
     199,   200,    82,    89,   380,    90,   352,   353,   354,   355,
      90,    89,    89,    89,    89,    89,    89,    41,    42,   107,
      90,    90,    41,    42,    90,    90,   365,    51,   404,   405,
      90,    89,    51,    57,    90,    90,   412,   413,    57,   127,
     128,    90,    90,    67,    90,    90,    90,    71,    67,    90,
      90,    90,    71,    90,   352,   353,   354,   355,    82,    90,
      90,    89,   401,    82,    90,     0,    90,    89,   156,     7,
     409,    90,    89,    89,    89,   373,    14,    89,    89,    89,
      89,    89,    89,    89,   382,    89,     7,    89,    89,    89,
      89,    89,    89,    14,   182,    89,   184,    89,    89,    89,
     398,    89,    89,    41,    42,    89,    89,    89,    89,    89,
     631,    89,   633,    51,   635,    89,   414,   415,   416,    57,
      41,    42,    89,    89,    89,    89,   214,    90,   467,    67,
      51,    89,    89,    71,    89,    89,    57,    89,     0,    90,
     228,    90,    90,    90,    82,    90,    67,    90,    90,    90,
      71,    90,    90,    90,     3,     4,     5,   245,    90,    90,
     248,    82,    90,    90,    13,    90,    15,     7,    90,    90,
      90,    90,    90,   568,    14,    90,   571,    26,    90,    28,
      89,    89,    31,    89,    89,    34,    35,    89,    37,    89,
       5,    90,   280,    90,    43,    44,    90,    90,    90,    48,
      49,    41,    42,   598,    90,    90,    89,   270,    90,    90,
      90,    51,    90,   589,    63,    89,   592,    57,    67,   595,
      89,   539,    90,    72,    73,   571,    90,    67,   316,    90,
      89,    71,    81,    89,    89,   533,   534,   535,   536,    89,
     533,    89,    82,   638,    90,    89,   641,    89,   132,    90,
     566,    90,    90,    90,    90,    90,    89,    89,   380,    90,
      90,   656,   560,    89,   659,    90,    90,    90,    90,    90,
      90,    -1,   168,   571,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   677,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   688,   382,   383,   384,   385,    -1,    -1,
      -1,   389,   390,   391,   392,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   400,    -1,   402,    -1,    -1,   615,    -1,   617,
     408,    -1,   410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   427,
      -1,   429,    -1,    -1,    -1,   433,   434,    -1,    -1,    -1,
     438,    -1,    -1,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   482,    -1,   484,    -1,    -1,   487,
     488,    -1,    -1,    -1,    -1,   493,   494,    -1,    -1,    -1,
     498,    -1,    -1,    -1,    -1,    -1,   504,   505,   506,   507,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,    -1,    -1,
     548,    -1,    -1,    -1,    -1,    -1,    -1,   555,   556,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   573,    -1,   575,   576,   577,
      -1,    -1,    -1,   581,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   600,   601,    -1,   603,    -1,    -1,   606,   607,
      -1,   609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   619,   620,    -1,   622,    -1,   624,    -1,    -1,    -1,
      -1,   629,   630,    -1,    -1,    -1,    -1,    -1,   636,   637,
      -1,    -1,   640,    -1,    -1,   643,   644,    -1,    -1,   647,
     648,    -1,    -1,    -1,    -1,    -1,   654,   655,    -1,    -1,
      -1,    -1,    -1,   661,    -1,   663,    -1,   665,   666,    -1,
      -1,    -1,    -1,    -1,   672,   673,   674,   675,    -1,    -1,
      -1,    -1,   680,    -1,    -1,    -1,   684,   685,   686,   687,
      -1,    -1,   690,   691,   692,   693,   694,   695,   696,   697,
      -1,    -1,   700,   701,   702,   703,   704,    -1,    -1,    -1,
      -1,    -1,    -1,   711,    -1,     3,     4,     5,   716,   717,
       8,     9,    -1,    -1,    12,    13,    -1,    15,    -1,    17,
      -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,    26,    -1,
      28,    -1,    -1,    31,    -1,    -1,    34,    35,    -1,    37,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    -1,
      48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    61,    62,    63,    -1,    65,    66,    67,
      -1,    69,    -1,    -1,    72,    73,     3,     4,     5,    -1,
      -1,     8,     9,    81,    82,    12,    13,    -1,    15,    -1,
      17,    -1,    90,    -1,    -1,    22,    -1,    -1,    -1,    26,
      -1,    28,    -1,    -1,    31,    -1,    -1,    34,    35,    -1,
      37,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      -1,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      57,    -1,    -1,    -1,    61,    62,    63,    -1,    65,    66,
      67,    -1,    69,    -1,    -1,    72,    73,     3,     4,     5,
      -1,    -1,     8,     9,    81,    82,    12,    13,    -1,    15,
      -1,    17,    -1,    90,    -1,    -1,    22,    -1,    -1,    -1,
      26,    -1,    28,    -1,    -1,    31,    -1,    -1,    34,    35,
      -1,    37,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    -1,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    57,    -1,    -1,    -1,    61,    62,    63,    -1,    65,
      66,    67,    -1,    69,    -1,    -1,    72,    73,     3,     4,
       5,    -1,    -1,     8,     9,    81,    82,    12,    13,    -1,
      15,    -1,    17,    -1,    90,    -1,    -1,    22,    -1,    -1,
      -1,    26,    -1,    28,    -1,    -1,    31,    -1,    -1,    34,
      35,    -1,    37,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    -1,    48,    49,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    57,    -1,    -1,    -1,    61,    62,    63,    -1,
      65,    66,    67,    -1,    69,    -1,    -1,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    82
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 6:
#line 232 "parser.yxx"
{
  assert(!egg_stack.empty());
  DCAST(EggData, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 24:
#line 275 "parser.yxx"
{
  string strval = yyvsp[-1]._string;
  EggCoordinateSystem *cs = new EggCoordinateSystem;

  CoordinateSystem f = parse_coordinate_system_string(strval);
  if (f == CS_invalid) {
    eggyywarning("Unknown coordinate system " + strval);
  } else {
    cs->set_value(f);
  }
  yyval._egg = cs;
}
    break;
case 25:
#line 298 "parser.yxx"
{
  yyval._egg = new EggComment(yyvsp[-3]._string, yyvsp[-1]._string);
}
    break;
case 26:
#line 312 "parser.yxx"
{
  string tref_name = yyvsp[-2]._string;
  Filename filename = yyvsp[0]._string;
  EggTexture *texture = new EggTexture(tref_name, filename);

  if (textures.find(tref_name) != textures.end()) {
    eggyywarning("Duplicate texture name " + tref_name);
  }
  textures[tref_name] = texture;

  egg_stack.push_back(texture);
}
    break;
case 27:
#line 325 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 29:
#line 341 "parser.yxx"
{
  EggTexture *texture = DCAST(EggTexture, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "format") == 0) {
    EggTexture::Format f = EggTexture::string_format(strval);
    if (f == EggTexture::F_unspecified) {
      eggyywarning("Unknown texture format " + strval);
    } else {
      texture->set_format(f);
    }

  } else if (cmp_nocase_uh(name, "wrap") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_mode(w);
    }

  } else if (cmp_nocase_uh(name, "wrapu") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_u(w);
    }

  } else if (cmp_nocase_uh(name, "wrapv") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_v(w);
    }

  } else if (cmp_nocase_uh(name, "minfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_minfilter(f);
    }

  } else if (cmp_nocase_uh(name, "magfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_magfilter(f);
    }

  } else if (cmp_nocase_uh(name, "anisotropic_degree") == 0) {
    texture->set_anisotropic_degree((int)value);

  } else if (cmp_nocase_uh(name, "envtype") == 0) {
    EggTexture::EnvType e = EggTexture::string_env_type(strval);
    if (e == EggTexture::ET_unspecified) {
      eggyywarning("Unknown texture env type " + strval);
    } else {
      texture->set_env_type(e);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb") == 0) {
    EggTexture::CombineMode cm = EggTexture::string_combine_mode(strval);
    if (cm == EggTexture::CM_unspecified) {
      eggyywarning("Unknown combine mode " + strval);
    } else {
      texture->set_combine_mode(EggTexture::CC_rgb, cm);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source0") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 0, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand0") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 0, co);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source1") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 1, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand1") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 1, co);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source2") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 2, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand2") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 2, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha") == 0) {
    EggTexture::CombineMode cm = EggTexture::string_combine_mode(strval);
    if (cm == EggTexture::CM_unspecified) {
      eggyywarning("Unknown combine mode " + strval);
    } else {
      texture->set_combine_mode(EggTexture::CC_alpha, cm);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source0") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 0, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand0") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 0, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source1") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 1, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand1") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 1, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source2") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 2, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand2") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 2, co);
    }

  } else if (cmp_nocase_uh(name, "tex_gen") == 0) {
    EggTexture::TexGen tex_gen = EggTexture::string_tex_gen(strval);
    if (tex_gen == EggTexture::TG_unspecified) {
      eggyywarning("Unknown texture env type " + strval);
    } else {
      texture->set_tex_gen(tex_gen);
    }

  } else if (cmp_nocase_uh(name, "stage_name") == 0) {
    texture->set_stage_name(strval);

  } else if (cmp_nocase_uh(name, "priority") == 0) {
    texture->set_priority((int)value);

  } else if (cmp_nocase_uh(name, "blendr") == 0) {
    Colorf color = texture->get_color();
    color[0] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blendg") == 0) {
    Colorf color = texture->get_color();
    color[1] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blendb") == 0) {
    Colorf color = texture->get_color();
    color[2] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blenda") == 0) {
    Colorf color = texture->get_color();
    color[3] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "uv_name") == 0) {
    texture->set_uv_name(strval);

  } else if (cmp_nocase_uh(name, "rgb_scale") == 0) {
    int int_value = (int)value;
    if (int_value != 1 && int_value != 2 && int_value != 4) {
      eggyyerror("Invalid rgb-scale value " + strval);
    } else {
      texture->set_rgb_scale(int_value);
    }

  } else if (cmp_nocase_uh(name, "alpha_scale") == 0) {
    int int_value = (int)value;
    if (int_value != 1 && int_value != 2 && int_value != 4) {
      eggyyerror("Invalid alpha-scale value " + strval);
    } else {
      texture->set_alpha_scale(int_value);
    }

  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      texture->set_alpha_mode(a);
    }

  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      texture->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      texture->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      texture->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    texture->set_draw_order((int)value);

  } else if (cmp_nocase_uh(name, "bin") == 0) {
    texture->set_bin(strval);

  } else if (cmp_nocase_uh(name, "alpha_file") == 0) {
    texture->set_alpha_filename(strval);

  } else if (cmp_nocase_uh(name, "alpha_file_channel") == 0) {
    texture->set_alpha_file_channel((int)value);

  } else {
    eggyywarning("Unsupported texture scalar: " + name);
  }
}
    break;
case 31:
#line 634 "parser.yxx"
{
  string mref_name = yyvsp[-1]._string;
  EggMaterial *material = new EggMaterial(mref_name);

  if (materials.find(mref_name) != materials.end()) {
    eggyywarning("Duplicate material name " + mref_name);
  }
  materials[mref_name] = material;

  egg_stack.push_back(material);
}
    break;
case 32:
#line 646 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 34:
#line 662 "parser.yxx"
{
  EggMaterial *material = DCAST(EggMaterial, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "diffr") == 0) {
    Colorf diff = material->get_diff();
    diff[0] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffg") == 0) {
    Colorf diff = material->get_diff();
    diff[1] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffb") == 0) {
    Colorf diff = material->get_diff();
    diff[2] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffa") == 0) {
    Colorf diff = material->get_diff();
    diff[3] = value;
    material->set_diff(diff);

  } else if (cmp_nocase_uh(name, "ambr") == 0) {
    Colorf amb = material->get_amb();
    amb[0] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambg") == 0) {
    Colorf amb = material->get_amb();
    amb[1] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambb") == 0) {
    Colorf amb = material->get_amb();
    amb[2] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "amba") == 0) {
    Colorf amb = material->get_amb();
    amb[3] = value;
    material->set_amb(amb);

  } else if (cmp_nocase_uh(name, "emitr") == 0) {
    Colorf emit = material->get_emit();
    emit[0] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitg") == 0) {
    Colorf emit = material->get_emit();
    emit[1] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitb") == 0) {
    Colorf emit = material->get_emit();
    emit[2] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emita") == 0) {
    Colorf emit = material->get_emit();
    emit[3] = value;
    material->set_emit(emit);

  } else if (cmp_nocase_uh(name, "specr") == 0) {
    Colorf spec = material->get_spec();
    spec[0] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specg") == 0) {
    Colorf spec = material->get_spec();
    spec[1] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specb") == 0) {
    Colorf spec = material->get_spec();
    spec[2] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "speca") == 0) {
    Colorf spec = material->get_spec();
    spec[3] = value;
    material->set_spec(spec);

  } else if (cmp_nocase_uh(name, "shininess") == 0) {
    material->set_shininess(value);

  } else if (cmp_nocase_uh(name, "local") == 0) {
    material->set_local(value != 0.0);

  } else {
    eggyywarning("Unsupported material scalar: " + name);
  }
}
    break;
case 35:
#line 757 "parser.yxx"
{
  string node_name = yyvsp[-3]._string;
  Filename filename = yyvsp[-1]._string;
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  yyval._egg = ref;
}
    break;
case 36:
#line 764 "parser.yxx"
{
  if (cmp_nocase_uh(yyvsp[-5]._string, "group") != 0) {
    eggyyerror("keyword 'group' expected");
  }
  string node_name = yyvsp[-3]._string;
  Filename filename = yyvsp[-1]._string;
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  yyval._egg = ref;
}
    break;
case 37:
#line 784 "parser.yxx"
{
  string name = yyvsp[0]._string;
  EggVertexPool *pool = NULL;

  VertexPools::const_iterator vpi = vertex_pools.find(name);
  if (vpi != vertex_pools.end()) {
    pool = (*vpi).second;
    if (pool->has_defined_vertices()) {
      eggyywarning("Duplicate vertex pool name " + name);
      pool = new EggVertexPool(name);
      // The egg syntax starts counting at 1 by convention.
      pool->set_highest_index(0);
      vertex_pools[name] = pool;
    }
  } else {
    pool = new EggVertexPool(name);
    // The egg syntax starts counting at 1 by convention.
    pool->set_highest_index(0);
    vertex_pools[name] = pool;
  }

  egg_stack.push_back(pool);
}
    break;
case 38:
#line 808 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 41:
#line 836 "parser.yxx"
{
  egg_stack.push_back(new EggVertex);
}
    break;
case 42:
#line 840 "parser.yxx"
{
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  DCAST(EggVertexPool, egg_stack.back())->add_vertex(vtx);
}
    break;
case 43:
#line 847 "parser.yxx"
{
  vertex_index = (int)yyvsp[0]._number;
  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());

  if (vertex_index < 0) {
    ostringstream errmsg;
    errmsg << "Ignoring invalid vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;

  } else if (pool->has_vertex(vertex_index)) {
    ostringstream errmsg;
    errmsg << "Ignoring duplicate vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;
  }

  // Even if we didn't like the vertex index number, we still need to
  // go ahead and parse the vertex.  We just won't save it.

  egg_stack.push_back(new EggVertex);
}
    break;
case 44:
#line 872 "parser.yxx"
{
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());
  if (vertex_index != -1) {
    pool->add_vertex(vtx, vertex_index);
  }
}
    break;
case 45:
#line 893 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(yyvsp[0]._number);
}
    break;
case 46:
#line 897 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint2d(yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 47:
#line 901 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint3d(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 48:
#line 905 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint4d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 49:
#line 909 "parser.yxx"
{
  EggVertex *vertex = DCAST(EggVertex, egg_stack.back());
  EggVertexUV *uv = new EggVertexUV(yyvsp[-1]._string, TexCoordd::zero());
  egg_stack.push_back(uv);
  if (vertex->has_uv(yyvsp[-1]._string)) {
    eggyywarning("Ignoring repeated UV name " + yyvsp[-1]._string);
  } else {
    vertex->set_uv_obj(uv);
  }
}
    break;
case 50:
#line 920 "parser.yxx"
{
  egg_stack.pop_back();
}
    break;
case 53:
#line 926 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;
case 54:
#line 934 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
}
    break;
case 55:
#line 953 "parser.yxx"
{
  DCAST(EggVertexUV, egg_stack.back())->set_uv(TexCoordd(yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 56:
#line 957 "parser.yxx"
{
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-4]._string, LVector2d(yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
}
    break;
case 57:
#line 965 "parser.yxx"
{
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-3]._string, LVector2d(yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-3]._string);
  }
}
    break;
case 58:
#line 983 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_normal(Normald(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 59:
#line 987 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;
case 60:
#line 995 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
}
    break;
case 61:
#line 1013 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_color(Colorf(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 62:
#line 1017 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-6]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-6]._string);
  }
}
    break;
case 63:
#line 1025 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-5]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;
case 64:
#line 1043 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  egg_stack.push_back(group);
}
    break;
case 65:
#line 1048 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 66:
#line 1063 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  group->set_group_type(EggGroup::GT_joint);
  egg_stack.push_back(group);
}
    break;
case 67:
#line 1069 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 68:
#line 1084 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  group->set_group_type(EggGroup::GT_instance);
  egg_stack.push_back(group);
}
    break;
case 69:
#line 1090 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 71:
#line 1106 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  unsigned long ulong_value = yyvsp[-1]._ulong;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    group->set_switch_fps(value);
  } else if (cmp_nocase_uh(name, "no_fog") == 0) {
    group->set_nofog_flag(value != 0);
  } else if (cmp_nocase_uh(name, "decal") == 0) {
    group->set_decal_flag(value != 0);
  } else if (cmp_nocase_uh(name, "direct") == 0) {
    group->set_direct_flag(value != 0);
  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      group->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      group->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      group->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      group->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    group->set_draw_order(ulong_value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    group->set_bin(strval);
  } else if (cmp_nocase_uh(name, "collide_mask") == 0) {
    group->set_collide_mask(group->get_collide_mask() | ulong_value);
  } else if (cmp_nocase_uh(name, "from_collide_mask") == 0) {
    group->set_from_collide_mask(group->get_from_collide_mask() | ulong_value);
  } else if (cmp_nocase_uh(name, "into_collide_mask") == 0) {
    group->set_into_collide_mask(group->get_into_collide_mask() | ulong_value);
  } else if (cmp_nocase_uh(name, "portal") == 0) {
    group->set_portal_flag(value != 0);
  } else if (cmp_nocase_uh(name, "polylight") == 0) {
    group->set_polylight_flag(value != 0);
  } else if (cmp_nocase_uh(name, "indexed") == 0) {
    group->set_indexed_flag(value != 0);
  } else {
    eggyywarning("Unknown group scalar " + name);
  }
}
    break;
case 72:
#line 1176 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::BillboardType f = EggGroup::string_billboard_type(strval);
  if (f == EggGroup::BT_none) {
    eggyywarning("Unknown billboard type " + strval);
  } else {
    group->set_billboard_type(f);
  }
}
    break;
case 73:
#line 1188 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_billboard_center(LPoint3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
}
    break;
case 74:
#line 1193 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = yyvsp[-4]._string;

  group->set_collision_name(name);
}
    break;
case 75:
#line 1200 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_dcs_type(value!=0 ? EggGroup::DC_default : EggGroup::DC_none);
}
    break;
case 76:
#line 1206 "parser.yxx"
{
  // The special flavor of DCS, with { sync } or { nosync }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::DCSType f = EggGroup::string_dcs_type(strval);
  if (f == EggGroup::DC_unspecified) {
    eggyywarning("Unknown DCS type " + strval);
  } else {
    group->set_dcs_type(f);
  }
}
    break;
case 77:
#line 1219 "parser.yxx"
{
  // The traditional flavor of DART, with { 0 } or { 1 }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_dart_type(value!=0 ? EggGroup::DT_default : EggGroup::DT_none);
}
    break;
case 78:
#line 1226 "parser.yxx"
{
  // The special flavor of DART, with { sync } or { nosync }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::DartType f = EggGroup::string_dart_type(strval);
  if (f == EggGroup::DT_none) {
    eggyywarning("Unknown dart type " + strval);
  } else {
    group->set_dart_type(f);
  }
}
    break;
case 79:
#line 1239 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_switch_flag(value!=0);
}
    break;
case 80:
#line 1245 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string type = yyvsp[-1]._string;
  group->add_object_type(type);
}
    break;
case 81:
#line 1251 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_model_flag(value!=0);
}
    break;
case 82:
#line 1257 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_tag(yyvsp[-3]._string, yyvsp[-1]._string);
}
    break;
case 83:
#line 1262 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_texlist_flag(value!=0);
}
    break;
case 87:
#line 1271 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 88:
#line 1285 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[0]._string;

  EggGroup::CollisionSolidType f = EggGroup::string_cs_type(strval);
  if (f == EggGroup::CST_none) {
    eggyywarning("Unknown collision solid type " + strval);
  } else {
    if (f == EggGroup::CST_polyset && group->get_cs_type() != EggGroup::CST_none) {
      // By convention, a CST_polyset doesn't replace any existing
      // contradictory type, so ignore it if this happens.  This
      // allows the artist to place, for instance, <ObjectType> {
      // sphere } and <ObjectType> { trigger } together.

    } else {
      group->set_cs_type(f);
    }
  }
}
    break;
case 90:
#line 1316 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[0]._string;

  EggGroup::CollideFlags f = EggGroup::string_collide_flags(strval);
  if (f == EggGroup::CF_none) {
    eggyywarning("Unknown collision flag " + strval);
  } else {
    group->set_collide_flags(group->get_collide_flags() | f);
  }
}
    break;
case 91:
#line 1338 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->clear_transform();
}
    break;
case 101:
#line 1364 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_translate(LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
}
    break;
case 102:
#line 1370 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_rotx(yyvsp[-1]._number);
}
    break;
case 103:
#line 1376 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_roty(yyvsp[-1]._number);
}
    break;
case 104:
#line 1382 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_rotz(yyvsp[-1]._number);
}
    break;
case 105:
#line 1388 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_rotate(yyvsp[-4]._number, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
}
    break;
case 106:
#line 1394 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_scale(LVecBase3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
}
    break;
case 107:
#line 1398 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_uniform_scale(yyvsp[-1]._number);
}
    break;
case 110:
#line 1413 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_matrix
    (LMatrix4d(yyvsp[-15]._number, yyvsp[-14]._number, yyvsp[-13]._number, yyvsp[-12]._number,
               yyvsp[-11]._number, yyvsp[-10]._number, yyvsp[-9]._number, yyvsp[-8]._number,
               yyvsp[-7]._number, yyvsp[-6]._number, yyvsp[-5]._number, yyvsp[-4]._number,
               yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 111:
#line 1432 "parser.yxx"
{
  matrix_2d = LMatrix3d::ident_mat();
}
    break;
case 112:
#line 1436 "parser.yxx"
{
  DCAST(EggTexture, egg_stack.back())->set_transform(matrix_2d);
}
    break;
case 118:
#line 1458 "parser.yxx"
{
  matrix_2d *= LMatrix3d::translate_mat(yyvsp[-2]._number, yyvsp[-1]._number);
}
    break;
case 119:
#line 1464 "parser.yxx"
{
  matrix_2d *= LMatrix3d::rotate_mat(yyvsp[-1]._number);
}
    break;
case 120:
#line 1470 "parser.yxx"
{
  matrix_2d *= LMatrix3d::scale_mat(yyvsp[-2]._number, yyvsp[-1]._number);
}
    break;
case 123:
#line 1483 "parser.yxx"
{
  matrix_2d *= LMatrix3d(yyvsp[-8]._number, yyvsp[-7]._number, yyvsp[-6]._number,
                         yyvsp[-5]._number, yyvsp[-4]._number, yyvsp[-3]._number,
                         yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number);
}
    break;
case 124:
#line 1500 "parser.yxx"
{
  if (yyvsp[-2]._egg != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, yyvsp[-2]._egg);
    EggGroup *group = DCAST(EggGroup, egg_stack.back());
    PTA_double nums = yyvsp[-6]._number_list;
    double membership = yyvsp[-5]._number;

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_forward_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        group->ref_vertex(vertex, membership);
      }
    }
  }
}
    break;
case 125:
#line 1533 "parser.yxx"
{
  yyval._number = 1.0;
}
    break;
case 126:
#line 1537 "parser.yxx"
{
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  double result = yyvsp[-5]._number;
  
  if (cmp_nocase_uh(name, "membership") == 0) {
    result = value;
  } else {
    eggyywarning("Unknown group vertex scalar " + name);
  }

  yyval._number = result;
}
    break;
case 128:
#line 1574 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance(yyvsp[-8]._number, yyvsp[-7]._number, LPoint3d(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number)));
}
    break;
case 129:
#line 1579 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance(yyvsp[-9]._number, yyvsp[-8]._number, LPoint3d(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number), yyvsp[-7]._number));
}
    break;
case 130:
#line 1596 "parser.yxx"
{
  egg_stack.push_back(new EggPolygon(yyvsp[0]._string));
}
    break;
case 131:
#line 1600 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 132:
#line 1615 "parser.yxx"
{
  egg_stack.push_back(new EggTriangleFan(yyvsp[0]._string));
}
    break;
case 133:
#line 1619 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 134:
#line 1634 "parser.yxx"
{
  egg_stack.push_back(new EggTriangleStrip(yyvsp[0]._string));
}
    break;
case 135:
#line 1638 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 136:
#line 1653 "parser.yxx"
{
  egg_stack.push_back(new EggPoint(yyvsp[0]._string));
}
    break;
case 137:
#line 1657 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 138:
#line 1672 "parser.yxx"
{
  egg_stack.push_back(new EggLine(yyvsp[0]._string));
}
    break;
case 139:
#line 1676 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 140:
#line 1691 "parser.yxx"
{
  egg_stack.push_back(new EggNurbsSurface(yyvsp[0]._string));
}
    break;
case 141:
#line 1695 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 142:
#line 1710 "parser.yxx"
{
  egg_stack.push_back(new EggNurbsCurve(yyvsp[0]._string));
}
    break;
case 143:
#line 1714 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 148:
#line 1744 "parser.yxx"
{
  if (!egg_stack.back()->is_of_type(EggCompositePrimitive::get_class_type())) {
    eggyyerror("Not a composite primitive; components are not allowed here.");
  } else {
    PT(EggCompositePrimitive) comp = DCAST(EggCompositePrimitive, egg_stack.back());
    if (yyvsp[-1]._number < 0 || yyvsp[-1]._number >= comp->get_num_components()) {
      eggyyerror("Invalid component number");
    }
  }
  // We temporarily add an EggPolygon to the stack, just to receive
  // the component attributes.
  egg_stack.push_back(new EggPolygon);
}
    break;
case 149:
#line 1758 "parser.yxx"
{
  PT(EggPrimitive) prim = DCAST(EggPrimitive, egg_stack.back());
  egg_stack.pop_back();
  PT(EggCompositePrimitive) comp = DCAST(EggCompositePrimitive, egg_stack.back());
  comp->set_component((int)yyvsp[-4]._number, prim);
}
    break;
case 157:
#line 1772 "parser.yxx"
{
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "thick") == 0) {
    if (primitive->is_of_type(EggLine::get_class_type())) {
      DCAST(EggLine, primitive)->set_thick(value);
    } else if (primitive->is_of_type(EggPoint::get_class_type())) {
      DCAST(EggPoint, primitive)->set_thick(value);
    } else {
      eggyywarning("scalar thick is only meaningful for points and lines.");
    }
  } else if (cmp_nocase_uh(name, "perspective") == 0) {
    if (primitive->is_of_type(EggPoint::get_class_type())) {
      DCAST(EggPoint, primitive)->set_perspective(value != 0);
    } else {
      eggyywarning("scalar perspective is only meaningful for points.");
    }
  } else {
    eggyywarning("Unknown scalar " + name);
  }
}
    break;
case 169:
#line 1856 "parser.yxx"
{
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, yyvsp[0]._egg);
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_curves_on_surface.push_back(curve);
}
    break;
case 171:
#line 1863 "parser.yxx"
{
  EggNurbsSurface *primitive = DCAST(EggNurbsSurface, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "u_subdiv") == 0) {
    primitive->set_u_subdiv((int)value);
  } else if (cmp_nocase_uh(name, "v_subdiv") == 0) {
    primitive->set_v_subdiv((int)value);
  } else {
    eggyywarning("Unknown scalar " + name);
  }
}
    break;
case 182:
#line 1937 "parser.yxx"
{
  EggNurbsCurve *primitive = DCAST(EggNurbsCurve, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "subdiv") == 0) {
    primitive->set_subdiv((int)value);
  } else if (cmp_nocase_uh(name, "type") == 0) {
    EggCurve::CurveType a = EggCurve::string_curve_type(strval);
    if (a == EggCurve::CT_none) {
      eggyywarning("Unknown curve type " + strval);
    } else {
      primitive->set_curve_type(a);
    }
    
  } else {
    eggyywarning("Unknown scalar " + name);
  }
}
    break;
case 183:
#line 2006 "parser.yxx"
{
  if (yyvsp[0]._egg != (EggTexture *)NULL) {
    EggTexture *texture = DCAST(EggTexture, yyvsp[0]._egg);
    DCAST(EggPrimitive, egg_stack.back())->add_texture(texture);
  }
}
    break;
case 184:
#line 2023 "parser.yxx"
{
  EggTexture *texture = NULL;

  // Defining a texture on-the-fly.
  Filename filename = yyvsp[0]._string;
  string tref_name = filename.get_basename();

  Textures::iterator vpi = textures.find(tref_name);
  if (vpi == textures.end()) {
    // The texture was not yet defined.  Define it.
    texture = new EggTexture(tref_name, filename);
    textures[tref_name] = texture;

    if (egg_top_node != NULL) {
      egg_top_node->add_child(texture);
    }

  } else {
    // The texture already existed.  Use it.
    texture = (*vpi).second;
    if (filename != texture->get_filename()) {
      eggyywarning(string("Using previous path: ") + 
                   texture->get_filename().get_fullpath());
    }
  }

  nassertr(texture != NULL, 0);
  DCAST(EggPrimitive, egg_stack.back())->add_texture(texture);
}
    break;
case 185:
#line 2063 "parser.yxx"
{
  if (yyvsp[0]._egg != (EggMaterial *)NULL) {
    EggMaterial *material = DCAST(EggMaterial, yyvsp[0]._egg);
    DCAST(EggPrimitive, egg_stack.back())->set_material(material);
  }
}
    break;
case 186:
#line 2080 "parser.yxx"
{
  DCAST(EggPrimitive, egg_stack.back())->set_normal(Normald(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 187:
#line 2084 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;
case 188:
#line 2092 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
}
    break;
case 189:
#line 2110 "parser.yxx"
{
  DCAST(EggPrimitive, egg_stack.back())->set_color(Colorf(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;
case 190:
#line 2114 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-6]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-6]._string);
  }
}
    break;
case 191:
#line 2122 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-5]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;
case 192:
#line 2140 "parser.yxx"
{
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  int value = (int)yyvsp[0]._number;
  primitive->set_bface_flag(value!=0);
}
    break;
case 193:
#line 2156 "parser.yxx"
{
  if (yyvsp[-2]._egg != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, yyvsp[-2]._egg);
    EggPrimitive *prim = DCAST(EggPrimitive, egg_stack.back());
    PTA_double nums = yyvsp[-5]._number_list;

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_forward_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        prim->add_vertex(vertex);
      }
    }
  }
}
    break;
case 194:
#line 2187 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  int u_order = (int)yyvsp[-1]._number;
  int v_order = (int)yyvsp[0]._number;
  nurbs->set_u_order(u_order);
  nurbs->set_v_order(v_order);
}
    break;
case 195:
#line 2205 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_u_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_u_knot(i, nums[i]);
  }
}
    break;
case 196:
#line 2225 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_v_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_v_knot(i, nums[i]);
  }
}
    break;
case 197:
#line 2245 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_trims.push_back(EggNurbsSurface::Trim());
}
    break;
case 199:
#line 2261 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nurbs->_trims.back().push_back(EggNurbsSurface::Loop());
}
    break;
case 200:
#line 2267 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nassertr(!nurbs->_trims.back().empty(), 0);
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, yyvsp[0]._egg); 
  nurbs->_trims.back().back().push_back(curve);
}
    break;
case 201:
#line 2286 "parser.yxx"
{
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  int order = (int)yyvsp[0]._number;
  nurbs->set_order(order);
}
    break;
case 202:
#line 2302 "parser.yxx"
{
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_knot(i, nums[i]);
  }
}
    break;
case 203:
#line 2323 "parser.yxx"
{
  EggTable *table = new EggTable(yyvsp[0]._string);
  table->set_table_type(EggTable::TT_table);
  egg_stack.push_back(table);
}
    break;
case 204:
#line 2329 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 205:
#line 2345 "parser.yxx"
{
  EggTable *table = new EggTable(yyvsp[0]._string);
  table->set_table_type(EggTable::TT_bundle);
  egg_stack.push_back(table);
}
    break;
case 206:
#line 2351 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 208:
#line 2368 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 209:
#line 2372 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 210:
#line 2376 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 211:
#line 2380 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 212:
#line 2384 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 213:
#line 2399 "parser.yxx"
{
  EggSAnimData *anim_data = new EggSAnimData(yyvsp[0]._string);
  egg_stack.push_back(anim_data);
}
    break;
case 214:
#line 2404 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 216:
#line 2421 "parser.yxx"
{
  EggSAnimData *anim_data = DCAST(EggSAnimData, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else {
    eggyywarning("Unsupported S$Anim scalar: " + name);
  }
}
    break;
case 217:
#line 2433 "parser.yxx"
{
  DCAST(EggSAnimData, egg_stack.back())->set_data(yyvsp[-1]._number_list);
}
    break;
case 218:
#line 2447 "parser.yxx"
{
  EggXfmAnimData *anim_data = new EggXfmAnimData(yyvsp[0]._string);
  egg_stack.push_back(anim_data);
}
    break;
case 219:
#line 2452 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 221:
#line 2469 "parser.yxx"
{
  EggXfmAnimData *anim_data = DCAST(EggXfmAnimData, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_data->set_order(strval);
  } else if (cmp_nocase_uh(name, "contents") == 0) {
    anim_data->set_contents(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim scalar: " + name);
  }
}
    break;
case 222:
#line 2486 "parser.yxx"
{
  DCAST(EggXfmAnimData, egg_stack.back())->set_data(yyvsp[-1]._number_list);
}
    break;
case 223:
#line 2500 "parser.yxx"
{
  EggXfmSAnim *anim_group = new EggXfmSAnim(yyvsp[0]._string);
  egg_stack.push_back(anim_group);
}
    break;
case 224:
#line 2505 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;
case 226:
#line 2522 "parser.yxx"
{
  EggXfmSAnim *anim_group = DCAST(EggXfmSAnim, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_group->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_group->set_order(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim_S$ scalar: " + name);
  }
}
    break;
case 227:
#line 2537 "parser.yxx"
{
  DCAST(EggXfmSAnim, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;
case 228:
#line 2552 "parser.yxx"
{
  yyval._number_list = PTA_double::empty_array(0);
}
    break;
case 229:
#line 2556 "parser.yxx"
{
  yyval._number_list.push_back((double)yyvsp[0]._number);
}
    break;
case 230:
#line 2570 "parser.yxx"
{
  yyval._number_list = PTA_double::empty_array(0);
}
    break;
case 231:
#line 2574 "parser.yxx"
{
  yyval._number_list.push_back(yyvsp[0]._number);
}
    break;
case 232:
#line 2588 "parser.yxx"
{
  string name = yyvsp[0]._string;
  Textures::iterator vpi = textures.find(name);
  if (vpi == textures.end()) {
    eggyyerror("Unknown texture " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
}
    break;
case 233:
#line 2609 "parser.yxx"
{
  string name = yyvsp[0]._string;
  Materials::iterator vpi = materials.find(name);
  if (vpi == materials.end()) {
    eggyyerror("Unknown material " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
}
    break;
case 234:
#line 2630 "parser.yxx"
{
  string name = yyvsp[0]._string;
  VertexPools::iterator vpi = vertex_pools.find(name);
  if (vpi == vertex_pools.end()) {
    // This will become a forward reference.
    EggVertexPool *pool = new EggVertexPool(name);
    // The egg syntax starts counting at 1 by convention.
    pool->set_highest_index(0);
    vertex_pools[name] = pool;
    yyval._egg = pool;
  } else {
    yyval._egg = (*vpi).second;
  }
}
    break;
case 235:
#line 2656 "parser.yxx"
{
  eggyyerror("Name required.");
  yyval._string = "";
}
    break;
case 238:
#line 2685 "parser.yxx"
{
  eggyyerror("String required.");
  yyval._string = "";
}
    break;
case 240:
#line 2701 "parser.yxx"
{
  yyval._string = "";
}
    break;
case 242:
#line 2719 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
}
    break;
case 243:
#line 2723 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
}
    break;
case 245:
#line 2740 "parser.yxx"
{
  yyval._string = "";
}
    break;
case 246:
#line 2744 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
}
    break;
case 247:
#line 2760 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
}
    break;
case 248:
#line 2764 "parser.yxx"
{
  yyval._string = yyvsp[-1]._string + "\n" + yyvsp[0]._string;
}
    break;
case 250:
#line 2779 "parser.yxx"
{
  yyval._number = yyvsp[0]._ulong;
}
    break;
case 251:
#line 2794 "parser.yxx"
{
  yyval._number = yyvsp[0]._number;
  yyval._ulong = (unsigned long)yyvsp[0]._number;
  yyval._string = yyvsp[0]._string;
}
    break;
case 252:
#line 2800 "parser.yxx"
{
  yyval._number = yyvsp[0]._ulong;
  yyval._ulong = yyvsp[0]._ulong;
  yyval._string = yyvsp[0]._string;
}
    break;
case 253:
#line 2806 "parser.yxx"
{
  yyval._number = 0.0;
  yyval._ulong = 0;
  yyval._string = yyvsp[0]._string;
}
    break;
case 254:
#line 2823 "parser.yxx"
{
  int i = (int)yyvsp[0]._number;
  if ((double)i != yyvsp[0]._number) {
    eggyywarning("Integer expected.");
    yyval._number = (double)i;
  }
}
    break;
case 255:
#line 2831 "parser.yxx"
{
  yyval._number = yyvsp[0]._ulong;
}
    break;
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 2838 "parser.yxx"

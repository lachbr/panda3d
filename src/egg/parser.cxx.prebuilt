/* A Bison parser, made by GNU Bison 1.875b.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0

/* If NAME_PREFIX is specified substitute the variables and functions
   names.  */
#define yyparse eggyyparse
#define yylex   eggyylex
#define yyerror eggyyerror
#define yylval  eggyylval
#define yychar  eggyychar
#define yydebug eggyydebug
#define yynerrs eggyynerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     NUMBER = 258,
     ULONG = 259,
     STRING = 260,
     BEZIERCURVE = 261,
     BFACE = 262,
     BILLBOARD = 263,
     BILLBOARDCENTER = 264,
     BINORMAL = 265,
     BUNDLE = 266,
     CLOSED = 267,
     COLLIDE = 268,
     COMMENT = 269,
     COMPONENT = 270,
     COORDSYSTEM = 271,
     CV = 272,
     DART = 273,
     DNORMAL = 274,
     DRGBA = 275,
     DUV = 276,
     DXYZ = 277,
     DCS = 278,
     DISTANCE = 279,
     DTREF = 280,
     DYNAMICVERTEXPOOL = 281,
     EXTERNAL_FILE = 282,
     FLIGHT = 283,
     GROUP = 284,
     HIP = 285,
     INTANGENT = 286,
     JOINT = 287,
     KNOTS = 288,
     INCLUDE = 289,
     INSTANCE = 290,
     LINE = 291,
     LOOP = 292,
     MATERIAL = 293,
     MATRIX3 = 294,
     MATRIX4 = 295,
     MODEL = 296,
     MREF = 297,
     NORMAL = 298,
     NURBSCURVE = 299,
     NURBSSURFACE = 300,
     OBJECTTYPE = 301,
     ORDER = 302,
     OUTTANGENT = 303,
     POINTLIGHT = 304,
     POLYGON = 305,
     REF = 306,
     RGBA = 307,
     ROTATE = 308,
     ROTX = 309,
     ROTY = 310,
     ROTZ = 311,
     SANIM = 312,
     SCALAR = 313,
     SCALE = 314,
     SEQUENCE = 315,
     SHADING = 316,
     SWITCH = 317,
     SWITCHCONDITION = 318,
     TABLE = 319,
     TABLE_V = 320,
     TAG = 321,
     TANGENT = 322,
     TEXLIST = 323,
     TEXTURE = 324,
     TLENGTHS = 325,
     TRANSFORM = 326,
     TRANSLATE = 327,
     TREF = 328,
     TRIANGLEFAN = 329,
     TRIANGLESTRIP = 330,
     TRIM = 331,
     TXT = 332,
     UKNOTS = 333,
     UV = 334,
     VKNOTS = 335,
     VERTEX = 336,
     VERTEXANIM = 337,
     VERTEXPOOL = 338,
     VERTEXREF = 339,
     XFMANIM = 340,
     XFMSANIM = 341,
     START_EGG = 342,
     START_GROUP_BODY = 343,
     START_TEXTURE_BODY = 344,
     START_PRIMITIVE_BODY = 345
   };
#endif
#define NUMBER 258
#define ULONG 259
#define STRING 260
#define BEZIERCURVE 261
#define BFACE 262
#define BILLBOARD 263
#define BILLBOARDCENTER 264
#define BINORMAL 265
#define BUNDLE 266
#define CLOSED 267
#define COLLIDE 268
#define COMMENT 269
#define COMPONENT 270
#define COORDSYSTEM 271
#define CV 272
#define DART 273
#define DNORMAL 274
#define DRGBA 275
#define DUV 276
#define DXYZ 277
#define DCS 278
#define DISTANCE 279
#define DTREF 280
#define DYNAMICVERTEXPOOL 281
#define EXTERNAL_FILE 282
#define FLIGHT 283
#define GROUP 284
#define HIP 285
#define INTANGENT 286
#define JOINT 287
#define KNOTS 288
#define INCLUDE 289
#define INSTANCE 290
#define LINE 291
#define LOOP 292
#define MATERIAL 293
#define MATRIX3 294
#define MATRIX4 295
#define MODEL 296
#define MREF 297
#define NORMAL 298
#define NURBSCURVE 299
#define NURBSSURFACE 300
#define OBJECTTYPE 301
#define ORDER 302
#define OUTTANGENT 303
#define POINTLIGHT 304
#define POLYGON 305
#define REF 306
#define RGBA 307
#define ROTATE 308
#define ROTX 309
#define ROTY 310
#define ROTZ 311
#define SANIM 312
#define SCALAR 313
#define SCALE 314
#define SEQUENCE 315
#define SHADING 316
#define SWITCH 317
#define SWITCHCONDITION 318
#define TABLE 319
#define TABLE_V 320
#define TAG 321
#define TANGENT 322
#define TEXLIST 323
#define TEXTURE 324
#define TLENGTHS 325
#define TRANSFORM 326
#define TRANSLATE 327
#define TREF 328
#define TRIANGLEFAN 329
#define TRIANGLESTRIP 330
#define TRIM 331
#define TXT 332
#define UKNOTS 333
#define UV 334
#define VKNOTS 335
#define VERTEX 336
#define VERTEXANIM 337
#define VERTEXPOOL 338
#define VERTEXREF 339
#define XFMANIM 340
#define XFMSANIM 341
#define START_EGG 342
#define START_GROUP_BODY 343
#define START_TEXTURE_BODY 344
#define START_PRIMITIVE_BODY 345




/* Copy the first part of user declarations.  */
#line 6 "parser.yxx"


#include "pandabase.h"
#include "config_egg.h"
#include "parserDefs.h"
#include "lexerDefs.h"
#include "eggObject.h"
#include "eggGroup.h"
#include "eggVertex.h"
#include "eggVertexPool.h"
#include "eggVertexUV.h"
#include "eggPolygon.h"
#include "eggCompositePrimitive.h"
#include "eggTriangleFan.h"
#include "eggTriangleStrip.h"
#include "eggPoint.h"
#include "eggLine.h"
#include "eggNurbsSurface.h"
#include "eggNurbsCurve.h"
#include "eggTable.h"
#include "eggSAnimData.h"
#include "eggXfmSAnim.h"
#include "eggXfmAnimData.h"
#include "eggTexture.h"
#include "eggMaterial.h"
#include "eggComment.h"
#include "eggCoordinateSystem.h"
#include "eggExternalReference.h"
#include "eggData.h"
#include "pt_EggTexture.h"
#include "pt_EggMaterial.h"

#include "string_utils.h"
#include "filename.h"
#include "luse.h"
#include "lmatrix.h"
#include "coordinateSystem.h"
#include "pvector.h"
#include "dcast.h"

// Because our token type contains objects of type string, which
// require correct copy construction (and not simply memcpying), we
// cannot use bison's built-in auto-stack-grow feature.  As an easy
// solution, we ensure here that we have enough yacc stack to start
// with, and that it doesn't ever try to grow.
#define YYINITDEPTH 1000
#define YYMAXDEPTH 1000

// We need a stack of EggObject pointers.  Each time we encounter a
// nested EggObject of some kind, we'll allocate a new one of these
// and push it onto the stack.  At any given time, the top of the
// stack is the EggObject we are currently scanning.

typedef pvector< PT(EggObject) > EggStack;
static EggStack egg_stack;

// There's one "top-level" egg node, which is where we should parent
// things (e.g. implicit textures) encountered in the egg file that
// don't have an explicit place in the tree.  If this is NULL, such
// things won't be parented anywhere.
static EggGroupNode *egg_top_node;

// We need a table mapping vertex pool names to vertex pools.
typedef pmap<string,  PT(EggVertexPool) > VertexPools;
static VertexPools vertex_pools;

// And another one mapping texture names to textures.
typedef pmap<string,  PT_EggTexture > Textures;
static Textures textures;

// And again for material names to materials.
typedef pmap<string,  PT_EggMaterial > Materials;
static Materials materials;

// We need to be able to save the index number requested for a vertex
// temporarily.
static int vertex_index;

// We need to hold a matrix for a little bit while parsing the
// <Transform> entries.
static LMatrix3d matrix_2d;


////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

void
egg_init_parser(istream &in, const string &filename,
                EggObject *tos, EggGroupNode *top_node) {
  egg_init_lexer(in, filename);

  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();

  egg_stack.push_back(tos);
  egg_top_node = top_node;
}

void
egg_cleanup_parser() {
  // Check for undefined vertex pools.
  VertexPools::const_iterator vpi;
  for (vpi = vertex_pools.begin(); vpi != vertex_pools.end(); ++vpi) {
    EggVertexPool *pool = (*vpi).second;
    if (pool->has_forward_vertices()) {
      if (!pool->has_defined_vertices()) {
        eggyyerror("Undefined vertex pool " + pool->get_name());
      } else {
        eggyyerror("Undefined vertices in pool " + pool->get_name());
        
        egg_cat.error(false)
          << "Undefined vertex index numbers:";
        EggVertexPool::const_iterator vi;
        for (vi = pool->begin(); vi != pool->end(); ++vi) {
          EggVertex *vertex = (*vi);
          if (vertex->is_forward_reference()) {
            egg_cat.error(false)
              << " " << vertex->get_index();
          }
        }
        egg_cat.error(false) 
          << "\n";
      }
    }
  }

  // Clean these out after we're done, so we don't keep big memory
  // structures around needlessly.
  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();
}



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
typedef int YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 214 of yacc.c.  */
#line 415 "y.tab.c"

#if ! defined (yyoverflow) || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  14
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1334

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  93
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  119
/* YYNRULES -- Number of rules. */
#define YYNRULES  259
/* YYNRULES -- Number of states. */
#define YYNSTATES  733

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   345

#define YYTRANSLATE(YYX) 						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    91,     2,    92,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    15,    17,    20,    22,
      24,    26,    28,    30,    32,    34,    36,    38,    40,    42,
      44,    46,    48,    50,    52,    54,    59,    65,    66,    74,
      76,    83,    86,    87,    94,    96,   103,   109,   116,   117,
     124,   126,   129,   130,   136,   137,   144,   146,   149,   153,
     158,   159,   167,   173,   179,   188,   197,   200,   208,   216,
     224,   232,   236,   245,   254,   259,   269,   279,   280,   287,
     288,   295,   296,   303,   305,   312,   318,   326,   334,   340,
     346,   352,   358,   364,   370,   376,   383,   389,   392,   395,
     398,   401,   403,   405,   408,   409,   415,   417,   420,   423,
     426,   429,   432,   435,   438,   445,   450,   455,   460,   468,
     475,   480,   485,   487,   504,   505,   511,   513,   516,   519,
     522,   525,   531,   536,   542,   547,   549,   559,   569,   571,
     578,   583,   595,   608,   609,   616,   617,   624,   625,   632,
     633,   640,   641,   648,   649,   656,   657,   664,   666,   672,
     678,   680,   681,   689,   695,   701,   707,   710,   716,   722,
     728,   735,   737,   743,   749,   755,   758,   764,   770,   776,
     782,   788,   794,   797,   803,   810,   812,   818,   824,   830,
     833,   839,   845,   851,   857,   863,   870,   872,   874,   876,
     880,   889,   898,   903,   913,   923,   925,   934,   937,   939,
     941,   943,   949,   951,   954,   956,   958,   959,   966,   967,
     974,   976,   979,   982,   985,   988,   991,   992,   999,  1001,
    1008,  1014,  1015,  1022,  1024,  1031,  1037,  1038,  1045,  1047,
    1054,  1057,  1059,  1062,  1064,  1067,  1069,  1071,  1073,  1075,
    1077,  1079,  1081,  1083,  1085,  1087,  1089,  1091,  1093,  1095,
    1097,  1099,  1102,  1104,  1106,  1108,  1110,  1112,  1114,  1116
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short yyrhs[] =
{
      94,     0,    -1,    87,    95,    -1,    88,   123,    -1,    89,
     101,    -1,    90,   164,    -1,   211,    -1,    95,    96,    -1,
      97,    -1,    98,    -1,    99,    -1,   102,    -1,   105,    -1,
     106,    -1,   117,    -1,   119,    -1,   121,    -1,   149,    -1,
     151,    -1,   153,    -1,   155,    -1,   157,    -1,   159,    -1,
     161,    -1,   182,    -1,    16,    91,   203,    92,    -1,    14,
     202,    91,   206,    92,    -1,    -1,    69,   201,    91,   203,
     100,   101,    92,    -1,   211,    -1,   101,    58,   201,    91,
     209,    92,    -1,   101,   137,    -1,    -1,    38,   201,    91,
     103,   104,    92,    -1,   211,    -1,   104,    58,   201,    91,
     209,    92,    -1,    27,   202,    91,   203,    92,    -1,   205,
      27,   202,    91,   203,    92,    -1,    -1,    83,   201,   107,
      91,   108,    92,    -1,   211,    -1,   108,   109,    -1,    -1,
      81,   110,    91,   112,    92,    -1,    -1,    81,   210,   111,
      91,   112,    92,    -1,   208,    -1,   208,   208,    -1,   208,
     208,   208,    -1,   208,   208,   208,   208,    -1,    -1,   112,
      79,   202,    91,   113,   114,    92,    -1,   112,    43,    91,
     115,    92,    -1,   112,    52,    91,   116,    92,    -1,   112,
      22,   205,    91,   208,   208,   208,    92,    -1,   112,    22,
      91,   205,   208,   208,   208,    92,    -1,   208,   208,    -1,
     114,    67,    91,   208,   208,   208,    92,    -1,   114,    10,
      91,   208,   208,   208,    92,    -1,   114,    21,   205,    91,
     208,   208,    92,    -1,   114,    21,    91,   205,   208,   208,
      92,    -1,   208,   208,   208,    -1,   115,    19,   205,    91,
     208,   208,   208,    92,    -1,   115,    19,    91,   205,   208,
     208,   208,    92,    -1,   208,   208,   208,   208,    -1,   116,
      20,   205,    91,   208,   208,   208,   208,    92,    -1,   116,
      20,    91,   205,   208,   208,   208,   208,    92,    -1,    -1,
      29,   202,   118,    91,   123,    92,    -1,    -1,    32,   202,
     120,    91,   123,    92,    -1,    -1,    35,   202,   122,    91,
     123,    92,    -1,   211,    -1,   123,    58,   201,    91,   209,
      92,    -1,   123,     8,    91,   205,    92,    -1,   123,     9,
      91,   208,   208,   208,    92,    -1,   123,    13,   202,    91,
     124,   125,    92,    -1,   123,    23,    91,   210,    92,    -1,
     123,    23,    91,     5,    92,    -1,   123,    18,    91,   210,
      92,    -1,   123,    18,    91,     5,    92,    -1,   123,    62,
      91,   210,    92,    -1,   123,    46,    91,   203,    92,    -1,
     123,    41,    91,   210,    92,    -1,   123,    66,   202,    91,
     206,    92,    -1,   123,    68,    91,   210,    92,    -1,   123,
     126,    -1,   123,   145,    -1,   123,   147,    -1,   123,    96,
      -1,   205,    -1,   211,    -1,   125,   205,    -1,    -1,    71,
     127,    91,   128,    92,    -1,   211,    -1,   128,   129,    -1,
     128,   130,    -1,   128,   131,    -1,   128,   132,    -1,   128,
     133,    -1,   128,   134,    -1,   128,   135,    -1,    72,    91,
     208,   208,   208,    92,    -1,    54,    91,   208,    92,    -1,
      55,    91,   208,    92,    -1,    56,    91,   208,    92,    -1,
      53,    91,   208,   208,   208,   208,    92,    -1,    59,    91,
     208,   208,   208,    92,    -1,    59,    91,   208,    92,    -1,
      40,    91,   136,    92,    -1,   211,    -1,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,    -1,    -1,    71,   138,    91,   139,    92,
      -1,   211,    -1,   139,   143,    -1,   139,   140,    -1,   139,
     141,    -1,   139,   142,    -1,    72,    91,   208,   208,    92,
      -1,    53,    91,   208,    92,    -1,    59,    91,   208,   208,
      92,    -1,    39,    91,   144,    92,    -1,   211,    -1,   208,
     208,   208,   208,   208,   208,   208,   208,   208,    -1,    84,
      91,   196,   146,    51,    91,   200,    92,    92,    -1,   211,
      -1,   146,    58,   201,    91,   209,    92,    -1,    63,    91,
     148,    92,    -1,    24,    91,   208,   208,    81,    91,   208,
     208,   208,    92,    92,    -1,    24,    91,   208,   208,   208,
      81,    91,   208,   208,   208,    92,    92,    -1,    -1,    50,
     202,   150,    91,   164,    92,    -1,    -1,    74,   202,   152,
      91,   164,    92,    -1,    -1,    75,   202,   154,    91,   164,
      92,    -1,    -1,    49,   202,   156,    91,   164,    92,    -1,
      -1,    36,   202,   158,    91,   164,    92,    -1,    -1,    45,
     202,   160,    91,   166,    92,    -1,    -1,    44,   202,   162,
      91,   167,    92,    -1,   211,    -1,   163,    43,    91,   171,
      92,    -1,   163,    52,    91,   172,    92,    -1,   211,    -1,
      -1,   164,    15,   210,    91,   165,   163,    92,    -1,   164,
      73,    91,   168,    92,    -1,   164,    69,    91,   169,    92,
      -1,   164,    42,    91,   170,    92,    -1,   164,   174,    -1,
     164,    43,    91,   171,    92,    -1,   164,    52,    91,   172,
      92,    -1,   164,     7,    91,   173,    92,    -1,   164,    58,
     201,    91,   209,    92,    -1,   211,    -1,   166,    73,    91,
     168,    92,    -1,   166,    69,    91,   169,    92,    -1,   166,
      42,    91,   170,    92,    -1,   166,   174,    -1,   166,    43,
      91,   171,    92,    -1,   166,    52,    91,   172,    92,    -1,
     166,     7,    91,   173,    92,    -1,   166,    47,    91,   175,
      92,    -1,   166,    78,    91,   176,    92,    -1,   166,    80,
      91,   177,    92,    -1,   166,   161,    -1,   166,    76,    91,
     178,    92,    -1,   166,    58,   201,    91,   209,    92,    -1,
     211,    -1,   167,    73,    91,   168,    92,    -1,   167,    69,
      91,   169,    92,    -1,   167,    42,    91,   170,    92,    -1,
     167,   174,    -1,   167,    43,    91,   171,    92,    -1,   167,
      52,    91,   172,    92,    -1,   167,     7,    91,   173,    92,
      -1,   167,    47,    91,   180,    92,    -1,   167,    33,    91,
     181,    92,    -1,   167,    58,   201,    91,   209,    92,    -1,
     198,    -1,   201,    -1,   199,    -1,   208,   208,   208,    -1,
     171,    19,   205,    91,   208,   208,   208,    92,    -1,   171,
      19,    91,   205,   208,   208,   208,    92,    -1,   208,   208,
     208,   208,    -1,   172,    20,   205,    91,   208,   208,   208,
     208,    92,    -1,   172,    20,    91,   205,   208,   208,   208,
     208,    92,    -1,   210,    -1,    84,    91,   196,    51,    91,
     200,    92,    92,    -1,   210,   210,    -1,   197,    -1,   197,
      -1,   211,    -1,   178,    37,    91,   179,    92,    -1,   211,
      -1,   179,   161,    -1,   210,    -1,   197,    -1,    -1,    64,
     202,   183,    91,   186,    92,    -1,    -1,    11,   202,   185,
      91,   186,    92,    -1,   211,    -1,   186,   182,    -1,   186,
     184,    -1,   186,   187,    -1,   186,   190,    -1,   186,   193,
      -1,    -1,    57,   202,   188,    91,   189,    92,    -1,   211,
      -1,   189,    58,   201,    91,   209,    92,    -1,   189,    65,
      91,   197,    92,    -1,    -1,    85,   202,   191,    91,   192,
      92,    -1,   211,    -1,   192,    58,   201,    91,   209,    92,
      -1,   192,    65,    91,   197,    92,    -1,    -1,    86,   202,
     194,    91,   195,    92,    -1,   211,    -1,   195,    58,   201,
      91,   209,    92,    -1,   195,   187,    -1,   211,    -1,   196,
     210,    -1,   211,    -1,   197,   208,    -1,   201,    -1,   201,
      -1,   201,    -1,   211,    -1,   205,    -1,   204,    -1,   211,
      -1,   205,    -1,   211,    -1,   205,    -1,     3,    -1,     4,
      -1,     5,    -1,   211,    -1,   207,    -1,   205,    -1,   207,
     205,    -1,     3,    -1,     4,    -1,     3,    -1,     4,    -1,
       5,    -1,     3,    -1,     4,    -1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short yyrline[] =
{
       0,   216,   216,   217,   218,   219,   230,   231,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   274,   297,   312,   311,   339,
     340,   625,   637,   636,   663,   664,   759,   766,   787,   786,
     826,   827,   839,   838,   850,   849,   895,   899,   903,   907,
     912,   911,   926,   927,   928,   936,   955,   959,   967,   975,
     983,  1001,  1005,  1013,  1031,  1035,  1043,  1062,  1061,  1082,
    1081,  1103,  1102,  1123,  1124,  1254,  1266,  1271,  1278,  1284,
    1297,  1304,  1317,  1323,  1329,  1335,  1340,  1346,  1347,  1348,
    1349,  1363,  1393,  1394,  1417,  1416,  1432,  1433,  1434,  1435,
    1436,  1437,  1438,  1439,  1442,  1448,  1454,  1460,  1466,  1472,
    1476,  1483,  1487,  1488,  1511,  1510,  1529,  1530,  1531,  1532,
    1533,  1536,  1542,  1548,  1554,  1558,  1559,  1578,  1611,  1615,
    1640,  1652,  1657,  1675,  1674,  1694,  1693,  1713,  1712,  1732,
    1731,  1751,  1750,  1770,  1769,  1789,  1788,  1808,  1809,  1810,
    1821,  1823,  1822,  1843,  1844,  1845,  1846,  1847,  1848,  1849,
    1850,  1923,  1924,  1925,  1926,  1927,  1928,  1929,  1930,  1931,
    1932,  1933,  1934,  1940,  1941,  2005,  2006,  2007,  2008,  2009,
    2010,  2011,  2012,  2013,  2014,  2015,  2084,  2101,  2141,  2158,
    2162,  2170,  2188,  2192,  2200,  2218,  2234,  2265,  2283,  2303,
    2323,  2328,  2339,  2345,  2364,  2380,  2402,  2401,  2424,  2423,
    2445,  2446,  2450,  2454,  2458,  2462,  2478,  2477,  2498,  2499,
    2511,  2526,  2525,  2546,  2547,  2564,  2579,  2578,  2599,  2600,
    2615,  2630,  2634,  2648,  2652,  2666,  2687,  2708,  2734,  2739,
    2751,  2763,  2768,  2779,  2783,  2797,  2801,  2805,  2818,  2822,
    2838,  2842,  2856,  2857,  2872,  2878,  2884,  2901,  2909,  2915
};
#endif

#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "NUMBER", "ULONG", "STRING", "BEZIERCURVE", 
  "BFACE", "BILLBOARD", "BILLBOARDCENTER", "BINORMAL", "BUNDLE", "CLOSED", 
  "COLLIDE", "COMMENT", "COMPONENT", "COORDSYSTEM", "CV", "DART", 
  "DNORMAL", "DRGBA", "DUV", "DXYZ", "DCS", "DISTANCE", "DTREF", 
  "DYNAMICVERTEXPOOL", "EXTERNAL_FILE", "FLIGHT", "GROUP", "HIP", 
  "INTANGENT", "JOINT", "KNOTS", "INCLUDE", "INSTANCE", "LINE", "LOOP", 
  "MATERIAL", "MATRIX3", "MATRIX4", "MODEL", "MREF", "NORMAL", 
  "NURBSCURVE", "NURBSSURFACE", "OBJECTTYPE", "ORDER", "OUTTANGENT", 
  "POINTLIGHT", "POLYGON", "REF", "RGBA", "ROTATE", "ROTX", "ROTY", 
  "ROTZ", "SANIM", "SCALAR", "SCALE", "SEQUENCE", "SHADING", "SWITCH", 
  "SWITCHCONDITION", "TABLE", "TABLE_V", "TAG", "TANGENT", "TEXLIST", 
  "TEXTURE", "TLENGTHS", "TRANSFORM", "TRANSLATE", "TREF", "TRIANGLEFAN", 
  "TRIANGLESTRIP", "TRIM", "TXT", "UKNOTS", "UV", "VKNOTS", "VERTEX", 
  "VERTEXANIM", "VERTEXPOOL", "VERTEXREF", "XFMANIM", "XFMSANIM", 
  "START_EGG", "START_GROUP_BODY", "START_TEXTURE_BODY", 
  "START_PRIMITIVE_BODY", "'{'", "'}'", "$accept", "grammar", "egg", 
  "node", "coordsystem", "comment", "texture", "@1", "texture_body", 
  "material", "@2", "material_body", "external_reference", "vertex_pool", 
  "@3", "vertex_pool_body", "vertex", "@4", "@5", "vertex_body", "@6", 
  "vertex_uv_body", "vertex_normal_body", "vertex_color_body", "group", 
  "@7", "joint", "@8", "instance", "@9", "group_body", "cs_type", 
  "collide_flags", "transform_3d", "@10", "transform_3d_body", 
  "translate_3d", "rotx_3d", "roty_3d", "rotz_3d", "rotate_3d", 
  "scale_3d", "matrix4_3d", "matrix4_3d_body", "transform_2d", "@11", 
  "transform_2d_body", "translate_2d", "rotate_2d", "scale_2d", 
  "matrix3_2d", "matrix3_2d_body", "group_vertex_ref", 
  "group_vertex_membership", "switchcondition", "switchcondition_body", 
  "polygon", "@12", "trianglefan", "@13", "trianglestrip", "@14", 
  "point_light", "@15", "line", "@16", "nurbs_surface", "@17", 
  "nurbs_curve", "@18", "primitive_component_body", "primitive_body", 
  "@19", "nurbs_surface_body", "nurbs_curve_body", "primitive_tref_body", 
  "primitive_texture_body", "primitive_material_body", 
  "primitive_normal_body", "primitive_color_body", "primitive_bface_body", 
  "primitive_vertex_ref", "nurbs_surface_order_body", 
  "nurbs_surface_uknots_body", "nurbs_surface_vknots_body", 
  "nurbs_surface_trim_body", "nurbs_surface_trim_loop_body", 
  "nurbs_curve_order_body", "nurbs_curve_knots_body", "table", "@20", 
  "bundle", "@21", "table_body", "sanim", "@22", "sanim_body", "xfmanim", 
  "@23", "xfmanim_body", "xfm_s_anim", "@24", "xfm_s_anim_body", 
  "integer_list", "real_list", "texture_name", "material_name", 
  "vertex_pool_name", "required_name", "optional_name", "required_string", 
  "optional_string", "string", "repeated_string", "repeated_string_body", 
  "real", "real_or_string", "integer", "empty", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   123,   125
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned char yyr1[] =
{
       0,    93,    94,    94,    94,    94,    95,    95,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    97,    98,   100,    99,   101,
     101,   101,   103,   102,   104,   104,   105,   105,   107,   106,
     108,   108,   110,   109,   111,   109,   112,   112,   112,   112,
     113,   112,   112,   112,   112,   112,   114,   114,   114,   114,
     114,   115,   115,   115,   116,   116,   116,   118,   117,   120,
     119,   122,   121,   123,   123,   123,   123,   123,   123,   123,
     123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
     123,   124,   125,   125,   127,   126,   128,   128,   128,   128,
     128,   128,   128,   128,   129,   130,   131,   132,   133,   134,
     134,   135,   136,   136,   138,   137,   139,   139,   139,   139,
     139,   140,   141,   142,   143,   144,   144,   145,   146,   146,
     147,   148,   148,   150,   149,   152,   151,   154,   153,   156,
     155,   158,   157,   160,   159,   162,   161,   163,   163,   163,
     164,   165,   164,   164,   164,   164,   164,   164,   164,   164,
     164,   166,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   167,   167,   167,   167,   167,
     167,   167,   167,   167,   167,   167,   168,   169,   170,   171,
     171,   171,   172,   172,   172,   173,   174,   175,   176,   177,
     178,   178,   179,   179,   180,   181,   183,   182,   185,   184,
     186,   186,   186,   186,   186,   186,   188,   187,   189,   189,
     189,   191,   190,   192,   192,   192,   194,   193,   195,   195,
     195,   196,   196,   197,   197,   198,   199,   200,   201,   201,
     202,   203,   203,   204,   204,   205,   205,   205,   206,   206,
     207,   207,   208,   208,   209,   209,   209,   210,   210,   211
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     2,     2,     2,     2,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     5,     0,     7,     1,
       6,     2,     0,     6,     1,     6,     5,     6,     0,     6,
       1,     2,     0,     5,     0,     6,     1,     2,     3,     4,
       0,     7,     5,     5,     8,     8,     2,     7,     7,     7,
       7,     3,     8,     8,     4,     9,     9,     0,     6,     0,
       6,     0,     6,     1,     6,     5,     7,     7,     5,     5,
       5,     5,     5,     5,     5,     6,     5,     2,     2,     2,
       2,     1,     1,     2,     0,     5,     1,     2,     2,     2,
       2,     2,     2,     2,     6,     4,     4,     4,     7,     6,
       4,     4,     1,    16,     0,     5,     1,     2,     2,     2,
       2,     5,     4,     5,     4,     1,     9,     9,     1,     6,
       4,    11,    12,     0,     6,     0,     6,     0,     6,     0,
       6,     0,     6,     0,     6,     0,     6,     1,     5,     5,
       1,     0,     7,     5,     5,     5,     2,     5,     5,     5,
       6,     1,     5,     5,     5,     2,     5,     5,     5,     5,
       5,     5,     2,     5,     6,     1,     5,     5,     5,     2,
       5,     5,     5,     5,     5,     6,     1,     1,     1,     3,
       8,     8,     4,     9,     9,     1,     8,     2,     1,     1,
       1,     5,     1,     2,     1,     1,     0,     6,     0,     6,
       1,     2,     2,     2,     2,     2,     0,     6,     1,     6,
       5,     0,     6,     1,     6,     5,     0,     6,     1,     6,
       2,     1,     2,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     0
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned short yydefact[] =
{
       0,   259,   259,   259,   259,     0,     2,     6,     3,    73,
       4,    29,     5,   150,     1,   245,   246,   247,   259,     0,
     259,   259,   259,   259,   259,   259,   259,   259,   259,   259,
     259,   259,   259,   259,   259,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,   259,     0,     0,     0,
       0,   259,     0,     0,   259,     0,    94,     0,    90,    87,
      88,    89,   259,   114,    31,     0,     0,     0,     0,     0,
     259,     0,     0,     0,   156,     0,   240,   244,   243,   259,
       0,    67,    69,    71,   141,     0,   239,   238,   145,   143,
     139,   133,   206,     0,   135,   137,    38,   259,     0,     0,
       0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,   259,     0,     0,     0,   257,   258,     0,   259,     0,
       0,     0,   259,   259,   259,   259,     0,   242,   241,   259,
       0,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     259,     0,     0,     0,     0,     0,   252,   253,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     259,     0,   259,   259,   231,     0,   259,     0,   195,   151,
       0,   188,   236,     0,     0,     0,     0,     0,     0,   187,
       0,   186,   235,     0,   250,     0,   249,   248,    25,     0,
     259,   259,   259,   259,   259,   259,   259,   259,   259,   259,
      27,   259,   259,   259,   259,    75,     0,   259,    91,    81,
      80,    79,    78,    84,    83,   254,   255,   256,     0,    82,
       0,   130,     0,    86,     0,    96,     0,   232,   128,     0,
       0,   116,   159,   259,   155,     0,   157,     0,     0,   158,
       0,     0,   154,   153,     0,    26,   251,    36,     0,     0,
       0,     0,     0,    34,     0,   175,     0,   161,     0,     0,
       0,   210,   259,     0,     0,     0,    40,     0,     0,     0,
      92,    74,     0,    85,     0,     0,     0,     0,     0,     0,
       0,    95,    97,    98,    99,   100,   101,   102,   103,     0,
     259,    30,     0,     0,     0,     0,   115,   118,   119,   120,
     117,     0,   147,     0,     0,   189,     0,     0,     0,   160,
     259,    68,    70,    72,   142,   259,    33,     0,     0,     0,
       0,     0,     0,   259,     0,     0,   146,   179,     0,     0,
       0,     0,     0,   259,     0,     0,     0,     0,     0,   144,
     172,   165,   140,   134,   259,   259,   259,   259,   207,   211,
     212,   213,   214,   215,     0,   136,   138,    42,    39,    41,
      37,    76,    77,    93,     0,   259,     0,     0,     0,     0,
       0,     0,   259,     0,   259,     0,     0,     0,     0,     0,
     152,     0,     0,     0,     0,   192,     0,   237,     0,     0,
     259,   259,     0,     0,     0,     0,   259,   259,     0,   259,
       0,     0,     0,     0,   259,   259,   259,   259,   259,   208,
     216,   221,   226,    28,     0,    44,     0,     0,     0,     0,
     112,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,   233,     0,     0,     0,
     204,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   200,     0,   198,     0,   199,
       0,     0,     0,     0,     0,     0,     0,     0,   111,     0,
       0,   105,   106,   107,   110,     0,     0,     0,     0,   124,
       0,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     196,     0,   182,   184,   234,   178,   180,   183,   181,     0,
     177,   176,   168,   164,   166,   169,   197,   167,     0,   163,
     162,     0,   173,   170,   171,   259,   259,   259,   259,     0,
      46,     0,     0,     0,     0,     0,     0,     0,   127,   129,
       0,   123,   121,   148,   149,     0,     0,     0,     0,    35,
     185,   174,   259,     0,     0,   218,     0,   223,     0,   228,
       0,     0,     0,   259,    43,    47,     0,     0,     0,     0,
       0,   109,   104,     0,   191,   190,     0,     0,     0,   202,
     209,   259,     0,   217,   259,     0,   222,   259,   227,   230,
       0,     0,     0,     0,     0,    48,    45,     0,     0,     0,
     108,     0,   194,   193,   201,   203,     0,   259,     0,   259,
       0,     0,     0,     0,     0,     0,     0,    50,    49,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    52,     0,     0,    53,     0,     0,   131,     0,     0,
       0,     0,   220,     0,   225,     0,     0,     0,     0,     0,
      61,     0,     0,     0,     0,     0,   132,     0,     0,   219,
     224,   229,     0,     0,     0,     0,     0,     0,    64,     0,
       0,     0,    51,    56,     0,   126,    55,    54,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    63,    62,     0,     0,     0,
       0,     0,     0,     0,    66,    65,    58,    60,    59,    57,
       0,     0,   113
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short yydefgoto[] =
{
      -1,     5,     6,    68,    36,    37,    38,   272,    10,    39,
     204,   262,    40,    41,   153,   275,   369,   424,   485,   539,
     646,   664,   623,   625,    42,   140,    43,   141,    44,   142,
       8,   217,   279,    69,   120,   234,   292,   293,   294,   295,
     296,   297,   298,   428,    74,   123,   240,   307,   308,   309,
     310,   439,    70,   236,    71,   169,    45,   148,    46,   151,
      47,   152,    48,   147,    49,   143,    50,   146,    51,   145,
     311,    12,   243,   266,   264,   190,   188,   180,   183,   185,
     177,    84,   468,   476,   478,   474,   588,   459,   454,    52,
     149,   360,   480,   270,   361,   481,   564,   362,   482,   566,
     363,   483,   568,   173,   455,   191,   181,   396,   182,    85,
     136,    86,    96,   195,   196,   514,   228,   178,    97
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -411
static const short yypact[] =
{
     197,  -411,  -411,  -411,  -411,    73,  1029,  -411,  1151,  -411,
     111,  -411,   463,  -411,  -411,  -411,  -411,  -411,   326,   -85,
     326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
     326,   326,   326,   326,   326,  -411,  -411,  -411,  -411,  -411,
    -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,
    -411,  -411,  -411,    58,    52,    59,   326,    76,   107,   122,
     125,   326,   132,   136,   326,   139,  -411,   144,  -411,  -411,
    -411,  -411,   326,  -411,  -411,   155,   110,   181,   184,   188,
     326,   190,   191,   209,  -411,   211,  -411,  -411,  -411,   326,
     213,  -411,  -411,  -411,  -411,   215,  -411,  -411,  -411,  -411,
    -411,  -411,  -411,   217,  -411,  -411,  -411,   326,   326,   266,
     221,   350,   363,   110,   326,   222,   110,   167,   224,   110,
     226,  -411,   227,   230,   110,  -411,  -411,   232,   326,   266,
     266,   236,   326,   326,  -411,   326,   109,  -411,  -411,   326,
     241,   242,   245,   265,  -411,   267,   268,   270,   281,   293,
     326,   299,   300,   306,   307,   248,  -411,  -411,   266,   326,
     250,   252,   309,   310,   317,   318,   366,   320,   308,   322,
     326,   324,  -411,   110,  -411,   366,  -411,   327,  -411,  -411,
     330,  -411,  -411,    24,   266,   -16,   266,   366,   332,  -411,
     334,  -411,  -411,   103,  -411,   335,   326,  -411,  -411,   339,
    -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,
    -411,  -411,  -411,  -411,   326,  -411,   266,  -411,  -411,  -411,
    -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,   341,  -411,
     266,  -411,   343,  -411,   458,  -411,    60,  -411,  -411,   348,
     185,  -411,  -411,  -411,  -411,    66,  -411,   266,    74,  -411,
     266,   362,  -411,  -411,   364,  -411,  -411,  -411,   749,   930,
    1078,   207,   -25,  -411,   163,  -411,   119,  -411,   251,   253,
      63,  -411,  -411,   331,   410,    31,  -411,   365,   368,     6,
    -411,  -411,   266,  -411,   367,   373,   374,   375,   376,   378,
     380,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,   381,
     326,  -411,   382,   383,   384,   385,  -411,  -411,  -411,  -411,
    -411,    82,  -411,   326,   386,  -411,   326,   389,   266,  -411,
     326,  -411,  -411,  -411,  -411,   326,  -411,   390,   391,   393,
     395,   397,   398,   326,   401,   402,  -411,  -411,   404,   408,
     409,   412,   413,   326,   425,   427,   428,   429,   431,  -411,
    -411,  -411,  -411,  -411,   326,   326,   326,   326,  -411,  -411,
    -411,  -411,  -411,  -411,   170,  -411,  -411,   110,  -411,  -411,
    -411,  -411,  -411,  -411,   100,   266,   266,   266,   266,   266,
     266,   266,   326,   432,   266,   266,   266,   266,   433,   434,
    -411,   266,   266,   266,   266,  -411,   435,  -411,   437,   110,
    -411,   326,   266,   110,   266,   438,   326,   326,   110,   326,
     266,   110,   266,   440,   326,   326,  -411,  -411,  -411,  -411,
    -411,  -411,  -411,  -411,   442,  -411,   443,   208,   445,   266,
    -411,   266,   446,   447,   448,    43,   266,   456,   366,   457,
     266,  -411,   460,   266,   266,   266,   266,   266,   266,   266,
     266,   461,   366,   462,   464,   266,  -411,   465,    40,   468,
    -411,    29,   366,   469,   470,   471,   473,    44,   474,   110,
      64,   366,   476,   477,    17,  -411,   478,   266,   479,   266,
     444,   481,   482,   483,   266,   484,   266,   486,  -411,   266,
     266,  -411,  -411,  -411,  -411,   266,   266,   490,   491,  -411,
     266,  -411,   493,   494,    47,    97,   266,   266,   266,   266,
    -411,   495,  -411,  -411,  -411,  -411,  -411,  -411,  -411,   496,
    -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,   497,  -411,
    -411,   499,  -411,  -411,  -411,  -411,  -411,  -411,  -411,   182,
     266,   266,   266,   266,   266,   266,   500,   501,  -411,  -411,
     266,  -411,  -411,  -411,  -411,   503,   504,   266,   266,  -411,
    -411,  -411,  -411,    94,   175,  -411,   198,  -411,    80,  -411,
      77,   506,   507,   326,  -411,   266,   249,   266,   266,   266,
     508,  -411,  -411,   266,  -411,  -411,   509,   510,    49,  -411,
    -411,   326,   516,  -411,   326,   522,  -411,   326,  -411,  -411,
     326,   523,   266,   266,   524,   266,  -411,   525,   266,   266,
    -411,   266,  -411,  -411,  -411,  -411,   527,  -411,   528,  -411,
     529,   266,   266,    81,   266,   108,   266,  -411,  -411,   532,
     534,   266,   266,   366,    48,   366,    53,   366,   266,   266,
      84,  -411,   266,    87,  -411,   266,   266,  -411,   536,   266,
     266,   537,  -411,   538,  -411,   539,   266,   266,   326,   530,
    -411,   326,   544,   266,    32,   266,  -411,   266,   266,  -411,
    -411,  -411,   546,   549,   266,   266,   266,   266,  -411,   545,
      92,   551,  -411,  -411,   266,  -411,  -411,  -411,   266,   266,
     266,   266,   266,   326,   553,   266,   266,   266,   266,   266,
     266,   266,   266,   266,   266,   266,   556,   557,   266,   266,
     266,   266,   266,   266,   266,  -411,  -411,   561,   562,   564,
     567,   568,   569,   266,  -411,  -411,  -411,  -411,  -411,  -411,
     266,   266,  -411
};

/* YYPGOTO[NTERM-NUM].  */
static const short yypgoto[] =
{
    -411,  -411,  -411,   450,  -411,  -411,  -411,  -411,   254,  -411,
    -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,    50,
    -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,
     206,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,
    -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,
    -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,
    -411,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -263,  -411,
    -411,   231,  -411,  -411,  -411,  -195,  -188,  -172,  -226,  -252,
    -206,   -21,  -411,  -411,  -411,  -411,  -411,  -411,  -411,  -265,
    -411,  -411,  -411,    20,    95,  -411,  -411,  -411,  -411,  -411,
    -411,  -411,  -411,   511,  -410,  -411,  -411,   234,    14,     8,
     -95,  -411,    -6,   492,  -411,     1,  -174,   -51,   715
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1
static const unsigned short yytable[] =
{
      53,   239,    53,   350,   248,   359,    89,   477,   479,    15,
      16,    17,    87,   251,    87,    87,    87,    87,    87,   165,
      87,    87,    87,    87,    87,   127,    87,    87,    90,    91,
      92,    93,    94,   325,    98,    99,   100,   101,   102,    95,
     104,   105,   679,   245,   199,   103,   156,   157,   106,   248,
      87,   156,   157,   680,   531,   210,   156,   157,    87,   245,
     161,   163,   164,   245,   110,   167,   245,   326,   171,    15,
      16,    17,   118,    14,   354,   115,   249,    15,    16,    17,
      15,    16,    17,   137,   248,   107,   122,    15,    16,    17,
      15,    16,    17,    26,   131,    15,    16,    17,   372,   681,
     640,    87,   155,   156,   157,   354,   125,   126,   137,   532,
     158,   299,   367,   125,   126,   154,   246,   248,   300,   277,
     355,   518,   237,   368,   682,   388,   338,    30,   643,   194,
     184,   186,   516,   137,   389,   494,   524,   355,   597,   553,
     652,   614,   237,   108,   137,   654,   189,   192,   356,   357,
     109,   355,   461,   218,   254,   358,   527,   313,    30,   216,
     470,   339,   340,    26,   194,   316,   341,   111,   600,    72,
     327,   342,   598,   641,   390,   658,   458,   343,   661,   356,
     357,   426,    73,   693,   467,   247,   590,   250,   344,   554,
     256,   168,   345,   453,   505,   346,   328,   347,   112,   348,
     644,   198,   465,    83,   570,   329,   330,   634,   137,   636,
     331,   349,   464,   113,    75,   332,   114,   278,   463,   504,
     473,   333,    76,   116,   302,   571,   472,   117,    72,   457,
     119,   282,   334,   591,   572,   121,   335,   466,   303,   314,
     592,    73,   317,   337,   304,   351,   124,    83,   315,    77,
      78,   318,    53,    53,    53,   336,   594,   305,    75,    79,
      75,   573,   423,   595,   498,    80,    76,   593,    76,   156,
     157,   570,   128,   373,   574,   129,    81,   306,   511,   130,
      82,   132,   133,   374,     1,     2,     3,     4,   519,   487,
     596,    83,   571,    77,    78,    77,    78,   528,   359,   324,
     134,   572,   135,    79,   139,    79,   144,   391,   150,    80,
     393,    80,   159,   166,   383,   170,   425,   172,   175,   395,
      81,   176,    81,   179,    82,   615,    82,   187,   573,    15,
      16,    17,   200,   201,   397,    83,   202,    83,    75,   398,
     215,   606,   219,   352,   220,   353,    76,   405,    87,    87,
      87,    87,   460,   125,   126,   160,   203,   413,   205,   206,
     469,   207,   419,   420,   421,   422,   125,   126,   162,   225,
     226,   227,   208,    77,    78,   427,   429,   431,   432,   433,
     434,   435,   436,    79,   209,   440,   442,   443,   444,    80,
     211,   212,   447,   448,   449,   450,   397,   213,   214,   230,
      81,   221,   222,   184,    82,   186,   258,   259,   260,   223,
     224,   184,   229,   186,   231,    83,   233,    75,   526,   242,
     189,   192,   244,   365,   252,    76,   253,   255,   189,   192,
     489,   257,   490,   281,   261,   283,   495,   496,   268,   269,
     301,   500,   273,   274,   502,   503,   184,   186,   506,   507,
     508,   509,    77,    78,   319,   320,    35,   370,   375,   651,
     371,   653,    79,   655,   376,   377,   378,   379,    80,   380,
      75,   381,   382,   384,   385,   386,   387,   392,    76,    81,
     394,   399,   400,    82,   401,   540,   402,   542,   403,   404,
     544,   545,   406,   407,    83,   408,   546,   547,   284,   409,
     410,   550,   366,   411,   412,    77,    78,   555,   556,   557,
     558,   285,   286,   287,   288,    79,   414,   289,   415,   416,
     417,    80,   418,   438,   445,   446,   364,   451,   452,   462,
     290,   471,    81,   484,   486,   535,    82,   488,   491,   492,
     493,   575,   540,   577,   578,   579,   580,    83,   497,   499,
     291,   583,   501,   510,   512,   563,   513,   515,   586,   587,
     517,   520,   521,   522,   601,   523,   525,    87,   529,   530,
     533,   534,   536,   537,   538,   541,   605,   543,   607,   608,
     609,   604,   548,   549,   611,   551,   552,   559,   560,   561,
     562,   576,   581,   582,   621,   584,   585,   602,   603,     0,
     610,   612,   613,   624,   626,   616,   628,   617,   618,   630,
     631,   620,   632,   619,   622,   627,   437,   629,   633,   635,
     637,   675,   638,   639,   647,   642,   648,   645,   666,   669,
     670,   671,   649,   650,   659,   677,   692,   662,   686,   656,
     657,   687,   695,   660,   703,   193,   663,   665,   715,   716,
     667,   668,   674,   724,   725,   676,   726,   672,   673,   727,
     728,   729,   232,   599,   678,     0,   683,     0,   684,   685,
       0,     0,     0,     0,   694,   688,   689,   690,   691,     0,
       0,     0,     0,     0,     0,   696,     0,   702,     0,   697,
     698,   699,   700,   701,     0,     0,   704,   705,   706,   707,
     708,   709,   710,   711,   712,   713,   714,     0,     0,   717,
     718,   719,   720,   721,   722,   723,     7,     9,    11,    13,
       0,     0,     0,     0,   730,     0,     0,     0,     0,     0,
       0,   731,   732,    88,     0,    88,    88,    88,    88,    88,
       0,    88,    88,    88,    88,    88,     0,    88,    88,     0,
       0,     0,    15,    16,    17,     0,     0,    54,    55,     0,
       0,     0,    56,    18,     0,    19,     0,    57,     0,     0,
       0,    88,    58,     0,     0,     0,    20,     0,    21,    88,
       0,    22,     0,     0,    23,    24,     0,    25,     0,     0,
      59,     0,     0,    26,    27,    60,     0,     0,    28,    29,
       0,     0,     0,     0,   138,     0,     0,    61,     0,     0,
       0,    62,    63,    30,     0,    64,     0,    65,    31,     0,
      66,     0,    88,    32,    33,     0,     0,     0,     0,   138,
       0,     0,    34,    67,     0,     0,   174,     0,     0,     0,
       0,   321,     0,     0,     0,     0,     0,     0,     0,   174,
     197,     0,     0,     0,   138,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   138,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   197,     0,   235,   238,     0,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     9,     9,     9,    13,   263,
     265,   267,    13,    13,   271,     0,    13,    13,   276,   138,
       0,     0,   280,    15,    16,    17,     0,     0,    54,    55,
       0,     0,     0,    56,    18,     0,    19,     0,    57,     0,
       0,     0,     0,    58,     0,     0,     0,    20,   312,    21,
       0,     0,    22,     0,     0,    23,    24,     0,    25,     0,
       0,    59,     0,     0,    26,    27,    60,     0,     0,    28,
      29,     0,     0,     0,     0,     0,     0,    11,    61,     0,
       0,     0,    62,    63,    30,     0,    64,     0,    65,    31,
       0,    66,     0,     0,    32,    33,     0,     0,     0,     0,
       0,     0,     0,    34,    67,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    15,    16,    17,     0,     0,     0,     0,     0,
       0,     0,     0,    18,     0,    19,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    20,     0,    21,     0,
       0,    22,     0,     0,    23,    24,     0,    25,     0,    88,
      88,    88,    88,    26,    27,     0,     0,     0,    28,    29,
       0,    15,    16,    17,     0,     0,    54,    55,     0,     0,
     430,    56,    18,    30,    19,     0,    57,     0,    31,   441,
       0,    58,     0,    32,    33,    20,     0,    21,     0,     0,
      22,     0,    34,    23,    24,   456,    25,     0,     0,    59,
       0,     0,    26,    27,    60,     0,     0,    28,    29,     0,
       0,   475,   456,   456,     0,     0,    61,     0,     0,     0,
      62,    63,    30,     0,    64,     0,    65,    31,     0,    66,
       0,     0,    32,    33,    15,    16,    17,     0,     0,    54,
      55,    34,    67,     0,    56,    18,     0,    19,     0,    57,
     323,     0,     0,     0,    58,     0,     0,     0,    20,     0,
      21,     0,     0,    22,     0,     0,    23,    24,     0,    25,
       0,     0,    59,     0,     0,    26,    27,    60,     0,     0,
      28,    29,     0,     0,     0,     0,     0,     0,     0,    61,
       0,     0,     0,    62,    63,    30,     0,    64,     0,    65,
      31,     0,    66,     0,     0,    32,    33,     0,     0,     0,
       0,     0,     0,     0,    34,    67,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     271,   565,   567,   569,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   589,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    88,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   456,     0,   456
};

static const short yycheck[] =
{
       6,   175,     8,   266,    20,   270,    91,   417,   418,     3,
       4,     5,    18,   187,    20,    21,    22,    23,    24,   114,
      26,    27,    28,    29,    30,    76,    32,    33,    20,    21,
      22,    23,    24,    58,    26,    27,    28,    29,    30,    25,
      32,    33,    10,    19,   139,    31,     3,     4,    34,    20,
      56,     3,     4,    21,    37,   150,     3,     4,    64,    19,
     111,   112,   113,    19,    56,   116,    19,    92,   119,     3,
       4,     5,    64,     0,    11,    61,    92,     3,     4,     5,
       3,     4,     5,    89,    20,    27,    72,     3,     4,     5,
       3,     4,     5,    44,    80,     3,     4,     5,    92,    67,
      19,   107,   108,     3,     4,    11,     3,     4,   114,    92,
     109,    51,    81,     3,     4,   107,    92,    20,    58,   214,
      57,    92,   173,    92,    92,    43,     7,    64,    20,   135,
     129,   130,    92,   139,    52,    92,    92,    57,    58,    92,
      92,    92,   193,    91,   150,    92,   132,   133,    85,    86,
      91,    57,   404,   159,    51,    92,    92,    91,    64,   158,
     412,    42,    43,    44,   170,    91,    47,    91,    91,    58,
       7,    52,    92,    92,    92,    91,   402,    58,    91,    85,
      86,    81,    71,    91,   410,   184,    92,   186,    69,    92,
     196,    24,    73,   399,   446,    76,    33,    78,    91,    80,
      92,    92,   408,    84,    22,    42,    43,   617,   214,   619,
      47,    92,   407,    91,     7,    52,    91,   216,   406,   445,
     415,    58,    15,    91,    39,    43,   414,    91,    58,   401,
      91,   230,    69,    58,    52,    91,    73,   409,    53,   245,
      65,    71,   248,   264,    59,   266,    91,    84,   247,    42,
      43,   250,   258,   259,   260,    92,    58,    72,     7,    52,
       7,    79,    92,    65,   438,    58,    15,    92,    15,     3,
       4,    22,    91,   279,    92,    91,    69,    92,   452,    91,
      73,    91,    91,   282,    87,    88,    89,    90,   462,    81,
      92,    84,    43,    42,    43,    42,    43,   471,   563,    92,
      91,    52,    91,    52,    91,    52,    91,   313,    91,    58,
     316,    58,    91,    91,   300,    91,   367,    91,    91,   318,
      69,    91,    69,    91,    73,   588,    73,    91,    79,     3,
       4,     5,    91,    91,   320,    84,    91,    84,     7,   325,
      92,    92,    92,    92,    92,    92,    15,   333,   354,   355,
     356,   357,   403,     3,     4,     5,    91,   343,    91,    91,
     411,    91,   354,   355,   356,   357,     3,     4,     5,     3,
       4,     5,    91,    42,    43,   374,   375,   376,   377,   378,
     379,   380,   381,    52,    91,   384,   385,   386,   387,    58,
      91,    91,   391,   392,   393,   394,   382,    91,    91,    91,
      69,    92,    92,   402,    73,   404,   200,   201,   202,    92,
      92,   410,    92,   412,    92,    84,    92,     7,   469,    92,
     406,   407,    92,    92,    92,    15,    92,    92,   414,   415,
     429,    92,   431,    92,   203,    92,   435,   436,   207,   208,
      92,   440,   211,   212,   443,   444,   445,   446,   447,   448,
     449,   450,    42,    43,    92,    91,     6,    92,    91,   633,
      92,   635,    52,   637,    91,    91,    91,    91,    58,    91,
       7,    91,    91,    91,    91,    91,    91,    91,    15,    69,
      91,    91,    91,    73,    91,   484,    91,   486,    91,    91,
     489,   490,    91,    91,    84,    91,   495,   496,    40,    91,
      91,   500,    92,    91,    91,    42,    43,   506,   507,   508,
     509,    53,    54,    55,    56,    52,    91,    59,    91,    91,
      91,    58,    91,    91,    91,    91,   272,    92,    91,    91,
      72,    91,    69,    91,    91,    91,    73,    92,    92,    92,
      92,   540,   541,   542,   543,   544,   545,    84,    92,    92,
      92,   550,    92,    92,    92,   535,    92,    92,   557,   558,
      92,    92,    92,    92,   570,    92,    92,   573,    92,    92,
      92,    92,    91,    91,    91,    91,   575,    91,   577,   578,
     579,   573,    92,    92,   583,    92,    92,    92,    92,    92,
      91,   541,    92,    92,   600,    92,    92,    91,    91,    -1,
      92,    92,    92,   602,   603,   591,   605,    91,   594,   608,
     609,   597,   611,    91,    91,    91,   382,    92,    91,    91,
      91,    91,   621,   622,    92,   624,    92,   626,    92,    92,
      92,    92,   631,   632,   640,    91,    91,   643,    92,   638,
     639,    92,    91,   642,    91,   134,   645,   646,    92,    92,
     649,   650,   658,    92,    92,   661,    92,   656,   657,    92,
      92,    92,   170,   568,   663,    -1,   665,    -1,   667,   668,
      -1,    -1,    -1,    -1,   680,   674,   675,   676,   677,    -1,
      -1,    -1,    -1,    -1,    -1,   684,    -1,   693,    -1,   688,
     689,   690,   691,   692,    -1,    -1,   695,   696,   697,   698,
     699,   700,   701,   702,   703,   704,   705,    -1,    -1,   708,
     709,   710,   711,   712,   713,   714,     1,     2,     3,     4,
      -1,    -1,    -1,    -1,   723,    -1,    -1,    -1,    -1,    -1,
      -1,   730,   731,    18,    -1,    20,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    30,    -1,    32,    33,    -1,
      -1,    -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,
      -1,    -1,    13,    14,    -1,    16,    -1,    18,    -1,    -1,
      -1,    56,    23,    -1,    -1,    -1,    27,    -1,    29,    64,
      -1,    32,    -1,    -1,    35,    36,    -1,    38,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    -1,    49,    50,
      -1,    -1,    -1,    -1,    89,    -1,    -1,    58,    -1,    -1,
      -1,    62,    63,    64,    -1,    66,    -1,    68,    69,    -1,
      71,    -1,   107,    74,    75,    -1,    -1,    -1,    -1,   114,
      -1,    -1,    83,    84,    -1,    -1,   121,    -1,    -1,    -1,
      -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,    -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   170,    -1,   172,   173,    -1,
      -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,   212,   213,   214,
      -1,    -1,   217,     3,     4,     5,    -1,    -1,     8,     9,
      -1,    -1,    -1,    13,    14,    -1,    16,    -1,    18,    -1,
      -1,    -1,    -1,    23,    -1,    -1,    -1,    27,   243,    29,
      -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    -1,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,   272,    58,    -1,
      -1,    -1,    62,    63,    64,    -1,    66,    -1,    68,    69,
      -1,    71,    -1,    -1,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    83,    84,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    14,    -1,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    27,    -1,    29,    -1,
      -1,    32,    -1,    -1,    35,    36,    -1,    38,    -1,   354,
     355,   356,   357,    44,    45,    -1,    -1,    -1,    49,    50,
      -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,    -1,
     375,    13,    14,    64,    16,    -1,    18,    -1,    69,   384,
      -1,    23,    -1,    74,    75,    27,    -1,    29,    -1,    -1,
      32,    -1,    83,    35,    36,   400,    38,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    -1,    49,    50,    -1,
      -1,   416,   417,   418,    -1,    -1,    58,    -1,    -1,    -1,
      62,    63,    64,    -1,    66,    -1,    68,    69,    -1,    71,
      -1,    -1,    74,    75,     3,     4,     5,    -1,    -1,     8,
       9,    83,    84,    -1,    13,    14,    -1,    16,    -1,    18,
      92,    -1,    -1,    -1,    23,    -1,    -1,    -1,    27,    -1,
      29,    -1,    -1,    32,    -1,    -1,    35,    36,    -1,    38,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    -1,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
      -1,    -1,    -1,    62,    63,    64,    -1,    66,    -1,    68,
      69,    -1,    71,    -1,    -1,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    83,    84,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     535,   536,   537,   538,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   562,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   573,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   617,    -1,   619
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned char yystos[] =
{
       0,    87,    88,    89,    90,    94,    95,   211,   123,   211,
     101,   211,   164,   211,     0,     3,     4,     5,    14,    16,
      27,    29,    32,    35,    36,    38,    44,    45,    49,    50,
      64,    69,    74,    75,    83,    96,    97,    98,    99,   102,
     105,   106,   117,   119,   121,   149,   151,   153,   155,   157,
     159,   161,   182,   205,     8,     9,    13,    18,    23,    41,
      46,    58,    62,    63,    66,    68,    71,    84,    96,   126,
     145,   147,    58,    71,   137,     7,    15,    42,    43,    52,
      58,    69,    73,    84,   174,   202,   204,   205,   211,    91,
     202,   202,   202,   202,   202,   201,   205,   211,   202,   202,
     202,   202,   202,   201,   202,   202,   201,    27,    91,    91,
     202,    91,    91,    91,    91,   201,    91,    91,   202,    91,
     127,    91,   201,   138,    91,     3,     4,   210,    91,    91,
      91,   201,    91,    91,    91,    91,   203,   205,   211,    91,
     118,   120,   122,   158,    91,   162,   160,   156,   150,   183,
      91,   152,   154,   107,   202,   205,     3,     4,   208,    91,
       5,   210,     5,   210,   210,   203,    91,   210,    24,   148,
      91,   210,    91,   196,   211,    91,    91,   173,   210,    91,
     170,   199,   201,   171,   208,   172,   208,    91,   169,   201,
     168,   198,   201,   196,   205,   206,   207,   211,    92,   203,
      91,    91,    91,    91,   103,    91,    91,    91,    91,    91,
     203,    91,    91,    91,    91,    92,   208,   124,   205,    92,
      92,    92,    92,    92,    92,     3,     4,     5,   209,    92,
      91,    92,   206,    92,   128,   211,   146,   210,   211,   209,
     139,   211,    92,   165,    92,    19,    92,   208,    20,    92,
     208,   209,    92,    92,    51,    92,   205,    92,   123,   123,
     123,   164,   104,   211,   167,   211,   166,   211,   164,   164,
     186,   211,   100,   164,   164,   108,   211,   203,   208,   125,
     211,    92,   208,    92,    40,    53,    54,    55,    56,    59,
      72,    92,   129,   130,   131,   132,   133,   134,   135,    51,
      58,    92,    39,    53,    59,    72,    92,   140,   141,   142,
     143,   163,   211,    91,   205,   208,    91,   205,   208,    92,
      91,    92,    92,    92,    92,    58,    92,     7,    33,    42,
      43,    47,    52,    58,    69,    73,    92,   174,     7,    42,
      43,    47,    52,    58,    69,    73,    76,    78,    80,    92,
     161,   174,    92,    92,    11,    57,    85,    86,    92,   182,
     184,   187,   190,   193,   101,    92,    92,    81,    92,   109,
      92,    92,    92,   205,   208,    91,    91,    91,    91,    91,
      91,    91,    91,   201,    91,    91,    91,    91,    43,    52,
      92,   205,    91,   205,    91,   208,   200,   201,   201,    91,
      91,    91,    91,    91,    91,   201,    91,    91,    91,    91,
      91,    91,    91,   201,    91,    91,    91,    91,    91,   202,
     202,   202,   202,    92,   110,   210,    81,   208,   136,   208,
     211,   208,   208,   208,   208,   208,   208,   200,    91,   144,
     208,   211,   208,   208,   208,    91,    91,   208,   208,   208,
     208,    92,    91,   173,   181,   197,   211,   170,   171,   180,
     210,   172,    91,   169,   168,   173,   170,   171,   175,   210,
     172,    91,   169,   168,   178,   211,   176,   197,   177,   197,
     185,   188,   191,   194,    91,   111,    91,    81,    92,   208,
     208,    92,    92,    92,    92,   208,   208,    92,   209,    92,
     208,    92,   208,   208,   171,   172,   208,   208,   208,   208,
      92,   209,    92,    92,   208,    92,    92,    92,    92,   209,
      92,    92,    92,    92,    92,    92,   210,    92,   209,    92,
      92,    37,    92,    92,    92,    91,    91,    91,    91,   112,
     208,    91,   208,    91,   208,   208,   208,   208,    92,    92,
     208,    92,    92,    92,    92,   208,   208,   208,   208,    92,
      92,    92,    91,   186,   189,   211,   192,   211,   195,   211,
      22,    43,    52,    79,    92,   208,   112,   208,   208,   208,
     208,    92,    92,   208,    92,    92,   208,   208,   179,   211,
      92,    58,    65,    92,    58,    65,    92,    58,    92,   187,
      91,   205,    91,    91,   202,   208,    92,   208,   208,   208,
      92,   208,    92,    92,    92,   161,   201,    91,   201,    91,
     201,   205,    91,   115,   208,   116,   208,    91,   208,    92,
     208,   208,   208,    91,   197,    91,   197,    91,   208,   208,
      19,    92,   208,    20,    92,   208,   113,    92,    92,   208,
     208,   209,    92,   209,    92,   209,   208,   208,    91,   205,
     208,    91,   205,   208,   114,   208,    92,   208,   208,    92,
      92,    92,   208,   208,   205,    91,   205,    91,   208,    10,
      21,    67,    92,   208,   208,   208,    92,    92,   208,   208,
     208,   208,    91,    91,   205,    91,   208,   208,   208,   208,
     208,   208,   205,    91,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,    92,    92,   208,   208,   208,
     208,   208,   208,   208,    92,    92,    92,    92,    92,    92,
     208,   208,   208
};

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrlab1


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  Current.first_line   = Rhs[1].first_line;      \
  Current.first_column = Rhs[1].first_column;    \
  Current.last_line    = Rhs[N].last_line;       \
  Current.last_column  = Rhs[N].last_column;
#endif

/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YYDSYMPRINT(Args)			\
do {						\
  if (yydebug)					\
    yysymprint Args;				\
} while (0)

# define YYDSYMPRINTF(Title, Token, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Token, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (cinluded).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short *bottom, short *top)
#else
static void
yy_stack_print (bottom, top)
    short *bottom;
    short *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YYDSYMPRINT(Args)
# define YYDSYMPRINTF(Title, Token, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

#endif /* !YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    {
      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
# ifdef YYPRINT
      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
    }
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yytype, yyvaluep)
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 7:
#line 232 "parser.yxx"
    {
  assert(!egg_stack.empty());
  DCAST(EggData, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;

  case 25:
#line 275 "parser.yxx"
    {
  string strval = yyvsp[-1]._string;
  EggCoordinateSystem *cs = new EggCoordinateSystem;

  CoordinateSystem f = parse_coordinate_system_string(strval);
  if (f == CS_invalid) {
    eggyywarning("Unknown coordinate system " + strval);
  } else {
    cs->set_value(f);
  }
  yyval._egg = cs;
}
    break;

  case 26:
#line 298 "parser.yxx"
    {
  yyval._egg = new EggComment(yyvsp[-3]._string, yyvsp[-1]._string);
}
    break;

  case 27:
#line 312 "parser.yxx"
    {
  string tref_name = yyvsp[-2]._string;
  Filename filename = yyvsp[0]._string;
  EggTexture *texture = new EggTexture(tref_name, filename);

  if (textures.find(tref_name) != textures.end()) {
    eggyywarning("Duplicate texture name " + tref_name);
  }
  textures[tref_name] = texture;

  egg_stack.push_back(texture);
}
    break;

  case 28:
#line 325 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 30:
#line 341 "parser.yxx"
    {
  EggTexture *texture = DCAST(EggTexture, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "format") == 0) {
    EggTexture::Format f = EggTexture::string_format(strval);
    if (f == EggTexture::F_unspecified) {
      eggyywarning("Unknown texture format " + strval);
    } else {
      texture->set_format(f);
    }

  } else if (cmp_nocase_uh(name, "wrap") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_mode(w);
    }

  } else if (cmp_nocase_uh(name, "wrapu") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_u(w);
    }

  } else if (cmp_nocase_uh(name, "wrapv") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_v(w);
    }

  } else if (cmp_nocase_uh(name, "minfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_minfilter(f);
    }

  } else if (cmp_nocase_uh(name, "magfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_magfilter(f);
    }

  } else if (cmp_nocase_uh(name, "anisotropic_degree") == 0) {
    texture->set_anisotropic_degree((int)value);

  } else if (cmp_nocase_uh(name, "envtype") == 0) {
    EggTexture::EnvType e = EggTexture::string_env_type(strval);
    if (e == EggTexture::ET_unspecified) {
      eggyywarning("Unknown texture env type " + strval);
    } else {
      texture->set_env_type(e);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb") == 0) {
    EggTexture::CombineMode cm = EggTexture::string_combine_mode(strval);
    if (cm == EggTexture::CM_unspecified) {
      eggyywarning("Unknown combine mode " + strval);
    } else {
      texture->set_combine_mode(EggTexture::CC_rgb, cm);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source0") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 0, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand0") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 0, co);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source1") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 1, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand1") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 1, co);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source2") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 2, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand2") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 2, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha") == 0) {
    EggTexture::CombineMode cm = EggTexture::string_combine_mode(strval);
    if (cm == EggTexture::CM_unspecified) {
      eggyywarning("Unknown combine mode " + strval);
    } else {
      texture->set_combine_mode(EggTexture::CC_alpha, cm);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source0") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 0, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand0") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 0, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source1") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 1, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand1") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 1, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source2") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 2, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand2") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 2, co);
    }

  } else if (cmp_nocase_uh(name, "saved_result") == 0) {
    texture->set_saved_result(((int)value) != 0);

  } else if (cmp_nocase_uh(name, "tex_gen") == 0) {
    EggTexture::TexGen tex_gen = EggTexture::string_tex_gen(strval);
    if (tex_gen == EggTexture::TG_unspecified) {
      eggyywarning("Unknown texture env type " + strval);
    } else {
      texture->set_tex_gen(tex_gen);
    }

  } else if (cmp_nocase_uh(name, "stage_name") == 0) {
    texture->set_stage_name(strval);

  } else if (cmp_nocase_uh(name, "priority") == 0) {
    texture->set_priority((int)value);

  } else if (cmp_nocase_uh(name, "blendr") == 0) {
    Colorf color = texture->get_color();
    color[0] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blendg") == 0) {
    Colorf color = texture->get_color();
    color[1] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blendb") == 0) {
    Colorf color = texture->get_color();
    color[2] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blenda") == 0) {
    Colorf color = texture->get_color();
    color[3] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "uv_name") == 0) {
    texture->set_uv_name(strval);

  } else if (cmp_nocase_uh(name, "rgb_scale") == 0) {
    int int_value = (int)value;
    if (int_value != 1 && int_value != 2 && int_value != 4) {
      eggyyerror("Invalid rgb-scale value " + strval);
    } else {
      texture->set_rgb_scale(int_value);
    }

  } else if (cmp_nocase_uh(name, "alpha_scale") == 0) {
    int int_value = (int)value;
    if (int_value != 1 && int_value != 2 && int_value != 4) {
      eggyyerror("Invalid alpha-scale value " + strval);
    } else {
      texture->set_alpha_scale(int_value);
    }

  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      texture->set_alpha_mode(a);
    }

  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      texture->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      texture->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      texture->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    texture->set_draw_order((int)value);

  } else if (cmp_nocase_uh(name, "bin") == 0) {
    texture->set_bin(strval);

  } else if (cmp_nocase_uh(name, "alpha_file") == 0) {
    texture->set_alpha_filename(strval);

  } else if (cmp_nocase_uh(name, "alpha_file_channel") == 0) {
    texture->set_alpha_file_channel((int)value);

  } else {
    eggyywarning("Unsupported texture scalar: " + name);
  }
}
    break;

  case 32:
#line 637 "parser.yxx"
    {
  string mref_name = yyvsp[-1]._string;
  EggMaterial *material = new EggMaterial(mref_name);

  if (materials.find(mref_name) != materials.end()) {
    eggyywarning("Duplicate material name " + mref_name);
  }
  materials[mref_name] = material;

  egg_stack.push_back(material);
}
    break;

  case 33:
#line 649 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 35:
#line 665 "parser.yxx"
    {
  EggMaterial *material = DCAST(EggMaterial, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "diffr") == 0) {
    Colorf diff = material->get_diff();
    diff[0] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffg") == 0) {
    Colorf diff = material->get_diff();
    diff[1] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffb") == 0) {
    Colorf diff = material->get_diff();
    diff[2] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffa") == 0) {
    Colorf diff = material->get_diff();
    diff[3] = value;
    material->set_diff(diff);

  } else if (cmp_nocase_uh(name, "ambr") == 0) {
    Colorf amb = material->get_amb();
    amb[0] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambg") == 0) {
    Colorf amb = material->get_amb();
    amb[1] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambb") == 0) {
    Colorf amb = material->get_amb();
    amb[2] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "amba") == 0) {
    Colorf amb = material->get_amb();
    amb[3] = value;
    material->set_amb(amb);

  } else if (cmp_nocase_uh(name, "emitr") == 0) {
    Colorf emit = material->get_emit();
    emit[0] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitg") == 0) {
    Colorf emit = material->get_emit();
    emit[1] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitb") == 0) {
    Colorf emit = material->get_emit();
    emit[2] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emita") == 0) {
    Colorf emit = material->get_emit();
    emit[3] = value;
    material->set_emit(emit);

  } else if (cmp_nocase_uh(name, "specr") == 0) {
    Colorf spec = material->get_spec();
    spec[0] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specg") == 0) {
    Colorf spec = material->get_spec();
    spec[1] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specb") == 0) {
    Colorf spec = material->get_spec();
    spec[2] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "speca") == 0) {
    Colorf spec = material->get_spec();
    spec[3] = value;
    material->set_spec(spec);

  } else if (cmp_nocase_uh(name, "shininess") == 0) {
    material->set_shininess(value);

  } else if (cmp_nocase_uh(name, "local") == 0) {
    material->set_local(value != 0.0);

  } else {
    eggyywarning("Unsupported material scalar: " + name);
  }
}
    break;

  case 36:
#line 760 "parser.yxx"
    {
  string node_name = yyvsp[-3]._string;
  Filename filename = yyvsp[-1]._string;
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  yyval._egg = ref;
}
    break;

  case 37:
#line 767 "parser.yxx"
    {
  if (cmp_nocase_uh(yyvsp[-5]._string, "group") != 0) {
    eggyyerror("keyword 'group' expected");
  }
  string node_name = yyvsp[-3]._string;
  Filename filename = yyvsp[-1]._string;
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  yyval._egg = ref;
}
    break;

  case 38:
#line 787 "parser.yxx"
    {
  string name = yyvsp[0]._string;
  EggVertexPool *pool = NULL;

  VertexPools::const_iterator vpi = vertex_pools.find(name);
  if (vpi != vertex_pools.end()) {
    pool = (*vpi).second;
    if (pool->has_defined_vertices()) {
      eggyywarning("Duplicate vertex pool name " + name);
      pool = new EggVertexPool(name);
      // The egg syntax starts counting at 1 by convention.
      pool->set_highest_index(0);
      vertex_pools[name] = pool;
    }
  } else {
    pool = new EggVertexPool(name);
    // The egg syntax starts counting at 1 by convention.
    pool->set_highest_index(0);
    vertex_pools[name] = pool;
  }

  egg_stack.push_back(pool);
}
    break;

  case 39:
#line 811 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 42:
#line 839 "parser.yxx"
    {
  egg_stack.push_back(new EggVertex);
}
    break;

  case 43:
#line 843 "parser.yxx"
    {
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  DCAST(EggVertexPool, egg_stack.back())->add_vertex(vtx);
}
    break;

  case 44:
#line 850 "parser.yxx"
    {
  vertex_index = (int)yyvsp[0]._number;
  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());

  if (vertex_index < 0) {
    ostringstream errmsg;
    errmsg << "Ignoring invalid vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;

  } else if (pool->has_vertex(vertex_index)) {
    ostringstream errmsg;
    errmsg << "Ignoring duplicate vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;
  }

  // Even if we didn't like the vertex index number, we still need to
  // go ahead and parse the vertex.  We just won't save it.

  egg_stack.push_back(new EggVertex);
}
    break;

  case 45:
#line 875 "parser.yxx"
    {
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());
  if (vertex_index != -1) {
    pool->add_vertex(vtx, vertex_index);
  }
}
    break;

  case 46:
#line 896 "parser.yxx"
    {
  DCAST(EggVertex, egg_stack.back())->set_pos(yyvsp[0]._number);
}
    break;

  case 47:
#line 900 "parser.yxx"
    {
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint2d(yyvsp[-1]._number, yyvsp[0]._number));
}
    break;

  case 48:
#line 904 "parser.yxx"
    {
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint3d(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;

  case 49:
#line 908 "parser.yxx"
    {
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint4d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;

  case 50:
#line 912 "parser.yxx"
    {
  EggVertex *vertex = DCAST(EggVertex, egg_stack.back());
  EggVertexUV *uv = new EggVertexUV(yyvsp[-1]._string, TexCoordd::zero());
  egg_stack.push_back(uv);
  if (vertex->has_uv(yyvsp[-1]._string)) {
    eggyywarning("Ignoring repeated UV name " + yyvsp[-1]._string);
  } else {
    vertex->set_uv_obj(uv);
  }
}
    break;

  case 51:
#line 923 "parser.yxx"
    {
  egg_stack.pop_back();
}
    break;

  case 54:
#line 929 "parser.yxx"
    {
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;

  case 55:
#line 937 "parser.yxx"
    {
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
}
    break;

  case 56:
#line 956 "parser.yxx"
    {
  DCAST(EggVertexUV, egg_stack.back())->set_uv(TexCoordd(yyvsp[-1]._number, yyvsp[0]._number));
}
    break;

  case 57:
#line 960 "parser.yxx"
    {
  if (DCAST(EggVertexUV, egg_stack.back())->has_tangent()) {
    eggyywarning("Ignoring repeated tangent");
  } else {
    DCAST(EggVertexUV, egg_stack.back())->set_tangent(Normald(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
  }
}
    break;

  case 58:
#line 968 "parser.yxx"
    {
  if (DCAST(EggVertexUV, egg_stack.back())->has_binormal()) {
    eggyywarning("Ignoring repeated binormal");
  } else {
    DCAST(EggVertexUV, egg_stack.back())->set_binormal(Normald(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
  }
}
    break;

  case 59:
#line 976 "parser.yxx"
    {
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-4]._string, LVector2d(yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
}
    break;

  case 60:
#line 984 "parser.yxx"
    {
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-3]._string, LVector2d(yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-3]._string);
  }
}
    break;

  case 61:
#line 1002 "parser.yxx"
    {
  DCAST(EggVertex, egg_stack.back())->set_normal(Normald(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;

  case 62:
#line 1006 "parser.yxx"
    {
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;

  case 63:
#line 1014 "parser.yxx"
    {
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
}
    break;

  case 64:
#line 1032 "parser.yxx"
    {
  DCAST(EggVertex, egg_stack.back())->set_color(Colorf(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;

  case 65:
#line 1036 "parser.yxx"
    {
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-6]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-6]._string);
  }
}
    break;

  case 66:
#line 1044 "parser.yxx"
    {
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-5]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;

  case 67:
#line 1062 "parser.yxx"
    {
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  egg_stack.push_back(group);
}
    break;

  case 68:
#line 1067 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 69:
#line 1082 "parser.yxx"
    {
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  group->set_group_type(EggGroup::GT_joint);
  egg_stack.push_back(group);
}
    break;

  case 70:
#line 1088 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 71:
#line 1103 "parser.yxx"
    {
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  group->set_group_type(EggGroup::GT_instance);
  egg_stack.push_back(group);
}
    break;

  case 72:
#line 1109 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 74:
#line 1125 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  unsigned long ulong_value = yyvsp[-1]._ulong;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    group->set_switch_fps(value);

  } else if (cmp_nocase_uh(name, "no_fog") == 0) {
    group->set_nofog_flag(value != 0);

  } else if (cmp_nocase_uh(name, "decal") == 0) {
    group->set_decal_flag(value != 0);

  } else if (cmp_nocase_uh(name, "direct") == 0) {
    group->set_direct_flag(value != 0);

  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      group->set_alpha_mode(a);
    }

  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      group->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      group->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      group->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    group->set_draw_order(ulong_value);

  } else if (cmp_nocase_uh(name, "bin") == 0) {
    group->set_bin(strval);

  } else if (cmp_nocase_uh(name, "collide_mask") == 0) {
    group->set_collide_mask(group->get_collide_mask() | ulong_value);

  } else if (cmp_nocase_uh(name, "from_collide_mask") == 0) {
    group->set_from_collide_mask(group->get_from_collide_mask() | ulong_value);

  } else if (cmp_nocase_uh(name, "into_collide_mask") == 0) {
    group->set_into_collide_mask(group->get_into_collide_mask() | ulong_value);

  } else if (cmp_nocase_uh(name, "portal") == 0) {
    group->set_portal_flag(value != 0);

  } else if (cmp_nocase_uh(name, "polylight") == 0) {
    group->set_polylight_flag(value != 0);

  } else if (cmp_nocase_uh(name, "indexed") == 0) {
    group->set_indexed_flag(value != 0);

  } else if (cmp_nocase_uh(name, "blend") == 0) {
    EggGroup::BlendMode blend_mode =
      EggGroup::string_blend_mode(strval);
    if (blend_mode == EggGroup::BM_unspecified) {
      eggyywarning("Unknown blend mode " + strval);
    } else {
      group->set_blend_mode(blend_mode);
    }

  } else if (cmp_nocase_uh(name, "blendop_a") == 0) {
    EggGroup::BlendOperand blend_operand =
      EggGroup::string_blend_operand(strval);
    if (blend_operand == EggGroup::BO_unspecified) {
      eggyywarning("Unknown blend operand " + strval);
    } else {
      group->set_blend_operand_a(blend_operand);
    }

  } else if (cmp_nocase_uh(name, "blendop_b") == 0) {
    EggGroup::BlendOperand blend_operand =
      EggGroup::string_blend_operand(strval);
    if (blend_operand == EggGroup::BO_unspecified) {
      eggyywarning("Unknown blend operand " + strval);
    } else {
      group->set_blend_operand_b(blend_operand);
    }

  } else if (cmp_nocase_uh(name, "blendr") == 0) {
    Colorf color = group->get_blend_color();
    color[0] = value;
    group->set_blend_color(color);

  } else if (cmp_nocase_uh(name, "blendg") == 0) {
    Colorf color = group->get_blend_color();
    color[1] = value;
    group->set_blend_color(color);

  } else if (cmp_nocase_uh(name, "blendb") == 0) {
    Colorf color = group->get_blend_color();
    color[2] = value;
    group->set_blend_color(color);

  } else if (cmp_nocase_uh(name, "blenda") == 0) {
    Colorf color = group->get_blend_color();
    color[3] = value;
    group->set_blend_color(color);

  } else {
    eggyywarning("Unknown group scalar " + name);
  }
}
    break;

  case 75:
#line 1255 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::BillboardType f = EggGroup::string_billboard_type(strval);
  if (f == EggGroup::BT_none) {
    eggyywarning("Unknown billboard type " + strval);
  } else {
    group->set_billboard_type(f);
  }
}
    break;

  case 76:
#line 1267 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_billboard_center(LPoint3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
}
    break;

  case 77:
#line 1272 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = yyvsp[-4]._string;

  group->set_collision_name(name);
}
    break;

  case 78:
#line 1279 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_dcs_type(value!=0 ? EggGroup::DC_default : EggGroup::DC_none);
}
    break;

  case 79:
#line 1285 "parser.yxx"
    {
  // The special flavor of DCS, with { sync } or { nosync }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::DCSType f = EggGroup::string_dcs_type(strval);
  if (f == EggGroup::DC_unspecified) {
    eggyywarning("Unknown DCS type " + strval);
  } else {
    group->set_dcs_type(f);
  }
}
    break;

  case 80:
#line 1298 "parser.yxx"
    {
  // The traditional flavor of DART, with { 0 } or { 1 }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_dart_type(value!=0 ? EggGroup::DT_default : EggGroup::DT_none);
}
    break;

  case 81:
#line 1305 "parser.yxx"
    {
  // The special flavor of DART, with { sync } or { nosync }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::DartType f = EggGroup::string_dart_type(strval);
  if (f == EggGroup::DT_none) {
    eggyywarning("Unknown dart type " + strval);
  } else {
    group->set_dart_type(f);
  }
}
    break;

  case 82:
#line 1318 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_switch_flag(value!=0);
}
    break;

  case 83:
#line 1324 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string type = yyvsp[-1]._string;
  group->add_object_type(type);
}
    break;

  case 84:
#line 1330 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_model_flag(value!=0);
}
    break;

  case 85:
#line 1336 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_tag(yyvsp[-3]._string, yyvsp[-1]._string);
}
    break;

  case 86:
#line 1341 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_texlist_flag(value!=0);
}
    break;

  case 90:
#line 1350 "parser.yxx"
    {
  DCAST(EggGroup, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;

  case 91:
#line 1364 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[0]._string;

  EggGroup::CollisionSolidType f = EggGroup::string_cs_type(strval);
  if (f == EggGroup::CST_none) {
    eggyywarning("Unknown collision solid type " + strval);
  } else {
    if (f == EggGroup::CST_polyset && group->get_cs_type() != EggGroup::CST_none) {
      // By convention, a CST_polyset doesn't replace any existing
      // contradictory type, so ignore it if this happens.  This
      // allows the artist to place, for instance, <ObjectType> {
      // sphere } and <ObjectType> { trigger } together.

    } else {
      group->set_cs_type(f);
    }
  }
}
    break;

  case 93:
#line 1395 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[0]._string;

  EggGroup::CollideFlags f = EggGroup::string_collide_flags(strval);
  if (f == EggGroup::CF_none) {
    eggyywarning("Unknown collision flag " + strval);
  } else {
    group->set_collide_flags(group->get_collide_flags() | f);
  }
}
    break;

  case 94:
#line 1417 "parser.yxx"
    {
  DCAST(EggGroup, egg_stack.back())->clear_transform();
}
    break;

  case 104:
#line 1443 "parser.yxx"
    {
  DCAST(EggGroup, egg_stack.back())->add_translate(LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
}
    break;

  case 105:
#line 1449 "parser.yxx"
    {
  DCAST(EggGroup, egg_stack.back())->add_rotx(yyvsp[-1]._number);
}
    break;

  case 106:
#line 1455 "parser.yxx"
    {
  DCAST(EggGroup, egg_stack.back())->add_roty(yyvsp[-1]._number);
}
    break;

  case 107:
#line 1461 "parser.yxx"
    {
  DCAST(EggGroup, egg_stack.back())->add_rotz(yyvsp[-1]._number);
}
    break;

  case 108:
#line 1467 "parser.yxx"
    {
  DCAST(EggGroup, egg_stack.back())->add_rotate(yyvsp[-4]._number, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
}
    break;

  case 109:
#line 1473 "parser.yxx"
    {
  DCAST(EggGroup, egg_stack.back())->add_scale(LVecBase3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
}
    break;

  case 110:
#line 1477 "parser.yxx"
    {
  DCAST(EggGroup, egg_stack.back())->add_uniform_scale(yyvsp[-1]._number);
}
    break;

  case 113:
#line 1492 "parser.yxx"
    {
  DCAST(EggGroup, egg_stack.back())->add_matrix
    (LMatrix4d(yyvsp[-15]._number, yyvsp[-14]._number, yyvsp[-13]._number, yyvsp[-12]._number,
               yyvsp[-11]._number, yyvsp[-10]._number, yyvsp[-9]._number, yyvsp[-8]._number,
               yyvsp[-7]._number, yyvsp[-6]._number, yyvsp[-5]._number, yyvsp[-4]._number,
               yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;

  case 114:
#line 1511 "parser.yxx"
    {
  matrix_2d = LMatrix3d::ident_mat();
}
    break;

  case 115:
#line 1515 "parser.yxx"
    {
  DCAST(EggTexture, egg_stack.back())->set_transform(matrix_2d);
}
    break;

  case 121:
#line 1537 "parser.yxx"
    {
  matrix_2d *= LMatrix3d::translate_mat(yyvsp[-2]._number, yyvsp[-1]._number);
}
    break;

  case 122:
#line 1543 "parser.yxx"
    {
  matrix_2d *= LMatrix3d::rotate_mat(yyvsp[-1]._number);
}
    break;

  case 123:
#line 1549 "parser.yxx"
    {
  matrix_2d *= LMatrix3d::scale_mat(yyvsp[-2]._number, yyvsp[-1]._number);
}
    break;

  case 126:
#line 1562 "parser.yxx"
    {
  matrix_2d *= LMatrix3d(yyvsp[-8]._number, yyvsp[-7]._number, yyvsp[-6]._number,
                         yyvsp[-5]._number, yyvsp[-4]._number, yyvsp[-3]._number,
                         yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number);
}
    break;

  case 127:
#line 1579 "parser.yxx"
    {
  if (yyvsp[-2]._egg != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, yyvsp[-2]._egg);
    EggGroup *group = DCAST(EggGroup, egg_stack.back());
    PTA_double nums = yyvsp[-6]._number_list;
    double membership = yyvsp[-5]._number;

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_forward_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        group->ref_vertex(vertex, membership);
      }
    }
  }
}
    break;

  case 128:
#line 1612 "parser.yxx"
    {
  yyval._number = 1.0;
}
    break;

  case 129:
#line 1616 "parser.yxx"
    {
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  double result = yyvsp[-5]._number;
  
  if (cmp_nocase_uh(name, "membership") == 0) {
    result = value;
  } else {
    eggyywarning("Unknown group vertex scalar " + name);
  }

  yyval._number = result;
}
    break;

  case 131:
#line 1653 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance(yyvsp[-8]._number, yyvsp[-7]._number, LPoint3d(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number)));
}
    break;

  case 132:
#line 1658 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance(yyvsp[-9]._number, yyvsp[-8]._number, LPoint3d(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number), yyvsp[-7]._number));
}
    break;

  case 133:
#line 1675 "parser.yxx"
    {
  egg_stack.push_back(new EggPolygon(yyvsp[0]._string));
}
    break;

  case 134:
#line 1679 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 135:
#line 1694 "parser.yxx"
    {
  egg_stack.push_back(new EggTriangleFan(yyvsp[0]._string));
}
    break;

  case 136:
#line 1698 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 137:
#line 1713 "parser.yxx"
    {
  egg_stack.push_back(new EggTriangleStrip(yyvsp[0]._string));
}
    break;

  case 138:
#line 1717 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 139:
#line 1732 "parser.yxx"
    {
  egg_stack.push_back(new EggPoint(yyvsp[0]._string));
}
    break;

  case 140:
#line 1736 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 141:
#line 1751 "parser.yxx"
    {
  egg_stack.push_back(new EggLine(yyvsp[0]._string));
}
    break;

  case 142:
#line 1755 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 143:
#line 1770 "parser.yxx"
    {
  egg_stack.push_back(new EggNurbsSurface(yyvsp[0]._string));
}
    break;

  case 144:
#line 1774 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 145:
#line 1789 "parser.yxx"
    {
  egg_stack.push_back(new EggNurbsCurve(yyvsp[0]._string));
}
    break;

  case 146:
#line 1793 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 151:
#line 1823 "parser.yxx"
    {
  if (!egg_stack.back()->is_of_type(EggCompositePrimitive::get_class_type())) {
    eggyyerror("Not a composite primitive; components are not allowed here.");
  } else {
    PT(EggCompositePrimitive) comp = DCAST(EggCompositePrimitive, egg_stack.back());
    if (yyvsp[-1]._number < 0 || yyvsp[-1]._number >= comp->get_num_components()) {
      eggyyerror("Invalid component number");
    }
  }
  // We temporarily add an EggPolygon to the stack, just to receive
  // the component attributes.
  egg_stack.push_back(new EggPolygon);
}
    break;

  case 152:
#line 1837 "parser.yxx"
    {
  PT(EggPrimitive) prim = DCAST(EggPrimitive, egg_stack.back());
  egg_stack.pop_back();
  PT(EggCompositePrimitive) comp = DCAST(EggCompositePrimitive, egg_stack.back());
  comp->set_component((int)yyvsp[-4]._number, prim);
}
    break;

  case 160:
#line 1851 "parser.yxx"
    {
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "thick") == 0) {
    if (primitive->is_of_type(EggLine::get_class_type())) {
      DCAST(EggLine, primitive)->set_thick(value);
    } else if (primitive->is_of_type(EggPoint::get_class_type())) {
      DCAST(EggPoint, primitive)->set_thick(value);
    } else {
      eggyywarning("scalar thick is only meaningful for points and lines.");
    }
  } else if (cmp_nocase_uh(name, "perspective") == 0) {
    if (primitive->is_of_type(EggPoint::get_class_type())) {
      DCAST(EggPoint, primitive)->set_perspective(value != 0);
    } else {
      eggyywarning("scalar perspective is only meaningful for points.");
    }
  } else {
    eggyywarning("Unknown scalar " + name);
  }
}
    break;

  case 172:
#line 1935 "parser.yxx"
    {
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, yyvsp[0]._egg);
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_curves_on_surface.push_back(curve);
}
    break;

  case 174:
#line 1942 "parser.yxx"
    {
  EggNurbsSurface *primitive = DCAST(EggNurbsSurface, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "u_subdiv") == 0) {
    primitive->set_u_subdiv((int)value);
  } else if (cmp_nocase_uh(name, "v_subdiv") == 0) {
    primitive->set_v_subdiv((int)value);
  } else {
    eggyywarning("Unknown scalar " + name);
  }
}
    break;

  case 185:
#line 2016 "parser.yxx"
    {
  EggNurbsCurve *primitive = DCAST(EggNurbsCurve, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "subdiv") == 0) {
    primitive->set_subdiv((int)value);
  } else if (cmp_nocase_uh(name, "type") == 0) {
    EggCurve::CurveType a = EggCurve::string_curve_type(strval);
    if (a == EggCurve::CT_none) {
      eggyywarning("Unknown curve type " + strval);
    } else {
      primitive->set_curve_type(a);
    }
    
  } else {
    eggyywarning("Unknown scalar " + name);
  }
}
    break;

  case 186:
#line 2085 "parser.yxx"
    {
  if (yyvsp[0]._egg != (EggTexture *)NULL) {
    EggTexture *texture = DCAST(EggTexture, yyvsp[0]._egg);
    DCAST(EggPrimitive, egg_stack.back())->add_texture(texture);
  }
}
    break;

  case 187:
#line 2102 "parser.yxx"
    {
  EggTexture *texture = NULL;

  // Defining a texture on-the-fly.
  Filename filename = yyvsp[0]._string;
  string tref_name = filename.get_basename();

  Textures::iterator vpi = textures.find(tref_name);
  if (vpi == textures.end()) {
    // The texture was not yet defined.  Define it.
    texture = new EggTexture(tref_name, filename);
    textures[tref_name] = texture;

    if (egg_top_node != NULL) {
      egg_top_node->add_child(texture);
    }

  } else {
    // The texture already existed.  Use it.
    texture = (*vpi).second;
    if (filename != texture->get_filename()) {
      eggyywarning(string("Using previous path: ") + 
                   texture->get_filename().get_fullpath());
    }
  }

  nassertr(texture != NULL, 0);
  DCAST(EggPrimitive, egg_stack.back())->add_texture(texture);
}
    break;

  case 188:
#line 2142 "parser.yxx"
    {
  if (yyvsp[0]._egg != (EggMaterial *)NULL) {
    EggMaterial *material = DCAST(EggMaterial, yyvsp[0]._egg);
    DCAST(EggPrimitive, egg_stack.back())->set_material(material);
  }
}
    break;

  case 189:
#line 2159 "parser.yxx"
    {
  DCAST(EggPrimitive, egg_stack.back())->set_normal(Normald(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;

  case 190:
#line 2163 "parser.yxx"
    {
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;

  case 191:
#line 2171 "parser.yxx"
    {
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
}
    break;

  case 192:
#line 2189 "parser.yxx"
    {
  DCAST(EggPrimitive, egg_stack.back())->set_color(Colorf(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
}
    break;

  case 193:
#line 2193 "parser.yxx"
    {
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-6]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-6]._string);
  }
}
    break;

  case 194:
#line 2201 "parser.yxx"
    {
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-5]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
}
    break;

  case 195:
#line 2219 "parser.yxx"
    {
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  int value = (int)yyvsp[0]._number;
  primitive->set_bface_flag(value!=0);
}
    break;

  case 196:
#line 2235 "parser.yxx"
    {
  if (yyvsp[-2]._egg != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, yyvsp[-2]._egg);
    EggPrimitive *prim = DCAST(EggPrimitive, egg_stack.back());
    PTA_double nums = yyvsp[-5]._number_list;

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_forward_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        prim->add_vertex(vertex);
      }
    }
  }
}
    break;

  case 197:
#line 2266 "parser.yxx"
    {
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  int u_order = (int)yyvsp[-1]._number;
  int v_order = (int)yyvsp[0]._number;
  nurbs->set_u_order(u_order);
  nurbs->set_v_order(v_order);
}
    break;

  case 198:
#line 2284 "parser.yxx"
    {
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_u_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_u_knot(i, nums[i]);
  }
}
    break;

  case 199:
#line 2304 "parser.yxx"
    {
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_v_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_v_knot(i, nums[i]);
  }
}
    break;

  case 200:
#line 2324 "parser.yxx"
    {
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_trims.push_back(EggNurbsSurface::Trim());
}
    break;

  case 202:
#line 2340 "parser.yxx"
    {
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nurbs->_trims.back().push_back(EggNurbsSurface::Loop());
}
    break;

  case 203:
#line 2346 "parser.yxx"
    {
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nassertr(!nurbs->_trims.back().empty(), 0);
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, yyvsp[0]._egg); 
  nurbs->_trims.back().back().push_back(curve);
}
    break;

  case 204:
#line 2365 "parser.yxx"
    {
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  int order = (int)yyvsp[0]._number;
  nurbs->set_order(order);
}
    break;

  case 205:
#line 2381 "parser.yxx"
    {
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_knot(i, nums[i]);
  }
}
    break;

  case 206:
#line 2402 "parser.yxx"
    {
  EggTable *table = new EggTable(yyvsp[0]._string);
  table->set_table_type(EggTable::TT_table);
  egg_stack.push_back(table);
}
    break;

  case 207:
#line 2408 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 208:
#line 2424 "parser.yxx"
    {
  EggTable *table = new EggTable(yyvsp[0]._string);
  table->set_table_type(EggTable::TT_bundle);
  egg_stack.push_back(table);
}
    break;

  case 209:
#line 2430 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 211:
#line 2447 "parser.yxx"
    {
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;

  case 212:
#line 2451 "parser.yxx"
    {
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;

  case 213:
#line 2455 "parser.yxx"
    {
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;

  case 214:
#line 2459 "parser.yxx"
    {
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;

  case 215:
#line 2463 "parser.yxx"
    {
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;

  case 216:
#line 2478 "parser.yxx"
    {
  EggSAnimData *anim_data = new EggSAnimData(yyvsp[0]._string);
  egg_stack.push_back(anim_data);
}
    break;

  case 217:
#line 2483 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 219:
#line 2500 "parser.yxx"
    {
  EggSAnimData *anim_data = DCAST(EggSAnimData, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else {
    eggyywarning("Unsupported S$Anim scalar: " + name);
  }
}
    break;

  case 220:
#line 2512 "parser.yxx"
    {
  DCAST(EggSAnimData, egg_stack.back())->set_data(yyvsp[-1]._number_list);
}
    break;

  case 221:
#line 2526 "parser.yxx"
    {
  EggXfmAnimData *anim_data = new EggXfmAnimData(yyvsp[0]._string);
  egg_stack.push_back(anim_data);
}
    break;

  case 222:
#line 2531 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 224:
#line 2548 "parser.yxx"
    {
  EggXfmAnimData *anim_data = DCAST(EggXfmAnimData, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_data->set_order(strval);
  } else if (cmp_nocase_uh(name, "contents") == 0) {
    anim_data->set_contents(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim scalar: " + name);
  }
}
    break;

  case 225:
#line 2565 "parser.yxx"
    {
  DCAST(EggXfmAnimData, egg_stack.back())->set_data(yyvsp[-1]._number_list);
}
    break;

  case 226:
#line 2579 "parser.yxx"
    {
  EggXfmSAnim *anim_group = new EggXfmSAnim(yyvsp[0]._string);
  egg_stack.push_back(anim_group);
}
    break;

  case 227:
#line 2584 "parser.yxx"
    {
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 229:
#line 2601 "parser.yxx"
    {
  EggXfmSAnim *anim_group = DCAST(EggXfmSAnim, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_group->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_group->set_order(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim_S$ scalar: " + name);
  }
}
    break;

  case 230:
#line 2616 "parser.yxx"
    {
  DCAST(EggXfmSAnim, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
}
    break;

  case 231:
#line 2631 "parser.yxx"
    {
  yyval._number_list = PTA_double::empty_array(0);
}
    break;

  case 232:
#line 2635 "parser.yxx"
    {
  yyval._number_list.push_back((double)yyvsp[0]._number);
}
    break;

  case 233:
#line 2649 "parser.yxx"
    {
  yyval._number_list = PTA_double::empty_array(0);
}
    break;

  case 234:
#line 2653 "parser.yxx"
    {
  yyval._number_list.push_back(yyvsp[0]._number);
}
    break;

  case 235:
#line 2667 "parser.yxx"
    {
  string name = yyvsp[0]._string;
  Textures::iterator vpi = textures.find(name);
  if (vpi == textures.end()) {
    eggyyerror("Unknown texture " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
}
    break;

  case 236:
#line 2688 "parser.yxx"
    {
  string name = yyvsp[0]._string;
  Materials::iterator vpi = materials.find(name);
  if (vpi == materials.end()) {
    eggyyerror("Unknown material " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
}
    break;

  case 237:
#line 2709 "parser.yxx"
    {
  string name = yyvsp[0]._string;
  VertexPools::iterator vpi = vertex_pools.find(name);
  if (vpi == vertex_pools.end()) {
    // This will become a forward reference.
    EggVertexPool *pool = new EggVertexPool(name);
    // The egg syntax starts counting at 1 by convention.
    pool->set_highest_index(0);
    vertex_pools[name] = pool;
    yyval._egg = pool;
  } else {
    yyval._egg = (*vpi).second;
  }
}
    break;

  case 238:
#line 2735 "parser.yxx"
    {
  eggyyerror("Name required.");
  yyval._string = "";
}
    break;

  case 241:
#line 2764 "parser.yxx"
    {
  eggyyerror("String required.");
  yyval._string = "";
}
    break;

  case 243:
#line 2780 "parser.yxx"
    {
  yyval._string = "";
}
    break;

  case 245:
#line 2798 "parser.yxx"
    {
  yyval._string = yyvsp[0]._string;
}
    break;

  case 246:
#line 2802 "parser.yxx"
    {
  yyval._string = yyvsp[0]._string;
}
    break;

  case 248:
#line 2819 "parser.yxx"
    {
  yyval._string = "";
}
    break;

  case 249:
#line 2823 "parser.yxx"
    {
  yyval._string = yyvsp[0]._string;
}
    break;

  case 250:
#line 2839 "parser.yxx"
    {
  yyval._string = yyvsp[0]._string;
}
    break;

  case 251:
#line 2843 "parser.yxx"
    {
  yyval._string = yyvsp[-1]._string + "\n" + yyvsp[0]._string;
}
    break;

  case 253:
#line 2858 "parser.yxx"
    {
  yyval._number = yyvsp[0]._ulong;
}
    break;

  case 254:
#line 2873 "parser.yxx"
    {
  yyval._number = yyvsp[0]._number;
  yyval._ulong = (unsigned long)yyvsp[0]._number;
  yyval._string = yyvsp[0]._string;
}
    break;

  case 255:
#line 2879 "parser.yxx"
    {
  yyval._number = yyvsp[0]._ulong;
  yyval._ulong = yyvsp[0]._ulong;
  yyval._string = yyvsp[0]._string;
}
    break;

  case 256:
#line 2885 "parser.yxx"
    {
  yyval._number = 0.0;
  yyval._ulong = 0;
  yyval._string = yyvsp[0]._string;
}
    break;

  case 257:
#line 2902 "parser.yxx"
    {
  int i = (int)yyvsp[0]._number;
  if ((double)i != yyvsp[0]._number) {
    eggyywarning("Integer expected.");
    yyval._number = (double)i;
  }
}
    break;

  case 258:
#line 2910 "parser.yxx"
    {
  yyval._number = yyvsp[0]._ulong;
}
    break;


    }

/* Line 999 of yacc.c.  */
#line 4272 "y.tab.c"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  int yytype = YYTRANSLATE (yychar);
	  const char* yyprefix;
	  char *yymsg;
	  int yyx;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 0;

	  yyprefix = ", expecting ";
	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		yysize += yystrlen (yyprefix) + yystrlen (yytname [yyx]);
		yycount += 1;
		if (yycount == 5)
		  {
		    yysize = 0;
		    break;
		  }
	      }
	  yysize += (sizeof ("syntax error, unexpected ")
		     + yystrlen (yytname[yytype]));
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);

	      if (yycount < 5)
		{
		  yyprefix = ", expecting ";
		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			yyp = yystpcpy (yyp, yyprefix);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yyprefix = " or ";
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror ("syntax error");
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* Return failure if at end of input.  */
      if (yychar == YYEOF)
        {
	  /* Pop the error token.  */
          YYPOPSTACK;
	  /* Pop the rest of the stack.  */
	  while (yyss < yyssp)
	    {
	      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
	      yydestruct (yystos[*yyssp], yyvsp);
	      YYPOPSTACK;
	    }
	  YYABORT;
        }

      YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
      yydestruct (yytoken, &yylval);
      yychar = YYEMPTY;

    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*----------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action.  |
`----------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
      yydestruct (yystos[yystate], yyvsp);
      yyvsp--;
      yystate = *--yyssp;

      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;


  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}




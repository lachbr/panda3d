
/*  A Bison parser, made from parser.yxx
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse eggyyparse
#define yylex eggyylex
#define yyerror eggyyerror
#define yylval eggyylval
#define yychar eggyychar
#define yydebug eggyydebug
#define yynerrs eggyynerrs
#define	EGG_NUMBER	257
#define	EGG_ULONG	258
#define	EGG_STRING	259
#define	ANIMPRELOAD	260
#define	BEZIERCURVE	261
#define	BFACE	262
#define	BILLBOARD	263
#define	BILLBOARDCENTER	264
#define	BINORMAL	265
#define	BUNDLE	266
#define	CLOSED	267
#define	COLLIDE	268
#define	COMMENT	269
#define	COMPONENT	270
#define	COORDSYSTEM	271
#define	CV	272
#define	DART	273
#define	DNORMAL	274
#define	DRGBA	275
#define	DUV	276
#define	DXYZ	277
#define	DCS	278
#define	DISTANCE	279
#define	DTREF	280
#define	DYNAMICVERTEXPOOL	281
#define	EXTERNAL_FILE	282
#define	FLIGHT	283
#define	GROUP	284
#define	HIP	285
#define	INTANGENT	286
#define	JOINT	287
#define	KNOTS	288
#define	INCLUDE	289
#define	INSTANCE	290
#define	LINE	291
#define	LOOP	292
#define	MATERIAL	293
#define	MATRIX3	294
#define	MATRIX4	295
#define	MODEL	296
#define	MREF	297
#define	NORMAL	298
#define	NURBSCURVE	299
#define	NURBSSURFACE	300
#define	OBJECTTYPE	301
#define	ORDER	302
#define	OUTTANGENT	303
#define	POINTLIGHT	304
#define	POLYGON	305
#define	REF	306
#define	RGBA	307
#define	ROTATE	308
#define	ROTX	309
#define	ROTY	310
#define	ROTZ	311
#define	SANIM	312
#define	SCALAR	313
#define	SCALE	314
#define	SEQUENCE	315
#define	SHADING	316
#define	SWITCH	317
#define	SWITCHCONDITION	318
#define	TABLE	319
#define	TABLE_V	320
#define	TAG	321
#define	TANGENT	322
#define	TEXLIST	323
#define	TEXTURE	324
#define	TLENGTHS	325
#define	TRANSFORM	326
#define	TRANSLATE	327
#define	TREF	328
#define	TRIANGLEFAN	329
#define	TRIANGLESTRIP	330
#define	TRIM	331
#define	TXT	332
#define	UKNOTS	333
#define	UV	334
#define	VKNOTS	335
#define	VERTEX	336
#define	VERTEXANIM	337
#define	VERTEXPOOL	338
#define	VERTEXREF	339
#define	XFMANIM	340
#define	XFMSANIM	341
#define	START_EGG	342
#define	START_GROUP_BODY	343
#define	START_TEXTURE_BODY	344
#define	START_PRIMITIVE_BODY	345

#line 6 "parser.yxx"


#include "pandabase.h"
#include "config_egg.h"
#include "parserDefs.h"
#include "lexerDefs.h"
#include "eggObject.h"
#include "eggGroup.h"
#include "eggVertex.h"
#include "eggVertexPool.h"
#include "eggVertexUV.h"
#include "eggPolygon.h"
#include "eggCompositePrimitive.h"
#include "eggTriangleFan.h"
#include "eggTriangleStrip.h"
#include "eggPoint.h"
#include "eggLine.h"
#include "eggNurbsSurface.h"
#include "eggNurbsCurve.h"
#include "eggTable.h"
#include "eggSAnimData.h"
#include "eggXfmSAnim.h"
#include "eggXfmAnimData.h"
#include "eggTexture.h"
#include "eggMaterial.h"
#include "eggComment.h"
#include "eggCoordinateSystem.h"
#include "eggExternalReference.h"
#include "eggData.h"
#include "eggAnimPreload.h"
#include "pt_EggTexture.h"
#include "pt_EggMaterial.h"

#include "string_utils.h"
#include "filename.h"
#include "luse.h"
#include "lmatrix.h"
#include "coordinateSystem.h"
#include "pvector.h"
#include "dcast.h"

// Because our token type contains objects of type string, which
// require correct copy construction (and not simply memcpying), we
// cannot use bison's built-in auto-stack-grow feature.  As an easy
// solution, we ensure here that we have enough yacc stack to start
// with, and that it doesn't ever try to grow.
#define YYINITDEPTH 1000
#define YYMAXDEPTH 1000

// We need a stack of EggObject pointers.  Each time we encounter a
// nested EggObject of some kind, we'll allocate a new one of these
// and push it onto the stack.  At any given time, the top of the
// stack is the EggObject we are currently scanning.

typedef pvector< PT(EggObject) > EggStack;
static EggStack egg_stack;

// There's one "top-level" egg node, which is where we should parent
// things (e.g. implicit textures) encountered in the egg file that
// don't have an explicit place in the tree.  If this is NULL, such
// things won't be parented anywhere.
static EggGroupNode *egg_top_node;

// We need a table mapping vertex pool names to vertex pools.
typedef pmap<string,  PT(EggVertexPool) > VertexPools;
static VertexPools vertex_pools;

// And another one mapping texture names to textures.
typedef pmap<string,  PT_EggTexture > Textures;
static Textures textures;

// And again for material names to materials.
typedef pmap<string,  PT_EggMaterial > Materials;
static Materials materials;

// We need to be able to save the index number requested for a vertex
// temporarily.
static int vertex_index;

// We need to hold a matrix for a little bit while parsing the
// <Transform> entries.
static LMatrix3d matrix_2d;


////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

void
egg_init_parser(istream &in, const string &filename,
                EggObject *tos, EggGroupNode *top_node) {
  egg_init_lexer(in, filename);

  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();

  egg_stack.push_back(tos);
  egg_top_node = top_node;
}

void
egg_cleanup_parser() {
  // Check for undefined vertex pools.
  VertexPools::const_iterator vpi;
  for (vpi = vertex_pools.begin(); vpi != vertex_pools.end(); ++vpi) {
    EggVertexPool *pool = (*vpi).second;
    if (pool->has_forward_vertices()) {
      if (!pool->has_defined_vertices()) {
        eggyyerror("Undefined vertex pool " + pool->get_name());
      } else {
        eggyyerror("Undefined vertices in pool " + pool->get_name());
        
        egg_cat.error(false)
          << "Undefined vertex index numbers:";
        EggVertexPool::const_iterator vi;
        for (vi = pool->begin(); vi != pool->end(); ++vi) {
          EggVertex *vertex = (*vi);
          if (vertex->is_forward_reference()) {
            egg_cat.error(false)
              << " " << vertex->get_index();
          }
        }
        egg_cat.error(false) 
          << "\n";
      }
    }
  }

  // Clean these out after we're done, so we don't keep big memory
  // structures around needlessly.
  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();
}

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		735
#define	YYFLAG		-32768
#define	YYNTBASE	94

#define YYTRANSLATE(x) ((unsigned)(x) <= 345 ? yytranslate[x] : 213)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    92,     2,    93,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     6,     9,    12,    14,    17,    19,    21,    23,
    25,    27,    29,    31,    33,    35,    37,    39,    41,    43,
    45,    47,    49,    51,    53,    58,    64,    65,    73,    75,
    82,    85,    86,    93,    95,   102,   108,   115,   116,   123,
   125,   128,   129,   135,   136,   143,   145,   148,   152,   157,
   158,   166,   172,   178,   187,   196,   199,   203,   211,   219,
   227,   236,   244,   253,   257,   266,   275,   280,   290,   300,
   301,   308,   309,   316,   317,   324,   326,   333,   339,   347,
   355,   361,   367,   373,   379,   385,   391,   397,   404,   410,
   413,   416,   419,   422,   424,   426,   429,   430,   436,   438,
   441,   444,   447,   450,   453,   456,   459,   462,   465,   468,
   471,   474,   480,   487,   492,   497,   502,   507,   515,   521,
   528,   533,   538,   540,   550,   555,   557,   574,   584,   586,
   593,   598,   610,   623,   624,   631,   632,   639,   640,   647,
   648,   655,   656,   663,   664,   671,   672,   679,   681,   687,
   693,   695,   696,   704,   710,   716,   722,   725,   731,   737,
   743,   750,   752,   758,   764,   770,   773,   779,   785,   791,
   797,   803,   809,   812,   818,   825,   827,   833,   839,   845,
   848,   854,   860,   866,   872,   878,   885,   887,   889,   891,
   895,   904,   913,   918,   928,   938,   940,   949,   952,   954,
   956,   958,   964,   966,   969,   971,   973,   974,   981,   982,
   989,   991,   994,   997,  1000,  1003,  1006,  1007,  1014,  1016,
  1023,  1029,  1030,  1037,  1039,  1046,  1052,  1053,  1060,  1062,
  1069,  1072,  1073,  1080,  1082,  1089,  1091,  1094,  1096,  1099,
  1101,  1103,  1105,  1107,  1109,  1111,  1113,  1115,  1117,  1119,
  1121,  1123,  1125,  1127,  1129,  1131,  1134,  1136,  1138,  1140,
  1142,  1144,  1146,  1148
};

static const short yyrhs[] = {    88,
    95,     0,    89,   123,     0,    90,   101,     0,    91,   162,
     0,   212,     0,    95,    96,     0,    97,     0,    98,     0,
    99,     0,   102,     0,   105,     0,   106,     0,   117,     0,
   119,     0,   121,     0,   147,     0,   149,     0,   151,     0,
   153,     0,   155,     0,   157,     0,   159,     0,   180,     0,
   194,     0,    17,    92,   204,    93,     0,    15,   203,    92,
   207,    93,     0,     0,    70,   202,    92,   204,   100,   101,
    93,     0,   212,     0,   101,    59,   202,    92,   210,    93,
     0,   101,   126,     0,     0,    39,   202,    92,   103,   104,
    93,     0,   212,     0,   104,    59,   202,    92,   210,    93,
     0,    28,   203,    92,   204,    93,     0,   206,    28,   203,
    92,   204,    93,     0,     0,    84,   202,   107,    92,   108,
    93,     0,   212,     0,   108,   109,     0,     0,    82,   110,
    92,   112,    93,     0,     0,    82,   211,   111,    92,   112,
    93,     0,   209,     0,   209,   209,     0,   209,   209,   209,
     0,   209,   209,   209,   209,     0,     0,   112,    80,   203,
    92,   113,   114,    93,     0,   112,    44,    92,   115,    93,
     0,   112,    53,    92,   116,    93,     0,   112,    23,   206,
    92,   209,   209,   209,    93,     0,   112,    23,    92,   206,
   209,   209,   209,    93,     0,   209,   209,     0,   209,   209,
   209,     0,   114,    68,    92,   209,   209,   209,    93,     0,
   114,    11,    92,   209,   209,   209,    93,     0,   114,    22,
   206,    92,   209,   209,    93,     0,   114,    22,   206,    92,
   209,   209,   209,    93,     0,   114,    22,    92,   206,   209,
   209,    93,     0,   114,    22,    92,   206,   209,   209,   209,
    93,     0,   209,   209,   209,     0,   115,    20,   206,    92,
   209,   209,   209,    93,     0,   115,    20,    92,   206,   209,
   209,   209,    93,     0,   209,   209,   209,   209,     0,   116,
    21,   206,    92,   209,   209,   209,   209,    93,     0,   116,
    21,    92,   206,   209,   209,   209,   209,    93,     0,     0,
    30,   203,   118,    92,   123,    93,     0,     0,    33,   203,
   120,    92,   123,    93,     0,     0,    36,   203,   122,    92,
   123,    93,     0,   212,     0,   123,    59,   202,    92,   210,
    93,     0,   123,     9,    92,   206,    93,     0,   123,    10,
    92,   209,   209,   209,    93,     0,   123,    14,   203,    92,
   124,   125,    93,     0,   123,    24,    92,   211,    93,     0,
   123,    24,    92,     5,    93,     0,   123,    19,    92,   211,
    93,     0,   123,    19,    92,     5,    93,     0,   123,    63,
    92,   211,    93,     0,   123,    47,    92,   204,    93,     0,
   123,    42,    92,   211,    93,     0,   123,    67,   203,    92,
   207,    93,     0,   123,    69,    92,   211,    93,     0,   123,
   126,     0,   123,   143,     0,   123,   145,     0,   123,    96,
     0,   206,     0,   212,     0,   125,   206,     0,     0,    72,
   127,    92,   128,    93,     0,   212,     0,   128,   129,     0,
   128,   130,     0,   128,   131,     0,   128,   132,     0,   128,
   133,     0,   128,   134,     0,   128,   135,     0,   128,   136,
     0,   128,   137,     0,   128,   138,     0,   128,   139,     0,
   128,   141,     0,    73,    92,   209,   209,    93,     0,    73,
    92,   209,   209,   209,    93,     0,    54,    92,   209,    93,
     0,    55,    92,   209,    93,     0,    56,    92,   209,    93,
     0,    57,    92,   209,    93,     0,    54,    92,   209,   209,
   209,   209,    93,     0,    60,    92,   209,   209,    93,     0,
    60,    92,   209,   209,   209,    93,     0,    60,    92,   209,
    93,     0,    40,    92,   140,    93,     0,   212,     0,   209,
   209,   209,   209,   209,   209,   209,   209,   209,     0,    41,
    92,   142,    93,     0,   212,     0,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   209,     0,    85,    92,   197,   144,    52,    92,   201,
    93,    93,     0,   212,     0,   144,    59,   202,    92,   210,
    93,     0,    64,    92,   146,    93,     0,    25,    92,   209,
   209,    82,    92,   209,   209,   209,    93,    93,     0,    25,
    92,   209,   209,   209,    82,    92,   209,   209,   209,    93,
    93,     0,     0,    51,   203,   148,    92,   162,    93,     0,
     0,    75,   203,   150,    92,   162,    93,     0,     0,    76,
   203,   152,    92,   162,    93,     0,     0,    50,   203,   154,
    92,   162,    93,     0,     0,    37,   203,   156,    92,   162,
    93,     0,     0,    46,   203,   158,    92,   164,    93,     0,
     0,    45,   203,   160,    92,   165,    93,     0,   212,     0,
   161,    44,    92,   169,    93,     0,   161,    53,    92,   170,
    93,     0,   212,     0,     0,   162,    16,   211,    92,   163,
   161,    93,     0,   162,    74,    92,   166,    93,     0,   162,
    70,    92,   167,    93,     0,   162,    43,    92,   168,    93,
     0,   162,   172,     0,   162,    44,    92,   169,    93,     0,
   162,    53,    92,   170,    93,     0,   162,     8,    92,   171,
    93,     0,   162,    59,   202,    92,   210,    93,     0,   212,
     0,   164,    74,    92,   166,    93,     0,   164,    70,    92,
   167,    93,     0,   164,    43,    92,   168,    93,     0,   164,
   172,     0,   164,    44,    92,   169,    93,     0,   164,    53,
    92,   170,    93,     0,   164,     8,    92,   171,    93,     0,
   164,    48,    92,   173,    93,     0,   164,    79,    92,   174,
    93,     0,   164,    81,    92,   175,    93,     0,   164,   159,
     0,   164,    77,    92,   176,    93,     0,   164,    59,   202,
    92,   210,    93,     0,   212,     0,   165,    74,    92,   166,
    93,     0,   165,    70,    92,   167,    93,     0,   165,    43,
    92,   168,    93,     0,   165,   172,     0,   165,    44,    92,
   169,    93,     0,   165,    53,    92,   170,    93,     0,   165,
     8,    92,   171,    93,     0,   165,    48,    92,   178,    93,
     0,   165,    34,    92,   179,    93,     0,   165,    59,   202,
    92,   210,    93,     0,   199,     0,   202,     0,   200,     0,
   209,   209,   209,     0,   169,    20,   206,    92,   209,   209,
   209,    93,     0,   169,    20,    92,   206,   209,   209,   209,
    93,     0,   209,   209,   209,   209,     0,   170,    21,   206,
    92,   209,   209,   209,   209,    93,     0,   170,    21,    92,
   206,   209,   209,   209,   209,    93,     0,   211,     0,    85,
    92,   197,    52,    92,   201,    93,    93,     0,   211,   211,
     0,   198,     0,   198,     0,   212,     0,   176,    38,    92,
   177,    93,     0,   212,     0,   177,   159,     0,   211,     0,
   198,     0,     0,    65,   203,   181,    92,   184,    93,     0,
     0,    12,   203,   183,    92,   184,    93,     0,   212,     0,
   184,   180,     0,   184,   182,     0,   184,   185,     0,   184,
   188,     0,   184,   191,     0,     0,    58,   203,   186,    92,
   187,    93,     0,   212,     0,   187,    59,   202,    92,   210,
    93,     0,   187,    66,    92,   198,    93,     0,     0,    86,
   203,   189,    92,   190,    93,     0,   212,     0,   190,    59,
   202,    92,   210,    93,     0,   190,    66,    92,   198,    93,
     0,     0,    87,   203,   192,    92,   193,    93,     0,   212,
     0,   193,    59,   202,    92,   210,    93,     0,   193,   185,
     0,     0,     6,   203,   195,    92,   196,    93,     0,   212,
     0,   196,    59,   202,    92,   210,    93,     0,   212,     0,
   197,   211,     0,   212,     0,   198,   209,     0,   202,     0,
   202,     0,   202,     0,   212,     0,   206,     0,   205,     0,
   212,     0,   206,     0,   212,     0,   206,     0,     3,     0,
     4,     0,     5,     0,   212,     0,   208,     0,   206,     0,
   208,   206,     0,     3,     0,     4,     0,     3,     0,     4,
     0,     5,     0,     3,     0,     4,     0,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   218,   220,   221,   222,   232,   234,   249,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,   267,   277,   300,   314,   328,   342,   344,
   676,   686,   699,   713,   715,   809,   817,   836,   861,   876,
   878,   888,   893,   900,   925,   945,   950,   954,   958,   962,
   973,   977,   978,   979,   987,  1005,  1010,  1014,  1022,  1030,
  1038,  1046,  1054,  1071,  1076,  1084,  1101,  1106,  1114,  1131,
  1137,  1151,  1158,  1172,  1179,  1193,  1195,  1325,  1337,  1342,
  1349,  1355,  1368,  1375,  1388,  1394,  1400,  1406,  1411,  1417,
  1418,  1419,  1420,  1433,  1463,  1465,  1486,  1491,  1502,  1504,
  1505,  1506,  1507,  1508,  1509,  1510,  1511,  1512,  1513,  1514,
  1515,  1518,  1525,  1532,  1539,  1546,  1553,  1560,  1567,  1574,
  1581,  1588,  1592,  1594,  1605,  1609,  1611,  1632,  1665,  1670,
  1694,  1706,  1712,  1728,  1733,  1747,  1752,  1766,  1771,  1785,
  1790,  1804,  1809,  1823,  1828,  1842,  1847,  1862,  1864,  1865,
  1875,  1877,  1891,  1898,  1899,  1900,  1901,  1902,  1903,  1904,
  1905,  1977,  1979,  1980,  1981,  1982,  1983,  1984,  1985,  1986,
  1987,  1988,  1989,  1995,  1996,  2059,  2061,  2062,  2063,  2064,
  2065,  2066,  2067,  2068,  2069,  2070,  2138,  2155,  2195,  2212,
  2217,  2225,  2242,  2247,  2255,  2272,  2288,  2319,  2337,  2357,
  2377,  2383,  2393,  2400,  2418,  2434,  2455,  2462,  2477,  2484,
  2498,  2500,  2504,  2508,  2512,  2516,  2530,  2536,  2551,  2553,
  2565,  2578,  2584,  2599,  2601,  2618,  2631,  2637,  2652,  2654,
  2669,  2683,  2689,  2704,  2706,  2729,  2734,  2747,  2752,  2765,
  2786,  2807,  2833,  2839,  2850,  2862,  2868,  2878,  2883,  2896,
  2901,  2905,  2917,  2922,  2937,  2942,  2955,  2957,  2971,  2978,
  2984,  3000,  3009,  3015
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","EGG_NUMBER",
"EGG_ULONG","EGG_STRING","ANIMPRELOAD","BEZIERCURVE","BFACE","BILLBOARD","BILLBOARDCENTER",
"BINORMAL","BUNDLE","CLOSED","COLLIDE","COMMENT","COMPONENT","COORDSYSTEM","CV",
"DART","DNORMAL","DRGBA","DUV","DXYZ","DCS","DISTANCE","DTREF","DYNAMICVERTEXPOOL",
"EXTERNAL_FILE","FLIGHT","GROUP","HIP","INTANGENT","JOINT","KNOTS","INCLUDE",
"INSTANCE","LINE","LOOP","MATERIAL","MATRIX3","MATRIX4","MODEL","MREF","NORMAL",
"NURBSCURVE","NURBSSURFACE","OBJECTTYPE","ORDER","OUTTANGENT","POINTLIGHT","POLYGON",
"REF","RGBA","ROTATE","ROTX","ROTY","ROTZ","SANIM","SCALAR","SCALE","SEQUENCE",
"SHADING","SWITCH","SWITCHCONDITION","TABLE","TABLE_V","TAG","TANGENT","TEXLIST",
"TEXTURE","TLENGTHS","TRANSFORM","TRANSLATE","TREF","TRIANGLEFAN","TRIANGLESTRIP",
"TRIM","TXT","UKNOTS","UV","VKNOTS","VERTEX","VERTEXANIM","VERTEXPOOL","VERTEXREF",
"XFMANIM","XFMSANIM","START_EGG","START_GROUP_BODY","START_TEXTURE_BODY","START_PRIMITIVE_BODY",
"'{'","'}'","grammar","egg","node","coordsystem","comment","texture","@1","texture_body",
"material","@2","material_body","external_reference","vertex_pool","@3","vertex_pool_body",
"vertex","@4","@5","vertex_body","@6","vertex_uv_body","vertex_normal_body",
"vertex_color_body","group","@7","joint","@8","instance","@9","group_body","cs_type",
"collide_flags","transform","@10","transform_body","translate2d","translate3d",
"rotate2d","rotx","roty","rotz","rotate3d","scale2d","scale3d","uniform_scale",
"matrix3","matrix3_body","matrix4","matrix4_body","group_vertex_ref","group_vertex_membership",
"switchcondition","switchcondition_body","polygon","@11","trianglefan","@12",
"trianglestrip","@13","point_light","@14","line","@15","nurbs_surface","@16",
"nurbs_curve","@17","primitive_component_body","primitive_body","@18","nurbs_surface_body",
"nurbs_curve_body","primitive_tref_body","primitive_texture_body","primitive_material_body",
"primitive_normal_body","primitive_color_body","primitive_bface_body","primitive_vertex_ref",
"nurbs_surface_order_body","nurbs_surface_uknots_body","nurbs_surface_vknots_body",
"nurbs_surface_trim_body","nurbs_surface_trim_loop_body","nurbs_curve_order_body",
"nurbs_curve_knots_body","table","@19","bundle","@20","table_body","sanim","@21",
"sanim_body","xfmanim","@22","xfmanim_body","xfm_s_anim","@23","xfm_s_anim_body",
"anim_preload","@24","anim_preload_body","integer_list","real_list","texture_name",
"material_name","vertex_pool_name","required_name","optional_name","required_string",
"optional_string","string","repeated_string","repeated_string_body","real","real_or_string",
"integer","empty", NULL
};
#endif

static const short yyr1[] = {     0,
    94,    94,    94,    94,    95,    95,    96,    96,    96,    96,
    96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
    96,    96,    96,    96,    97,    98,   100,    99,   101,   101,
   101,   103,   102,   104,   104,   105,   105,   107,   106,   108,
   108,   110,   109,   111,   109,   112,   112,   112,   112,   113,
   112,   112,   112,   112,   112,   114,   114,   114,   114,   114,
   114,   114,   114,   115,   115,   115,   116,   116,   116,   118,
   117,   120,   119,   122,   121,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   124,   125,   125,   127,   126,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
   138,   139,   140,   140,   141,   142,   142,   143,   144,   144,
   145,   146,   146,   148,   147,   150,   149,   152,   151,   154,
   153,   156,   155,   158,   157,   160,   159,   161,   161,   161,
   162,   163,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   164,   164,   164,   164,   164,   164,   164,   164,   164,
   164,   164,   164,   164,   164,   165,   165,   165,   165,   165,
   165,   165,   165,   165,   165,   165,   166,   167,   168,   169,
   169,   169,   170,   170,   170,   171,   172,   173,   174,   175,
   176,   176,   177,   177,   178,   179,   181,   180,   183,   182,
   184,   184,   184,   184,   184,   184,   186,   185,   187,   187,
   187,   189,   188,   190,   190,   190,   192,   191,   193,   193,
   193,   195,   194,   196,   196,   197,   197,   198,   198,   199,
   200,   201,   202,   202,   203,   204,   204,   205,   205,   206,
   206,   206,   207,   207,   208,   208,   209,   209,   210,   210,
   210,   211,   211,   212
};

static const short yyr2[] = {     0,
     2,     2,     2,     2,     1,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     4,     5,     0,     7,     1,     6,
     2,     0,     6,     1,     6,     5,     6,     0,     6,     1,
     2,     0,     5,     0,     6,     1,     2,     3,     4,     0,
     7,     5,     5,     8,     8,     2,     3,     7,     7,     7,
     8,     7,     8,     3,     8,     8,     4,     9,     9,     0,
     6,     0,     6,     0,     6,     1,     6,     5,     7,     7,
     5,     5,     5,     5,     5,     5,     5,     6,     5,     2,
     2,     2,     2,     1,     1,     2,     0,     5,     1,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     5,     6,     4,     4,     4,     4,     7,     5,     6,
     4,     4,     1,     9,     4,     1,    16,     9,     1,     6,
     4,    11,    12,     0,     6,     0,     6,     0,     6,     0,
     6,     0,     6,     0,     6,     0,     6,     1,     5,     5,
     1,     0,     7,     5,     5,     5,     2,     5,     5,     5,
     6,     1,     5,     5,     5,     2,     5,     5,     5,     5,
     5,     5,     2,     5,     6,     1,     5,     5,     5,     2,
     5,     5,     5,     5,     5,     6,     1,     1,     1,     3,
     8,     8,     4,     9,     9,     1,     8,     2,     1,     1,
     1,     5,     1,     2,     1,     1,     0,     6,     0,     6,
     1,     2,     2,     2,     2,     2,     0,     6,     1,     6,
     5,     0,     6,     1,     6,     5,     0,     6,     1,     6,
     2,     0,     6,     1,     6,     1,     2,     1,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
     1,     1,     1,     0
};

static const short yydefact[] = {     0,
   264,   264,   264,   264,     1,     5,     2,    76,     3,    29,
     4,   151,   250,   251,   252,   264,   264,     0,   264,   264,
   264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
   264,   264,   264,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,     0,     0,     0,   264,     0,     0,     0,     0,
   264,     0,     0,   264,     0,    97,     0,    93,    90,    91,
    92,   264,    31,     0,     0,     0,     0,     0,   264,     0,
     0,     0,   157,   232,   245,   249,   248,     0,   264,     0,
    70,    72,    74,   142,     0,   244,   243,   146,   144,   140,
   134,   207,     0,   136,   138,    38,   264,     0,     0,     0,
     0,     0,     0,   264,     0,     0,     0,     0,     0,     0,
   264,     0,     0,   262,   263,     0,   264,     0,     0,     0,
   264,   264,   264,     0,   264,     0,   247,   246,   264,     0,
     0,     0,     0,    32,     0,     0,     0,     0,     0,   264,
     0,     0,     0,     0,     0,   257,   258,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   264,
     0,   264,   264,   236,     0,     0,   196,   152,     0,   189,
   241,     0,     0,     0,     0,     0,     0,   188,     0,   187,
   240,     0,   264,   255,     0,   254,   253,    25,     0,   264,
   264,   264,   264,   264,   264,   264,   264,   264,   264,    27,
   264,   264,   264,   264,    78,     0,   264,    94,    84,    83,
    82,    81,    87,    86,   259,   260,   261,     0,    85,     0,
   131,     0,    89,     0,    99,     0,   237,   129,     0,   160,
   264,   156,     0,   158,     0,     0,   159,     0,     0,   155,
   154,     0,     0,   234,    26,   256,    36,     0,     0,     0,
     0,     0,    34,     0,   176,     0,   162,     0,     0,     0,
   211,   264,     0,     0,     0,    40,     0,     0,     0,    95,
    77,     0,    88,     0,     0,     0,     0,     0,     0,     0,
     0,    98,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,   111,     0,   264,    30,     0,   148,     0,
     0,   190,     0,     0,     0,   161,   264,   264,   233,    71,
    73,    75,   143,   264,    33,     0,     0,     0,     0,     0,
     0,   264,     0,     0,   147,   180,     0,     0,     0,     0,
     0,   264,     0,     0,     0,     0,     0,   145,   173,   166,
   141,   135,   264,   264,   264,   264,   208,   212,   213,   214,
   215,   216,     0,   137,   139,    42,    39,    41,    37,    79,
    80,    96,     0,   264,   264,     0,     0,     0,     0,     0,
     0,   264,     0,     0,     0,   153,     0,     0,     0,     0,
   193,     0,   242,     0,     0,     0,   264,   264,     0,     0,
     0,     0,   264,   264,     0,   264,     0,     0,     0,     0,
   264,   264,   264,   264,   264,   209,   217,   222,   227,    28,
     0,    44,     0,     0,     0,     0,   123,     0,     0,   126,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   206,
   238,     0,     0,     0,   205,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   201,
     0,   199,     0,   200,     0,     0,     0,     0,     0,     0,
     0,     0,   122,     0,   125,     0,   114,     0,   115,   116,
   117,   121,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   197,     0,     0,   183,   185,   239,   179,   181,
   184,   182,     0,   178,   177,   169,   165,   167,   170,   198,
   168,     0,   164,   163,     0,   174,   171,   172,   264,   264,
   264,   264,     0,    46,     0,     0,     0,     0,     0,     0,
   119,     0,   112,     0,   128,   130,   149,   150,     0,     0,
     0,     0,   235,    35,   186,   175,   264,     0,     0,   219,
     0,   224,     0,   229,     0,     0,     0,   264,    43,    47,
     0,     0,     0,     0,     0,     0,   120,   113,   192,   191,
     0,     0,     0,   203,   210,   264,     0,   218,   264,     0,
   223,   264,   228,   231,     0,     0,     0,     0,     0,    48,
    45,     0,     0,     0,     0,   118,   195,   194,   202,   204,
     0,   264,     0,   264,     0,     0,     0,     0,     0,     0,
     0,    50,    49,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    52,     0,     0,    53,     0,
     0,   132,     0,     0,     0,     0,   221,     0,   226,     0,
     0,     0,     0,     0,    64,     0,     0,     0,     0,     0,
   133,     0,     0,   220,   225,   230,     0,     0,     0,     0,
     0,     0,    67,     0,     0,     0,    51,    56,   124,     0,
    55,    54,     0,     0,     0,     0,     0,     0,     0,     0,
    57,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    66,    65,     0,     0,     0,     0,     0,     0,     0,    69,
    68,    59,    62,     0,    60,     0,    58,     0,    63,    61,
     0,   127,     0,     0,     0
};

static const short yydefgoto[] = {   733,
     5,    68,    35,    36,    37,   272,     9,    38,   204,   262,
    39,    40,   153,   275,   368,   421,   480,   533,   641,   659,
   618,   620,    41,   140,    42,   141,    43,   142,     7,   217,
   279,    69,   120,   234,   293,   294,   295,   296,   297,   298,
   299,   300,   301,   302,   303,   425,   304,   428,    70,   236,
    71,   169,    44,   148,    45,   151,    46,   152,    47,   147,
    48,   143,    49,   146,    50,   145,   308,    11,   241,   266,
   264,   189,   187,   179,   182,   184,   176,    83,   463,   471,
   473,   469,   583,   454,   449,    51,   149,   359,   475,   270,
   360,   476,   559,   361,   477,   561,   362,   478,   563,    52,
   134,   253,   173,   450,   190,   180,   392,   181,    84,   136,
    85,    96,   195,   196,   508,   228,   177,    97
};

static const short yypact[] = {   211,
-32768,-32768,-32768,-32768,  1247,-32768,  1172,-32768,   105,-32768,
   337,-32768,-32768,-32768,-32768,   247,   247,   -79,   247,   247,
   247,   247,   247,   247,   247,   247,   247,   247,   247,   247,
   247,   247,   247,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    93,   -60,   -30,   247,    61,    70,    88,    92,
   247,   130,   147,   247,   150,-32768,   173,-32768,-32768,-32768,
-32768,   247,-32768,   175,   241,   177,   179,   181,   247,   183,
   189,   204,-32768,-32768,-32768,-32768,-32768,   205,   247,   214,
-32768,-32768,-32768,-32768,   215,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   219,-32768,-32768,-32768,   247,   247,   283,   224,
   286,   333,   241,   247,   225,   241,   149,   227,   241,   235,
-32768,   236,   241,-32768,-32768,   239,   247,   283,   283,   242,
   247,   247,-32768,   254,   247,   166,-32768,-32768,   247,   255,
   262,   269,   270,-32768,   271,   272,   273,   274,   277,   247,
   284,   285,   287,   291,   221,-32768,-32768,   283,   247,   240,
   249,   282,   292,   293,   294,   336,   295,   297,   298,   247,
   300,-32768,   241,-32768,   336,   301,-32768,-32768,   302,-32768,
-32768,    34,   283,   -11,   283,   336,   304,-32768,   305,-32768,
-32768,   136,-32768,-32768,   306,   247,-32768,-32768,   307,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   247,-32768,   283,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   309,-32768,   283,
-32768,   310,-32768,   222,-32768,   145,-32768,-32768,   311,-32768,
-32768,-32768,    84,-32768,   283,    87,-32768,   283,   312,-32768,
-32768,   314,    67,-32768,-32768,-32768,-32768,   792,   974,  1060,
   393,    99,-32768,   250,-32768,   187,-32768,   415,   479,   120,
-32768,-32768,   863,  1078,   144,-32768,   317,   319,     4,-32768,
-32768,   283,-32768,   332,   334,   341,   342,   343,   346,   348,
   350,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   351,   247,-32768,   190,-32768,   247,
   352,-32768,   247,   353,   283,-32768,   247,   247,-32768,-32768,
-32768,-32768,-32768,   247,-32768,   356,   358,   359,   363,   364,
   365,   247,   368,   372,-32768,-32768,   373,   378,   380,   381,
   385,   247,   396,   398,   399,   400,   401,-32768,-32768,-32768,
-32768,-32768,   247,   247,   247,   247,-32768,-32768,-32768,-32768,
-32768,-32768,    74,-32768,-32768,   241,-32768,-32768,-32768,-32768,
-32768,-32768,   104,   283,   283,   283,   283,   283,   283,   283,
   283,   247,   405,   407,   409,-32768,   283,   283,   283,   283,
-32768,   410,-32768,   412,   413,   241,-32768,   247,   283,   241,
   283,   414,   247,   247,   241,   247,   283,   241,   283,   417,
   247,   247,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   418,-32768,   419,   296,   420,   283,-32768,   421,   283,-32768,
    25,   422,   423,   424,    27,   283,   425,   336,   283,   283,
   283,   283,   283,   283,   427,   336,   336,   432,   434,   283,
-32768,   436,    38,   437,-32768,    26,   336,   438,   442,   443,
   444,    55,   450,   241,    80,   336,   451,   452,    77,-32768,
   453,   283,   454,   283,   456,   458,   459,   460,   283,   462,
   283,   463,-32768,   283,-32768,   283,-32768,   283,-32768,-32768,
-32768,-32768,    62,    64,   464,   465,    58,   107,   283,   283,
   283,   283,-32768,   466,   468,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   469,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   472,-32768,-32768,   474,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   119,   283,   283,   283,   283,   283,   283,   283,
-32768,   475,-32768,   476,-32768,-32768,-32768,-32768,   477,   478,
   283,   283,-32768,-32768,-32768,-32768,-32768,   131,    57,-32768,
    78,-32768,   156,-32768,    91,   481,   489,   247,-32768,   283,
   167,   283,   283,   283,   283,   490,-32768,-32768,-32768,-32768,
   491,   493,    48,-32768,-32768,   247,   495,-32768,   247,   496,
-32768,   247,-32768,-32768,   247,   497,   283,   283,   501,   283,
-32768,   502,   283,   283,   283,-32768,-32768,-32768,-32768,-32768,
   504,-32768,   505,-32768,   506,   283,   283,    59,   283,   117,
   283,-32768,-32768,   507,   508,   283,   283,   336,    66,   336,
    68,   336,   283,   283,    95,-32768,   283,   101,-32768,   283,
   283,-32768,   509,   283,   283,   510,-32768,   511,-32768,   512,
   283,   283,   247,   514,-32768,   247,   515,   283,    42,   283,
-32768,   283,   283,-32768,-32768,-32768,   516,   518,   283,   283,
   283,   283,-32768,   524,   109,   525,-32768,   283,-32768,   283,
-32768,-32768,   283,   283,   283,   283,   283,   247,   526,   283,
-32768,   283,   283,   283,   283,   283,   283,   283,   283,   283,
   283,   527,   528,   283,   283,   283,   283,   283,   283,   283,
-32768,-32768,   529,   530,   531,    73,    82,   532,   283,-32768,
-32768,-32768,-32768,   533,-32768,   534,-32768,   283,-32768,-32768,
   283,-32768,   384,   556,-32768
};

static const short yypgoto[] = {-32768,
-32768,   562,-32768,-32768,-32768,-32768,   153,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -33,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   158,-32768,
-32768,    -6,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -265,-32768,-32768,   118,-32768,-32768,
-32768,  -185,  -182,  -170,  -191,  -207,  -249,  -231,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -266,-32768,-32768,-32768,   -22,
   -51,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   449,  -409,-32768,-32768,   212,    50,    17,   -89,
-32768,    -5,   429,-32768,    40,  -134,   -56,   759
};


#define	YYLAST		1373


static const short yytable[] = {    53,
   349,    53,    73,   358,   472,   474,    13,    14,    15,   246,
    86,    86,    89,    86,    86,    86,    86,    86,   126,    86,
    86,    86,    86,    86,   165,    86,    86,   156,   157,   156,
   157,   108,   336,    88,   350,    90,    91,    92,    93,    94,
   239,    98,    99,   100,   101,   102,   246,   104,   105,   199,
    86,   249,   674,   243,   161,   163,   164,   243,    86,   167,
   210,   109,   171,   675,   156,   157,   156,   157,   156,   157,
   156,   157,   110,    95,   243,   156,   157,   243,   635,   103,
   118,   247,   106,   137,   156,   157,    13,    14,    15,    13,
    14,    15,    25,    13,    14,    15,   371,    13,    14,    15,
   246,    86,   155,    13,    14,    15,   156,   157,   137,   676,
   115,    13,    14,    15,   525,   586,   237,   487,   512,   492,
   107,   122,   587,   154,   277,   318,   244,   246,   130,   194,
   510,   353,    72,   137,   677,   237,   589,   638,   124,   125,
   609,   565,   353,   590,   137,    66,   448,   518,   158,   588,
   547,   636,   111,   218,   541,   460,   543,   324,   647,   319,
   649,   112,   566,    72,   194,   723,   420,   183,   185,   526,
   591,   567,   521,   168,   725,   310,    66,   354,   313,   113,
   188,   191,   595,   114,    29,   423,   653,   252,   354,   565,
   256,   325,   656,   456,   337,    29,   305,   216,   568,   548,
   688,   465,   629,   306,   631,   355,   356,   453,   137,   639,
   566,   569,   357,   354,   592,   462,   355,   356,   459,   567,
   458,   116,   245,   585,   248,   366,   468,   452,   467,   338,
   339,    25,   498,   384,   340,   461,   367,   311,   117,   341,
   314,   119,   385,   124,   125,   342,   568,   497,   593,    13,
    14,    15,    53,    53,    53,   278,   343,   326,   198,   601,
   344,   284,   285,   345,   121,   346,   123,   347,   127,   282,
   128,    82,   129,   372,   131,   286,   287,   288,   289,   348,
   132,   290,   386,   327,   312,   156,   157,   315,   124,   125,
   160,   358,   328,   329,   291,   133,   135,   330,     1,     2,
     3,     4,   331,   496,   387,   139,   144,   389,   332,   422,
   150,   504,   505,   215,   292,   159,   166,   610,   170,   333,
   261,   373,   513,   334,   268,   269,   172,   175,   273,   274,
   178,   522,   219,   186,    82,   124,   125,   162,   225,   226,
   227,   220,   335,   455,    74,   193,   200,    86,    86,    86,
    86,   464,    75,   201,   391,   383,    73,   258,   259,   260,
   202,   203,   205,   206,   207,   208,   393,   394,   209,   416,
   417,   418,   419,   395,   221,   211,   212,   482,   213,    76,
    77,   402,   214,   734,   222,   223,   224,   229,   230,    78,
   231,   410,   233,   240,   242,    79,   250,   251,   255,   257,
    74,   281,   283,   307,   316,   317,    80,   520,    75,   369,
    81,   370,   424,   426,   429,   431,   432,   433,   434,   435,
   436,    82,    74,   374,   363,   375,   441,   442,   443,   444,
    75,   393,   376,   377,   378,    76,    77,   379,   183,   380,
   185,   381,   382,   388,   390,    78,   183,   396,   185,   397,
   398,    79,   188,   191,   399,   400,   401,    76,    77,   403,
   188,   191,    80,   404,   405,   484,    81,    78,   486,   406,
   488,   407,   408,    79,   493,   494,   409,    82,   183,   185,
   499,   500,   501,   502,    80,   323,    74,   411,    81,   412,
   413,   414,   415,   646,    75,   648,   438,   650,   439,    82,
   440,   571,   445,   446,   447,   457,   558,   351,   466,   479,
   481,   594,   483,   485,   489,   490,   491,   495,   534,   503,
   536,    76,    77,   538,   506,   539,   507,   540,   509,   511,
   514,    78,   542,   544,   515,   516,   517,    79,   549,   550,
   551,   552,   519,   523,   524,   527,   528,   529,    80,   530,
   531,   532,    81,   535,   537,   735,   545,   546,   553,   596,
   554,   555,    86,    82,   556,   557,    34,   577,   578,   579,
   580,   352,   597,   570,   534,   572,   573,   574,   575,   576,
   598,   192,   606,   607,   599,   608,   612,   614,   617,   616,
   581,   582,   622,   437,   624,   628,   630,   632,   232,   642,
   643,   661,   664,   665,   666,   670,   672,     0,   681,   600,
   682,   602,   603,   604,   605,   687,   690,   699,     0,   711,
   712,   720,   721,   722,   727,   729,   730,     0,     0,   654,
     0,     0,   657,     0,     0,   611,   619,   621,   613,   623,
     0,   615,   625,   626,   627,     0,     0,   669,     0,     0,
   671,     0,     0,     0,     0,   633,   634,     0,   637,     0,
   640,     0,     0,     0,     0,   644,   645,     0,     0,   689,
     0,     0,   651,   652,     0,     0,   655,     0,     0,   658,
   660,     0,   698,   662,   663,     0,     0,     0,     0,     0,
   667,   668,     0,     0,     0,     0,     0,   673,     0,   678,
     0,   679,   680,     0,     0,     0,     0,     0,   683,   684,
   685,   686,     0,     0,     0,     0,     0,   691,     0,   692,
     0,     0,   693,   694,   695,   696,   697,     0,     0,   700,
     0,   701,   702,   703,   704,   705,   706,   707,   708,   709,
   710,     0,     0,   713,   714,   715,   716,   717,   718,   719,
     0,     0,     0,     0,     0,   724,   726,     0,   728,     6,
     8,    10,    12,     0,     0,     0,     0,   731,     0,     0,
   732,     0,     0,     0,    87,    87,     0,    87,    87,    87,
    87,    87,     0,    87,    87,    87,    87,    87,     0,    87,
    87,     0,     0,     0,    13,    14,    15,    16,     0,     0,
    54,    55,     0,     0,     0,    56,    17,     0,    18,     0,
    57,     0,     0,     0,    87,    58,     0,     0,     0,    19,
     0,    20,    87,     0,    21,     0,     0,    22,    23,     0,
    24,     0,     0,    59,     0,     0,    25,    26,    60,     0,
     0,    27,    28,     0,     0,     0,     0,   138,     0,     0,
    61,     0,     0,     0,    62,    63,    29,     0,    64,     0,
    65,    30,     0,    66,     0,    87,    31,    32,     0,     0,
    74,     0,   138,     0,     0,    33,    67,     0,    75,   174,
     0,     0,     0,     0,   320,     0,     0,     0,     0,     0,
     0,   174,     0,   197,     0,     0,     0,   138,     0,     0,
     0,     0,     0,     0,     0,    76,    77,     0,   138,     0,
     0,     0,     0,     0,     0,    78,     0,     0,     0,     0,
     0,    79,     0,     0,     0,     0,     0,     0,   197,     0,
   235,   238,    80,     0,     0,     0,    81,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    82,     0,     0,
     0,   254,     0,     0,     0,   364,     0,     0,     8,     8,
     8,    12,   263,   265,   267,    12,    12,   271,     0,    12,
    12,   276,   138,     0,     0,   280,    13,    14,    15,    16,
     0,     0,    54,    55,     0,     0,     0,    56,    17,     0,
    18,     0,    57,     0,     0,     0,     0,    58,     0,   309,
     0,    19,     0,    20,     0,     0,    21,     0,     0,    22,
    23,     0,    24,     0,     0,    59,     0,     0,    25,    26,
    60,     0,     0,    27,    28,     0,     0,     0,     0,     0,
    10,     0,    61,     0,     0,     0,    62,    63,    29,     0,
    64,     0,    65,    30,     0,    66,     0,     0,    31,    32,
     0,     0,     0,     0,     0,     0,     0,    33,    67,     0,
     0,     0,    13,    14,    15,    16,   321,     0,    54,    55,
     0,     0,     0,    56,    17,     0,    18,     0,    57,     0,
     0,     0,     0,    58,     0,    74,     0,    19,     0,    20,
     0,     0,    21,    75,     0,    22,    23,     0,    24,     0,
     0,    59,     0,     0,    25,    26,    60,     0,     0,    27,
    28,    87,    87,    87,    87,     0,     0,     0,    61,     0,
    76,    77,    62,    63,    29,     0,    64,     0,    65,    30,
    78,    66,   427,   430,    31,    32,    79,     0,     0,     0,
     0,     0,     0,    33,    67,     0,     0,    80,     0,     0,
     0,    81,   322,     0,     0,   451,     0,     0,     0,     0,
     0,     0,    82,     0,     0,     0,     0,     0,     0,     0,
   365,   470,   451,   451,    13,    14,    15,    16,     0,     0,
    54,    55,     0,     0,     0,    56,    17,     0,    18,     0,
    57,     0,     0,     0,     0,    58,     0,     0,     0,    19,
     0,    20,     0,     0,    21,     0,     0,    22,    23,     0,
    24,     0,     0,    59,     0,     0,    25,    26,    60,     0,
     0,    27,    28,     0,     0,     0,     0,     0,     0,     0,
    61,     0,     0,     0,    62,    63,    29,     0,    64,     0,
    65,    30,     0,    66,     0,     0,    31,    32,     0,    13,
    14,    15,    16,     0,     0,    33,    67,     0,     0,     0,
     0,    17,     0,    18,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    19,     0,    20,     0,     0,    21,
     0,     0,    22,    23,     0,    24,     0,   271,   560,   562,
   564,    25,    26,     0,     0,     0,    27,    28,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    29,     0,     0,     0,   584,    30,     0,     0,     0,
     0,    31,    32,     0,     0,     0,    87,     0,     0,     0,
    33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   451,     0,   451
};

static const short yycheck[] = {     5,
   266,     7,     9,   270,   414,   415,     3,     4,     5,    21,
    16,    17,    92,    19,    20,    21,    22,    23,    75,    25,
    26,    27,    28,    29,   114,    31,    32,     3,     4,     3,
     4,    92,   264,    17,   266,    19,    20,    21,    22,    23,
   175,    25,    26,    27,    28,    29,    21,    31,    32,   139,
    56,   186,    11,    20,   111,   112,   113,    20,    64,   116,
   150,    92,   119,    22,     3,     4,     3,     4,     3,     4,
     3,     4,    56,    24,    20,     3,     4,    20,    20,    30,
    64,    93,    33,    89,     3,     4,     3,     4,     5,     3,
     4,     5,    45,     3,     4,     5,    93,     3,     4,     5,
    21,   107,   108,     3,     4,     5,     3,     4,   114,    68,
    61,     3,     4,     5,    38,    59,   173,    93,    93,    93,
    28,    72,    66,   107,   214,    59,    93,    21,    79,   135,
    93,    12,    59,   139,    93,   192,    59,    21,     3,     4,
    93,    23,    12,    66,   150,    72,   396,    93,   109,    93,
    93,    93,    92,   159,    93,   405,    93,    59,    93,    93,
    93,    92,    44,    59,   170,    93,    93,   128,   129,    93,
    93,    53,    93,    25,    93,    92,    72,    58,    92,    92,
   131,   132,    92,    92,    65,    82,    92,    52,    58,    23,
   196,    93,    92,   401,     8,    65,    52,   158,    80,    93,
    92,   409,   612,    59,   614,    86,    87,   399,   214,    93,
    44,    93,    93,    58,    59,   407,    86,    87,   404,    53,
   403,    92,   183,    93,   185,    82,   412,   398,   411,    43,
    44,    45,   440,    44,    48,   406,    93,   243,    92,    53,
   246,    92,    53,     3,     4,    59,    80,   439,    93,     3,
     4,     5,   258,   259,   260,   216,    70,     8,    93,    93,
    74,    40,    41,    77,    92,    79,    92,    81,    92,   230,
    92,    85,    92,   279,    92,    54,    55,    56,    57,    93,
    92,    60,    93,    34,   245,     3,     4,   248,     3,     4,
     5,   558,    43,    44,    73,    92,    92,    48,    88,    89,
    90,    91,    53,   438,   310,    92,    92,   313,    59,   366,
    92,   446,   447,    93,    93,    92,    92,   583,    92,    70,
   203,   282,   457,    74,   207,   208,    92,    92,   211,   212,
    92,   466,    93,    92,    85,     3,     4,     5,     3,     4,
     5,    93,    93,   400,     8,    92,    92,   353,   354,   355,
   356,   408,    16,    92,   315,   306,   363,   200,   201,   202,
    92,    92,    92,    92,    92,    92,   317,   318,    92,   353,
   354,   355,   356,   324,    93,    92,    92,    82,    92,    43,
    44,   332,    92,     0,    93,    93,    93,    93,    92,    53,
    93,   342,    93,    93,    93,    59,    93,    93,    93,    93,
     8,    93,    93,    93,    93,    92,    70,   464,    16,    93,
    74,    93,   373,   374,   375,   376,   377,   378,   379,   380,
   381,    85,     8,    92,   272,    92,   387,   388,   389,   390,
    16,   382,    92,    92,    92,    43,    44,    92,   399,    92,
   401,    92,    92,    92,    92,    53,   407,    92,   409,    92,
    92,    59,   403,   404,    92,    92,    92,    43,    44,    92,
   411,   412,    70,    92,    92,   426,    74,    53,   429,    92,
   431,    92,    92,    59,   435,   436,    92,    85,   439,   440,
   441,   442,   443,   444,    70,    93,     8,    92,    74,    92,
    92,    92,    92,   628,    16,   630,    92,   632,    92,    85,
    92,   535,    93,    92,    92,    92,   529,    93,    92,    92,
    92,   563,    93,    93,    93,    93,    93,    93,   479,    93,
   481,    43,    44,   484,    93,   486,    93,   488,    93,    93,
    93,    53,   493,   494,    93,    93,    93,    59,   499,   500,
   501,   502,    93,    93,    93,    93,    93,    92,    70,    92,
    92,    92,    74,    92,    92,     0,    93,    93,    93,   565,
    93,    93,   568,    85,    93,    92,     5,    93,    93,    93,
    93,    93,    92,   534,   535,   536,   537,   538,   539,   540,
    92,   133,    93,    93,   568,    93,    92,    92,    92,   595,
   551,   552,    92,   382,    93,    92,    92,    92,   170,    93,
    93,    93,    93,    93,    93,    92,    92,    -1,    93,   570,
    93,   572,   573,   574,   575,    92,    92,    92,    -1,    93,
    93,    93,    93,    93,    93,    93,    93,    -1,    -1,   635,
    -1,    -1,   638,    -1,    -1,   586,   597,   598,   589,   600,
    -1,   592,   603,   604,   605,    -1,    -1,   653,    -1,    -1,
   656,    -1,    -1,    -1,    -1,   616,   617,    -1,   619,    -1,
   621,    -1,    -1,    -1,    -1,   626,   627,    -1,    -1,   675,
    -1,    -1,   633,   634,    -1,    -1,   637,    -1,    -1,   640,
   641,    -1,   688,   644,   645,    -1,    -1,    -1,    -1,    -1,
   651,   652,    -1,    -1,    -1,    -1,    -1,   658,    -1,   660,
    -1,   662,   663,    -1,    -1,    -1,    -1,    -1,   669,   670,
   671,   672,    -1,    -1,    -1,    -1,    -1,   678,    -1,   680,
    -1,    -1,   683,   684,   685,   686,   687,    -1,    -1,   690,
    -1,   692,   693,   694,   695,   696,   697,   698,   699,   700,
   701,    -1,    -1,   704,   705,   706,   707,   708,   709,   710,
    -1,    -1,    -1,    -1,    -1,   716,   717,    -1,   719,     1,
     2,     3,     4,    -1,    -1,    -1,    -1,   728,    -1,    -1,
   731,    -1,    -1,    -1,    16,    17,    -1,    19,    20,    21,
    22,    23,    -1,    25,    26,    27,    28,    29,    -1,    31,
    32,    -1,    -1,    -1,     3,     4,     5,     6,    -1,    -1,
     9,    10,    -1,    -1,    -1,    14,    15,    -1,    17,    -1,
    19,    -1,    -1,    -1,    56,    24,    -1,    -1,    -1,    28,
    -1,    30,    64,    -1,    33,    -1,    -1,    36,    37,    -1,
    39,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
    -1,    50,    51,    -1,    -1,    -1,    -1,    89,    -1,    -1,
    59,    -1,    -1,    -1,    63,    64,    65,    -1,    67,    -1,
    69,    70,    -1,    72,    -1,   107,    75,    76,    -1,    -1,
     8,    -1,   114,    -1,    -1,    84,    85,    -1,    16,   121,
    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,
    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,   150,    -1,
    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,   170,    -1,
   172,   173,    70,    -1,    -1,    -1,    74,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,    -1,
    -1,   193,    -1,    -1,    -1,    93,    -1,    -1,   200,   201,
   202,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
   212,   213,   214,    -1,    -1,   217,     3,     4,     5,     6,
    -1,    -1,     9,    10,    -1,    -1,    -1,    14,    15,    -1,
    17,    -1,    19,    -1,    -1,    -1,    -1,    24,    -1,   241,
    -1,    28,    -1,    30,    -1,    -1,    33,    -1,    -1,    36,
    37,    -1,    39,    -1,    -1,    42,    -1,    -1,    45,    46,
    47,    -1,    -1,    50,    51,    -1,    -1,    -1,    -1,    -1,
   272,    -1,    59,    -1,    -1,    -1,    63,    64,    65,    -1,
    67,    -1,    69,    70,    -1,    72,    -1,    -1,    75,    76,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,
    -1,    -1,     3,     4,     5,     6,    93,    -1,     9,    10,
    -1,    -1,    -1,    14,    15,    -1,    17,    -1,    19,    -1,
    -1,    -1,    -1,    24,    -1,     8,    -1,    28,    -1,    30,
    -1,    -1,    33,    16,    -1,    36,    37,    -1,    39,    -1,
    -1,    42,    -1,    -1,    45,    46,    47,    -1,    -1,    50,
    51,   353,   354,   355,   356,    -1,    -1,    -1,    59,    -1,
    43,    44,    63,    64,    65,    -1,    67,    -1,    69,    70,
    53,    72,   374,   375,    75,    76,    59,    -1,    -1,    -1,
    -1,    -1,    -1,    84,    85,    -1,    -1,    70,    -1,    -1,
    -1,    74,    93,    -1,    -1,   397,    -1,    -1,    -1,    -1,
    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    93,   413,   414,   415,     3,     4,     5,     6,    -1,    -1,
     9,    10,    -1,    -1,    -1,    14,    15,    -1,    17,    -1,
    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    28,
    -1,    30,    -1,    -1,    33,    -1,    -1,    36,    37,    -1,
    39,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
    -1,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    59,    -1,    -1,    -1,    63,    64,    65,    -1,    67,    -1,
    69,    70,    -1,    72,    -1,    -1,    75,    76,    -1,     3,
     4,     5,     6,    -1,    -1,    84,    85,    -1,    -1,    -1,
    -1,    15,    -1,    17,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    28,    -1,    30,    -1,    -1,    33,
    -1,    -1,    36,    37,    -1,    39,    -1,   529,   530,   531,
   532,    45,    46,    -1,    -1,    -1,    50,    51,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    65,    -1,    -1,    -1,   557,    70,    -1,    -1,    -1,
    -1,    75,    76,    -1,    -1,    -1,   568,    -1,    -1,    -1,
    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   612,    -1,   614
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 6:
#line 235 "parser.yxx"
{
  assert(!egg_stack.empty());
  DCAST(EggData, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 25:
#line 279 "parser.yxx"
{
  string strval = yyvsp[-1]._string;
  EggCoordinateSystem *cs = new EggCoordinateSystem;

  CoordinateSystem f = parse_coordinate_system_string(strval);
  if (f == CS_invalid) {
    eggyywarning("Unknown coordinate system " + strval);
  } else {
    cs->set_value(f);
  }
  yyval._egg = cs;
;
    break;}
case 26:
#line 302 "parser.yxx"
{
  yyval._egg = new EggComment(yyvsp[-3]._string, yyvsp[-1]._string);
;
    break;}
case 27:
#line 316 "parser.yxx"
{
  string tref_name = yyvsp[-2]._string;
  Filename filename = yyvsp[0]._string;
  EggTexture *texture = new EggTexture(tref_name, filename);

  if (textures.find(tref_name) != textures.end()) {
    eggyywarning("Duplicate texture name " + tref_name);
  }
  textures[tref_name] = texture;

  egg_stack.push_back(texture);
;
    break;}
case 28:
#line 329 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 30:
#line 345 "parser.yxx"
{
  EggTexture *texture = DCAST(EggTexture, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "type") == 0) {
    EggTexture::TextureType tt = EggTexture::string_texture_type(strval);
    if (tt == EggTexture::TT_unspecified) {
      eggyywarning("Unknown texture texture_type " + strval);
    } else {
      texture->set_texture_type(tt);
    }

  } else if (cmp_nocase_uh(name, "format") == 0) {
    EggTexture::Format f = EggTexture::string_format(strval);
    if (f == EggTexture::F_unspecified) {
      eggyywarning("Unknown texture format " + strval);
    } else {
      texture->set_format(f);
    }

  } else if (cmp_nocase_uh(name, "compression") == 0) {
    EggTexture::CompressionMode w = EggTexture::string_compression_mode(strval);
    if (w == EggTexture::CM_default) {
      eggyywarning("Unknown texture compression mode " + strval);
    } else {
      texture->set_compression_mode(w);
    }

  } else if (cmp_nocase_uh(name, "wrap") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_mode(w);
    }

  } else if (cmp_nocase_uh(name, "wrapu") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_u(w);
    }

  } else if (cmp_nocase_uh(name, "wrapv") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_v(w);
    }

  } else if (cmp_nocase_uh(name, "minfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_minfilter(f);
    }

  } else if (cmp_nocase_uh(name, "magfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_magfilter(f);
    }

  } else if (cmp_nocase_uh(name, "anisotropic_degree") == 0) {
    texture->set_anisotropic_degree((int)value);

  } else if (cmp_nocase_uh(name, "envtype") == 0) {
    EggTexture::EnvType e = EggTexture::string_env_type(strval);
    if (e == EggTexture::ET_unspecified) {
      eggyywarning("Unknown texture env type " + strval);
    } else {
      texture->set_env_type(e);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb") == 0) {
    EggTexture::CombineMode cm = EggTexture::string_combine_mode(strval);
    if (cm == EggTexture::CM_unspecified) {
      eggyywarning("Unknown combine mode " + strval);
    } else {
      texture->set_combine_mode(EggTexture::CC_rgb, cm);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source0") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 0, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand0") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 0, co);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source1") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 1, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand1") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 1, co);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source2") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 2, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand2") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 2, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha") == 0) {
    EggTexture::CombineMode cm = EggTexture::string_combine_mode(strval);
    if (cm == EggTexture::CM_unspecified) {
      eggyywarning("Unknown combine mode " + strval);
    } else {
      texture->set_combine_mode(EggTexture::CC_alpha, cm);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source0") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 0, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand0") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 0, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source1") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 1, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand1") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 1, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source2") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 2, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand2") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 2, co);
    }

  } else if (cmp_nocase_uh(name, "saved_result") == 0) {
    texture->set_saved_result(((int)value) != 0);

  } else if (cmp_nocase_uh(name, "tex_gen") == 0) {
    EggTexture::TexGen tex_gen = EggTexture::string_tex_gen(strval);
    if (tex_gen == EggTexture::TG_unspecified) {
      eggyywarning("Unknown tex-gen " + strval);
    } else {
      texture->set_tex_gen(tex_gen);
    }

  } else if (cmp_nocase_uh(name, "quality_level") == 0) {
    EggTexture::QualityLevel quality_level = EggTexture::string_quality_level(strval);
    if (quality_level == EggTexture::QL_unspecified) {
      eggyywarning("Unknown quality-level " + strval);
    } else {
      texture->set_quality_level(quality_level);
    }

  } else if (cmp_nocase_uh(name, "stage_name") == 0) {
    texture->set_stage_name(strval);

  } else if (cmp_nocase_uh(name, "priority") == 0) {
    texture->set_priority((int)value);

  } else if (cmp_nocase_uh(name, "blendr") == 0) {
    Colorf color = texture->get_color();
    color[0] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blendg") == 0) {
    Colorf color = texture->get_color();
    color[1] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blendb") == 0) {
    Colorf color = texture->get_color();
    color[2] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blenda") == 0) {
    Colorf color = texture->get_color();
    color[3] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "borderr") == 0) {
    Colorf border_color = texture->get_border_color();
    border_color[0] = value;
    texture->set_border_color(border_color);

  } else if (cmp_nocase_uh(name, "borderg") == 0) {
    Colorf border_color = texture->get_border_color();
    border_color[1] = value;
    texture->set_border_color(border_color);

  } else if (cmp_nocase_uh(name, "borderb") == 0) {
    Colorf border_color = texture->get_border_color();
    border_color[2] = value;
    texture->set_border_color(border_color);

  } else if (cmp_nocase_uh(name, "bordera") == 0) {
    Colorf border_color = texture->get_border_color();
    border_color[3] = value;
    texture->set_border_color(border_color);

  } else if (cmp_nocase_uh(name, "uv_name") == 0) {
    texture->set_uv_name(strval);

  } else if (cmp_nocase_uh(name, "rgb_scale") == 0) {
    int int_value = (int)value;
    if (int_value != 1 && int_value != 2 && int_value != 4) {
      eggyyerror("Invalid rgb-scale value " + strval);
    } else {
      texture->set_rgb_scale(int_value);
    }

  } else if (cmp_nocase_uh(name, "alpha_scale") == 0) {
    int int_value = (int)value;
    if (int_value != 1 && int_value != 2 && int_value != 4) {
      eggyyerror("Invalid alpha-scale value " + strval);
    } else {
      texture->set_alpha_scale(int_value);
    }

  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      texture->set_alpha_mode(a);
    }

  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      texture->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      texture->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      texture->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    texture->set_draw_order((int)value);

  } else if (cmp_nocase_uh(name, "bin") == 0) {
    texture->set_bin(strval);

  } else if (cmp_nocase_uh(name, "alpha_file") == 0) {
    texture->set_alpha_filename(strval);

  } else if (cmp_nocase_uh(name, "alpha_file_channel") == 0) {
    texture->set_alpha_file_channel((int)value);

  } else if (cmp_nocase_uh(name, "read_mipmaps") == 0) {
    texture->set_read_mipmaps(((int)value) != 0);

  } else {
    eggyywarning("Unsupported texture scalar: " + name);
  }
;
    break;}
case 32:
#line 688 "parser.yxx"
{
  string mref_name = yyvsp[-1]._string;
  EggMaterial *material = new EggMaterial(mref_name);

  if (materials.find(mref_name) != materials.end()) {
    eggyywarning("Duplicate material name " + mref_name);
  }
  materials[mref_name] = material;

  egg_stack.push_back(material);
;
    break;}
case 33:
#line 700 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 35:
#line 716 "parser.yxx"
{
  EggMaterial *material = DCAST(EggMaterial, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "diffr") == 0) {
    Colorf diff = material->get_diff();
    diff[0] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffg") == 0) {
    Colorf diff = material->get_diff();
    diff[1] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffb") == 0) {
    Colorf diff = material->get_diff();
    diff[2] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffa") == 0) {
    Colorf diff = material->get_diff();
    diff[3] = value;
    material->set_diff(diff);

  } else if (cmp_nocase_uh(name, "ambr") == 0) {
    Colorf amb = material->get_amb();
    amb[0] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambg") == 0) {
    Colorf amb = material->get_amb();
    amb[1] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambb") == 0) {
    Colorf amb = material->get_amb();
    amb[2] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "amba") == 0) {
    Colorf amb = material->get_amb();
    amb[3] = value;
    material->set_amb(amb);

  } else if (cmp_nocase_uh(name, "emitr") == 0) {
    Colorf emit = material->get_emit();
    emit[0] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitg") == 0) {
    Colorf emit = material->get_emit();
    emit[1] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitb") == 0) {
    Colorf emit = material->get_emit();
    emit[2] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emita") == 0) {
    Colorf emit = material->get_emit();
    emit[3] = value;
    material->set_emit(emit);

  } else if (cmp_nocase_uh(name, "specr") == 0) {
    Colorf spec = material->get_spec();
    spec[0] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specg") == 0) {
    Colorf spec = material->get_spec();
    spec[1] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specb") == 0) {
    Colorf spec = material->get_spec();
    spec[2] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "speca") == 0) {
    Colorf spec = material->get_spec();
    spec[3] = value;
    material->set_spec(spec);

  } else if (cmp_nocase_uh(name, "shininess") == 0) {
    material->set_shininess(value);

  } else if (cmp_nocase_uh(name, "local") == 0) {
    material->set_local(value != 0.0);

  } else {
    eggyywarning("Unsupported material scalar: " + name);
  }
;
    break;}
case 36:
#line 811 "parser.yxx"
{
  string node_name = yyvsp[-3]._string;
  Filename filename = yyvsp[-1]._string;
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  yyval._egg = ref;
;
    break;}
case 37:
#line 818 "parser.yxx"
{
  if (cmp_nocase_uh(yyvsp[-5]._string, "group") != 0) {
    eggyyerror("keyword 'group' expected");
  }
  string node_name = yyvsp[-3]._string;
  Filename filename = yyvsp[-1]._string;
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  yyval._egg = ref;
;
    break;}
case 38:
#line 838 "parser.yxx"
{
  string name = yyvsp[0]._string;
  EggVertexPool *pool = NULL;

  VertexPools::const_iterator vpi = vertex_pools.find(name);
  if (vpi != vertex_pools.end()) {
    pool = (*vpi).second;
    if (pool->has_defined_vertices()) {
      eggyywarning("Duplicate vertex pool name " + name);
      pool = new EggVertexPool(name);
      // The egg syntax starts counting at 1 by convention.
      pool->set_highest_index(0);
      vertex_pools[name] = pool;
    }
  } else {
    pool = new EggVertexPool(name);
    // The egg syntax starts counting at 1 by convention.
    pool->set_highest_index(0);
    vertex_pools[name] = pool;
  }

  egg_stack.push_back(pool);
;
    break;}
case 39:
#line 862 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 42:
#line 890 "parser.yxx"
{
  egg_stack.push_back(new EggVertex);
;
    break;}
case 43:
#line 894 "parser.yxx"
{
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  DCAST(EggVertexPool, egg_stack.back())->add_vertex(vtx);
;
    break;}
case 44:
#line 901 "parser.yxx"
{
  vertex_index = (int)yyvsp[0]._number;
  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());

  if (vertex_index < 0) {
    ostringstream errmsg;
    errmsg << "Ignoring invalid vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;

  } else if (pool->has_vertex(vertex_index)) {
    ostringstream errmsg;
    errmsg << "Ignoring duplicate vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;
  }

  // Even if we didn't like the vertex index number, we still need to
  // go ahead and parse the vertex.  We just won't save it.

  egg_stack.push_back(new EggVertex);
;
    break;}
case 45:
#line 926 "parser.yxx"
{
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());
  if (vertex_index != -1) {
    pool->add_vertex(vtx, vertex_index);
  }
;
    break;}
case 46:
#line 947 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(yyvsp[0]._number);
;
    break;}
case 47:
#line 951 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint2d(yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 48:
#line 955 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint3d(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 49:
#line 959 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint4d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 50:
#line 963 "parser.yxx"
{
  EggVertex *vertex = DCAST(EggVertex, egg_stack.back());
  EggVertexUV *uv = new EggVertexUV(yyvsp[-1]._string, TexCoordd::zero());
  egg_stack.push_back(uv);
  if (vertex->has_uv(yyvsp[-1]._string)) {
    eggyywarning("Ignoring repeated UV name " + yyvsp[-1]._string);
  } else {
    vertex->set_uv_obj(uv);
  }
;
    break;}
case 51:
#line 974 "parser.yxx"
{
  egg_stack.pop_back();
;
    break;}
case 54:
#line 980 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 55:
#line 988 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 56:
#line 1007 "parser.yxx"
{
  DCAST(EggVertexUV, egg_stack.back())->set_uv(TexCoordd(yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 57:
#line 1011 "parser.yxx"
{
  DCAST(EggVertexUV, egg_stack.back())->set_uvw(LVecBase3d(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 58:
#line 1015 "parser.yxx"
{
  if (DCAST(EggVertexUV, egg_stack.back())->has_tangent()) {
    eggyywarning("Ignoring repeated tangent");
  } else {
    DCAST(EggVertexUV, egg_stack.back())->set_tangent(Normald(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
  }
;
    break;}
case 59:
#line 1023 "parser.yxx"
{
  if (DCAST(EggVertexUV, egg_stack.back())->has_binormal()) {
    eggyywarning("Ignoring repeated binormal");
  } else {
    DCAST(EggVertexUV, egg_stack.back())->set_binormal(Normald(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
  }
;
    break;}
case 60:
#line 1031 "parser.yxx"
{
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-4]._string, LVector3d(yyvsp[-2]._number, yyvsp[-1]._number, 0.0))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 61:
#line 1039 "parser.yxx"
{
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 62:
#line 1047 "parser.yxx"
{
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-3]._string, LVector3d(yyvsp[-2]._number, yyvsp[-1]._number, 0.0))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-3]._string);
  }
;
    break;}
case 63:
#line 1055 "parser.yxx"
{
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 64:
#line 1073 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_normal(Normald(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 65:
#line 1077 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 66:
#line 1085 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 67:
#line 1103 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_color(Colorf(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 68:
#line 1107 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-6]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-6]._string);
  }
;
    break;}
case 69:
#line 1115 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-5]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 70:
#line 1133 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  egg_stack.push_back(group);
;
    break;}
case 71:
#line 1138 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 72:
#line 1153 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  group->set_group_type(EggGroup::GT_joint);
  egg_stack.push_back(group);
;
    break;}
case 73:
#line 1159 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 74:
#line 1174 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  group->set_group_type(EggGroup::GT_instance);
  egg_stack.push_back(group);
;
    break;}
case 75:
#line 1180 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 77:
#line 1196 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  unsigned long ulong_value = yyvsp[-1]._ulong;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    group->set_switch_fps(value);

  } else if (cmp_nocase_uh(name, "no_fog") == 0) {
    group->set_nofog_flag(value != 0);

  } else if (cmp_nocase_uh(name, "decal") == 0) {
    group->set_decal_flag(value != 0);

  } else if (cmp_nocase_uh(name, "direct") == 0) {
    group->set_direct_flag(value != 0);

  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      group->set_alpha_mode(a);
    }

  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      group->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      group->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      group->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    group->set_draw_order(ulong_value);

  } else if (cmp_nocase_uh(name, "bin") == 0) {
    group->set_bin(strval);

  } else if (cmp_nocase_uh(name, "collide_mask") == 0) {
    group->set_collide_mask(group->get_collide_mask() | ulong_value);

  } else if (cmp_nocase_uh(name, "from_collide_mask") == 0) {
    group->set_from_collide_mask(group->get_from_collide_mask() | ulong_value);

  } else if (cmp_nocase_uh(name, "into_collide_mask") == 0) {
    group->set_into_collide_mask(group->get_into_collide_mask() | ulong_value);

  } else if (cmp_nocase_uh(name, "portal") == 0) {
    group->set_portal_flag(value != 0);

  } else if (cmp_nocase_uh(name, "polylight") == 0) {
    group->set_polylight_flag(value != 0);

  } else if (cmp_nocase_uh(name, "indexed") == 0) {
    group->set_indexed_flag(value != 0);

  } else if (cmp_nocase_uh(name, "blend") == 0) {
    EggGroup::BlendMode blend_mode =
      EggGroup::string_blend_mode(strval);
    if (blend_mode == EggGroup::BM_unspecified) {
      eggyywarning("Unknown blend mode " + strval);
    } else {
      group->set_blend_mode(blend_mode);
    }

  } else if (cmp_nocase_uh(name, "blendop_a") == 0) {
    EggGroup::BlendOperand blend_operand =
      EggGroup::string_blend_operand(strval);
    if (blend_operand == EggGroup::BO_unspecified) {
      eggyywarning("Unknown blend operand " + strval);
    } else {
      group->set_blend_operand_a(blend_operand);
    }

  } else if (cmp_nocase_uh(name, "blendop_b") == 0) {
    EggGroup::BlendOperand blend_operand =
      EggGroup::string_blend_operand(strval);
    if (blend_operand == EggGroup::BO_unspecified) {
      eggyywarning("Unknown blend operand " + strval);
    } else {
      group->set_blend_operand_b(blend_operand);
    }

  } else if (cmp_nocase_uh(name, "blendr") == 0) {
    Colorf color = group->get_blend_color();
    color[0] = value;
    group->set_blend_color(color);

  } else if (cmp_nocase_uh(name, "blendg") == 0) {
    Colorf color = group->get_blend_color();
    color[1] = value;
    group->set_blend_color(color);

  } else if (cmp_nocase_uh(name, "blendb") == 0) {
    Colorf color = group->get_blend_color();
    color[2] = value;
    group->set_blend_color(color);

  } else if (cmp_nocase_uh(name, "blenda") == 0) {
    Colorf color = group->get_blend_color();
    color[3] = value;
    group->set_blend_color(color);

  } else {
    eggyywarning("Unknown group scalar " + name);
  }
;
    break;}
case 78:
#line 1326 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::BillboardType f = EggGroup::string_billboard_type(strval);
  if (f == EggGroup::BT_none) {
    eggyywarning("Unknown billboard type " + strval);
  } else {
    group->set_billboard_type(f);
  }
;
    break;}
case 79:
#line 1338 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_billboard_center(LPoint3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 80:
#line 1343 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = yyvsp[-4]._string;

  group->set_collision_name(name);
;
    break;}
case 81:
#line 1350 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_dcs_type(value!=0 ? EggGroup::DC_default : EggGroup::DC_none);
;
    break;}
case 82:
#line 1356 "parser.yxx"
{
  // The special flavor of DCS, with { sync } or { nosync }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::DCSType f = EggGroup::string_dcs_type(strval);
  if (f == EggGroup::DC_unspecified) {
    eggyywarning("Unknown DCS type " + strval);
  } else {
    group->set_dcs_type(f);
  }
;
    break;}
case 83:
#line 1369 "parser.yxx"
{
  // The traditional flavor of DART, with { 0 } or { 1 }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_dart_type(value!=0 ? EggGroup::DT_default : EggGroup::DT_none);
;
    break;}
case 84:
#line 1376 "parser.yxx"
{
  // The special flavor of DART, with { sync } or { nosync }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::DartType f = EggGroup::string_dart_type(strval);
  if (f == EggGroup::DT_none) {
    eggyywarning("Unknown dart type " + strval);
  } else {
    group->set_dart_type(f);
  }
;
    break;}
case 85:
#line 1389 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_switch_flag(value!=0);
;
    break;}
case 86:
#line 1395 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string type = yyvsp[-1]._string;
  group->add_object_type(type);
;
    break;}
case 87:
#line 1401 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_model_flag(value!=0);
;
    break;}
case 88:
#line 1407 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_tag(yyvsp[-3]._string, yyvsp[-1]._string);
;
    break;}
case 89:
#line 1412 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_texlist_flag(value!=0);
;
    break;}
case 93:
#line 1421 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 94:
#line 1435 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[0]._string;

  EggGroup::CollisionSolidType f = EggGroup::string_cs_type(strval);
  if (f == EggGroup::CST_none) {
    eggyywarning("Unknown collision solid type " + strval);
  } else {
    if (f == EggGroup::CST_polyset && group->get_cs_type() != EggGroup::CST_none) {
      // By convention, a CST_polyset doesn't replace any existing
      // contradictory type, so ignore it if this happens.  This
      // allows the artist to place, for instance, <ObjectType> {
      // sphere } and <ObjectType> { trigger } together.

    } else {
      group->set_cs_type(f);
    }
  }
;
    break;}
case 96:
#line 1466 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[0]._string;

  EggGroup::CollideFlags f = EggGroup::string_collide_flags(strval);
  if (f == EggGroup::CF_none) {
    eggyywarning("Unknown collision flag " + strval);
  } else {
    group->set_collide_flags(group->get_collide_flags() | f);
  }
;
    break;}
case 97:
#line 1488 "parser.yxx"
{
  egg_stack.back()->as_transform()->clear_transform();
;
    break;}
case 112:
#line 1520 "parser.yxx"
{
  egg_stack.back()->as_transform()->add_translate2d(LVector2d(yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 113:
#line 1527 "parser.yxx"
{
  egg_stack.back()->as_transform()->add_translate3d(LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 114:
#line 1534 "parser.yxx"
{
  egg_stack.back()->as_transform()->add_rotate2d(yyvsp[-1]._number);
;
    break;}
case 115:
#line 1541 "parser.yxx"
{
  egg_stack.back()->as_transform()->add_rotx(yyvsp[-1]._number);
;
    break;}
case 116:
#line 1548 "parser.yxx"
{
  egg_stack.back()->as_transform()->add_roty(yyvsp[-1]._number);
;
    break;}
case 117:
#line 1555 "parser.yxx"
{
  egg_stack.back()->as_transform()->add_rotz(yyvsp[-1]._number);
;
    break;}
case 118:
#line 1562 "parser.yxx"
{
  egg_stack.back()->as_transform()->add_rotate3d(yyvsp[-4]._number, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 119:
#line 1569 "parser.yxx"
{
  egg_stack.back()->as_transform()->add_scale2d(LVecBase2d(yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 120:
#line 1576 "parser.yxx"
{
  egg_stack.back()->as_transform()->add_scale3d(LVecBase3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 121:
#line 1583 "parser.yxx"
{
  egg_stack.back()->as_transform()->add_uniform_scale(yyvsp[-1]._number);
;
    break;}
case 124:
#line 1597 "parser.yxx"
{
  egg_stack.back()->as_transform()->add_matrix3
    (LMatrix3d(yyvsp[-8]._number, yyvsp[-7]._number, yyvsp[-6]._number,
               yyvsp[-5]._number, yyvsp[-4]._number, yyvsp[-3]._number,
               yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 127:
#line 1615 "parser.yxx"
{
  egg_stack.back()->as_transform()->add_matrix4
    (LMatrix4d(yyvsp[-15]._number, yyvsp[-14]._number, yyvsp[-13]._number, yyvsp[-12]._number,
               yyvsp[-11]._number, yyvsp[-10]._number, yyvsp[-9]._number, yyvsp[-8]._number,
               yyvsp[-7]._number, yyvsp[-6]._number, yyvsp[-5]._number, yyvsp[-4]._number,
               yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 128:
#line 1634 "parser.yxx"
{
  if (yyvsp[-2]._egg != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, yyvsp[-2]._egg);
    EggGroup *group = DCAST(EggGroup, egg_stack.back());
    PTA_double nums = yyvsp[-6]._number_list;
    double membership = yyvsp[-5]._number;

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_forward_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        group->ref_vertex(vertex, membership);
      }
    }
  }
;
    break;}
case 129:
#line 1667 "parser.yxx"
{
  yyval._number = 1.0;
;
    break;}
case 130:
#line 1671 "parser.yxx"
{
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  double result = yyvsp[-5]._number;
  
  if (cmp_nocase_uh(name, "membership") == 0) {
    result = value;
  } else {
    eggyywarning("Unknown group vertex scalar " + name);
  }

  yyval._number = result;
;
    break;}
case 132:
#line 1708 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance(yyvsp[-8]._number, yyvsp[-7]._number, LPoint3d(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number)));
;
    break;}
case 133:
#line 1713 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance(yyvsp[-9]._number, yyvsp[-8]._number, LPoint3d(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number), yyvsp[-7]._number));
;
    break;}
case 134:
#line 1730 "parser.yxx"
{
  egg_stack.push_back(new EggPolygon(yyvsp[0]._string));
;
    break;}
case 135:
#line 1734 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 136:
#line 1749 "parser.yxx"
{
  egg_stack.push_back(new EggTriangleFan(yyvsp[0]._string));
;
    break;}
case 137:
#line 1753 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 138:
#line 1768 "parser.yxx"
{
  egg_stack.push_back(new EggTriangleStrip(yyvsp[0]._string));
;
    break;}
case 139:
#line 1772 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 140:
#line 1787 "parser.yxx"
{
  egg_stack.push_back(new EggPoint(yyvsp[0]._string));
;
    break;}
case 141:
#line 1791 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 142:
#line 1806 "parser.yxx"
{
  egg_stack.push_back(new EggLine(yyvsp[0]._string));
;
    break;}
case 143:
#line 1810 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 144:
#line 1825 "parser.yxx"
{
  egg_stack.push_back(new EggNurbsSurface(yyvsp[0]._string));
;
    break;}
case 145:
#line 1829 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 146:
#line 1844 "parser.yxx"
{
  egg_stack.push_back(new EggNurbsCurve(yyvsp[0]._string));
;
    break;}
case 147:
#line 1848 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 152:
#line 1878 "parser.yxx"
{
  if (!egg_stack.back()->is_of_type(EggCompositePrimitive::get_class_type())) {
    eggyyerror("Not a composite primitive; components are not allowed here.");
  } else {
    PT(EggCompositePrimitive) comp = DCAST(EggCompositePrimitive, egg_stack.back());
    if (yyvsp[-1]._number < 0 || yyvsp[-1]._number >= comp->get_num_components()) {
      eggyyerror("Invalid component number");
    }
  }
  // We temporarily add an EggPolygon to the stack, just to receive
  // the component attributes.
  egg_stack.push_back(new EggPolygon);
;
    break;}
case 153:
#line 1892 "parser.yxx"
{
  PT(EggPrimitive) prim = DCAST(EggPrimitive, egg_stack.back());
  egg_stack.pop_back();
  PT(EggCompositePrimitive) comp = DCAST(EggCompositePrimitive, egg_stack.back());
  comp->set_component((int)yyvsp[-4]._number, prim);
;
    break;}
case 161:
#line 1906 "parser.yxx"
{
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "thick") == 0) {
    if (primitive->is_of_type(EggLine::get_class_type())) {
      DCAST(EggLine, primitive)->set_thick(value);
    } else if (primitive->is_of_type(EggPoint::get_class_type())) {
      DCAST(EggPoint, primitive)->set_thick(value);
    } else {
      eggyywarning("scalar thick is only meaningful for points and lines.");
    }
  } else if (cmp_nocase_uh(name, "perspective") == 0) {
    if (primitive->is_of_type(EggPoint::get_class_type())) {
      DCAST(EggPoint, primitive)->set_perspective(value != 0);
    } else {
      eggyywarning("scalar perspective is only meaningful for points.");
    }
  } else {
    eggyywarning("Unknown scalar " + name);
  }
;
    break;}
case 173:
#line 1990 "parser.yxx"
{
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, yyvsp[0]._egg);
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_curves_on_surface.push_back(curve);
;
    break;}
case 175:
#line 1997 "parser.yxx"
{
  EggNurbsSurface *primitive = DCAST(EggNurbsSurface, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "u_subdiv") == 0) {
    primitive->set_u_subdiv((int)value);
  } else if (cmp_nocase_uh(name, "v_subdiv") == 0) {
    primitive->set_v_subdiv((int)value);
  } else {
    eggyywarning("Unknown scalar " + name);
  }
;
    break;}
case 186:
#line 2071 "parser.yxx"
{
  EggNurbsCurve *primitive = DCAST(EggNurbsCurve, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "subdiv") == 0) {
    primitive->set_subdiv((int)value);
  } else if (cmp_nocase_uh(name, "type") == 0) {
    EggCurve::CurveType a = EggCurve::string_curve_type(strval);
    if (a == EggCurve::CT_none) {
      eggyywarning("Unknown curve type " + strval);
    } else {
      primitive->set_curve_type(a);
    }
    
  } else {
    eggyywarning("Unknown scalar " + name);
  }
;
    break;}
case 187:
#line 2140 "parser.yxx"
{
  if (yyvsp[0]._egg != (EggTexture *)NULL) {
    EggTexture *texture = DCAST(EggTexture, yyvsp[0]._egg);
    DCAST(EggPrimitive, egg_stack.back())->add_texture(texture);
  }
;
    break;}
case 188:
#line 2157 "parser.yxx"
{
  EggTexture *texture = NULL;

  // Defining a texture on-the-fly.
  Filename filename = yyvsp[0]._string;
  string tref_name = filename.get_basename();

  Textures::iterator vpi = textures.find(tref_name);
  if (vpi == textures.end()) {
    // The texture was not yet defined.  Define it.
    texture = new EggTexture(tref_name, filename);
    textures[tref_name] = texture;

    if (egg_top_node != NULL) {
      egg_top_node->add_child(texture);
    }

  } else {
    // The texture already existed.  Use it.
    texture = (*vpi).second;
    if (filename != texture->get_filename()) {
      eggyywarning(string("Using previous path: ") + 
                   texture->get_filename().get_fullpath());
    }
  }

  nassertr(texture != NULL, 0);
  DCAST(EggPrimitive, egg_stack.back())->add_texture(texture);
;
    break;}
case 189:
#line 2197 "parser.yxx"
{
  if (yyvsp[0]._egg != (EggMaterial *)NULL) {
    EggMaterial *material = DCAST(EggMaterial, yyvsp[0]._egg);
    DCAST(EggPrimitive, egg_stack.back())->set_material(material);
  }
;
    break;}
case 190:
#line 2214 "parser.yxx"
{
  DCAST(EggPrimitive, egg_stack.back())->set_normal(Normald(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 191:
#line 2218 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 192:
#line 2226 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 193:
#line 2244 "parser.yxx"
{
  DCAST(EggPrimitive, egg_stack.back())->set_color(Colorf(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 194:
#line 2248 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-6]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-6]._string);
  }
;
    break;}
case 195:
#line 2256 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-5]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 196:
#line 2274 "parser.yxx"
{
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  int value = (int)yyvsp[0]._number;
  primitive->set_bface_flag(value!=0);
;
    break;}
case 197:
#line 2290 "parser.yxx"
{
  if (yyvsp[-2]._egg != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, yyvsp[-2]._egg);
    EggPrimitive *prim = DCAST(EggPrimitive, egg_stack.back());
    PTA_double nums = yyvsp[-5]._number_list;

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_forward_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        prim->add_vertex(vertex);
      }
    }
  }
;
    break;}
case 198:
#line 2321 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  int u_order = (int)yyvsp[-1]._number;
  int v_order = (int)yyvsp[0]._number;
  nurbs->set_u_order(u_order);
  nurbs->set_v_order(v_order);
;
    break;}
case 199:
#line 2339 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_u_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_u_knot(i, nums[i]);
  }
;
    break;}
case 200:
#line 2359 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_v_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_v_knot(i, nums[i]);
  }
;
    break;}
case 201:
#line 2379 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_trims.push_back(EggNurbsSurface::Trim());
;
    break;}
case 203:
#line 2395 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nurbs->_trims.back().push_back(EggNurbsSurface::Loop());
;
    break;}
case 204:
#line 2401 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nassertr(!nurbs->_trims.back().empty(), 0);
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, yyvsp[0]._egg); 
  nurbs->_trims.back().back().push_back(curve);
;
    break;}
case 205:
#line 2420 "parser.yxx"
{
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  int order = (int)yyvsp[0]._number;
  nurbs->set_order(order);
;
    break;}
case 206:
#line 2436 "parser.yxx"
{
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_knot(i, nums[i]);
  }
;
    break;}
case 207:
#line 2457 "parser.yxx"
{
  EggTable *table = new EggTable(yyvsp[0]._string);
  table->set_table_type(EggTable::TT_table);
  egg_stack.push_back(table);
;
    break;}
case 208:
#line 2463 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 209:
#line 2479 "parser.yxx"
{
  EggTable *table = new EggTable(yyvsp[0]._string);
  table->set_table_type(EggTable::TT_bundle);
  egg_stack.push_back(table);
;
    break;}
case 210:
#line 2485 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 212:
#line 2501 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 213:
#line 2505 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 214:
#line 2509 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 215:
#line 2513 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 216:
#line 2517 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 217:
#line 2532 "parser.yxx"
{
  EggSAnimData *anim_data = new EggSAnimData(yyvsp[0]._string);
  egg_stack.push_back(anim_data);
;
    break;}
case 218:
#line 2537 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 220:
#line 2554 "parser.yxx"
{
  EggSAnimData *anim_data = DCAST(EggSAnimData, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else {
    eggyywarning("Unsupported S$Anim scalar: " + name);
  }
;
    break;}
case 221:
#line 2566 "parser.yxx"
{
  DCAST(EggSAnimData, egg_stack.back())->set_data(yyvsp[-1]._number_list);
;
    break;}
case 222:
#line 2580 "parser.yxx"
{
  EggXfmAnimData *anim_data = new EggXfmAnimData(yyvsp[0]._string);
  egg_stack.push_back(anim_data);
;
    break;}
case 223:
#line 2585 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 225:
#line 2602 "parser.yxx"
{
  EggXfmAnimData *anim_data = DCAST(EggXfmAnimData, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_data->set_order(strval);
  } else if (cmp_nocase_uh(name, "contents") == 0) {
    anim_data->set_contents(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim scalar: " + name);
  }
;
    break;}
case 226:
#line 2619 "parser.yxx"
{
  DCAST(EggXfmAnimData, egg_stack.back())->set_data(yyvsp[-1]._number_list);
;
    break;}
case 227:
#line 2633 "parser.yxx"
{
  EggXfmSAnim *anim_group = new EggXfmSAnim(yyvsp[0]._string);
  egg_stack.push_back(anim_group);
;
    break;}
case 228:
#line 2638 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 230:
#line 2655 "parser.yxx"
{
  EggXfmSAnim *anim_group = DCAST(EggXfmSAnim, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_group->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_group->set_order(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim_S$ scalar: " + name);
  }
;
    break;}
case 231:
#line 2670 "parser.yxx"
{
  DCAST(EggXfmSAnim, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 232:
#line 2685 "parser.yxx"
{
  EggAnimPreload *anim_preload = new EggAnimPreload(yyvsp[0]._string);
  egg_stack.push_back(anim_preload);
;
    break;}
case 233:
#line 2690 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 235:
#line 2707 "parser.yxx"
{
  EggAnimPreload *anim_preload = DCAST(EggAnimPreload, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_preload->set_fps(value);
  } else if (cmp_nocase_uh(name, "frames") == 0) {
    anim_preload->set_num_frames((int)value);
  } else {
    eggyywarning("Unsupported AnimPreload scalar: " + name);
  }
;
    break;}
case 236:
#line 2731 "parser.yxx"
{
  yyval._number_list = PTA_double::empty_array(0);
;
    break;}
case 237:
#line 2735 "parser.yxx"
{
  yyval._number_list.push_back((double)yyvsp[0]._number);
;
    break;}
case 238:
#line 2749 "parser.yxx"
{
  yyval._number_list = PTA_double::empty_array(0);
;
    break;}
case 239:
#line 2753 "parser.yxx"
{
  yyval._number_list.push_back(yyvsp[0]._number);
;
    break;}
case 240:
#line 2767 "parser.yxx"
{
  string name = yyvsp[0]._string;
  Textures::iterator vpi = textures.find(name);
  if (vpi == textures.end()) {
    eggyyerror("Unknown texture " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
;
    break;}
case 241:
#line 2788 "parser.yxx"
{
  string name = yyvsp[0]._string;
  Materials::iterator vpi = materials.find(name);
  if (vpi == materials.end()) {
    eggyyerror("Unknown material " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
;
    break;}
case 242:
#line 2809 "parser.yxx"
{
  string name = yyvsp[0]._string;
  VertexPools::iterator vpi = vertex_pools.find(name);
  if (vpi == vertex_pools.end()) {
    // This will become a forward reference.
    EggVertexPool *pool = new EggVertexPool(name);
    // The egg syntax starts counting at 1 by convention.
    pool->set_highest_index(0);
    vertex_pools[name] = pool;
    yyval._egg = pool;
  } else {
    yyval._egg = (*vpi).second;
  }
;
    break;}
case 243:
#line 2835 "parser.yxx"
{
  eggyyerror("Name required.");
  yyval._string = "";
;
    break;}
case 246:
#line 2864 "parser.yxx"
{
  eggyyerror("String required.");
  yyval._string = "";
;
    break;}
case 248:
#line 2880 "parser.yxx"
{
  yyval._string = "";
;
    break;}
case 250:
#line 2898 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
;
    break;}
case 251:
#line 2902 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
;
    break;}
case 253:
#line 2919 "parser.yxx"
{
  yyval._string = "";
;
    break;}
case 254:
#line 2923 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
;
    break;}
case 255:
#line 2939 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
;
    break;}
case 256:
#line 2943 "parser.yxx"
{
  yyval._string = yyvsp[-1]._string + "\n" + yyvsp[0]._string;
;
    break;}
case 258:
#line 2958 "parser.yxx"
{
  yyval._number = yyvsp[0]._ulong;
;
    break;}
case 259:
#line 2973 "parser.yxx"
{
  yyval._number = yyvsp[0]._number;
  yyval._ulong = (unsigned long)yyvsp[0]._number;
  yyval._string = yyvsp[0]._string;
;
    break;}
case 260:
#line 2979 "parser.yxx"
{
  yyval._number = yyvsp[0]._ulong;
  yyval._ulong = yyvsp[0]._ulong;
  yyval._string = yyvsp[0]._string;
;
    break;}
case 261:
#line 2985 "parser.yxx"
{
  yyval._number = 0.0;
  yyval._ulong = 0;
  yyval._string = yyvsp[0]._string;
;
    break;}
case 262:
#line 3002 "parser.yxx"
{
  int i = (int)yyvsp[0]._number;
  if ((double)i != yyvsp[0]._number) {
    eggyywarning("Integer expected.");
    yyval._number = (double)i;
  }
;
    break;}
case 263:
#line 3010 "parser.yxx"
{
  yyval._number = yyvsp[0]._ulong;
;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 3017 "parser.yxx"


/*  A Bison parser, made from parser.yxx
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse eggyyparse
#define yylex eggyylex
#define yyerror eggyyerror
#define yylval eggyylval
#define yychar eggyychar
#define yydebug eggyydebug
#define yynerrs eggyynerrs
#define	NUMBER	257
#define	STRING	258
#define	BEZIERCURVE	259
#define	BFACE	260
#define	BILLBOARD	261
#define	BILLBOARDCENTER	262
#define	BUNDLE	263
#define	CLOSED	264
#define	COLLIDE	265
#define	COMMENT	266
#define	COORDSYSTEM	267
#define	CV	268
#define	DART	269
#define	DNORMAL	270
#define	DRGBA	271
#define	DUV	272
#define	DXYZ	273
#define	DCS	274
#define	DISTANCE	275
#define	DTREF	276
#define	DYNAMICVERTEXPOOL	277
#define	EXTERNAL_FILE	278
#define	FLIGHT	279
#define	GROUP	280
#define	HIP	281
#define	INTANGENT	282
#define	JOINT	283
#define	KNOTS	284
#define	INCLUDE	285
#define	INSTANCE	286
#define	LOOP	287
#define	MATERIAL	288
#define	MATRIX3	289
#define	MATRIX4	290
#define	MODEL	291
#define	MREF	292
#define	NORMAL	293
#define	NURBSCURVE	294
#define	NURBSSURFACE	295
#define	OBJECTTYPE	296
#define	ORDER	297
#define	OUTTANGENT	298
#define	POINTLIGHT	299
#define	POLYGON	300
#define	REF	301
#define	RGBA	302
#define	ROTATE	303
#define	ROTX	304
#define	ROTY	305
#define	ROTZ	306
#define	SANIM	307
#define	SCALAR	308
#define	SCALE	309
#define	SEQUENCE	310
#define	SHADING	311
#define	SWITCH	312
#define	SWITCHCONDITION	313
#define	TABLE	314
#define	TABLE_V	315
#define	TEXLIST	316
#define	TEXTURE	317
#define	TLENGTHS	318
#define	TRANSFORM	319
#define	TRANSLATE	320
#define	TREF	321
#define	TRIM	322
#define	TXT	323
#define	UKNOTS	324
#define	UV	325
#define	VKNOTS	326
#define	VERTEX	327
#define	VERTEXANIM	328
#define	VERTEXPOOL	329
#define	VERTEXREF	330
#define	XFMANIM	331
#define	XFMSANIM	332
#define	START_EGG	333
#define	START_GROUP_BODY	334
#define	START_TEXTURE_BODY	335
#define	START_PRIMITIVE_BODY	336

#line 6 "parser.yxx"


#include <pandabase.h>
#include "parserDefs.h"
#include "lexerDefs.h"
#include "eggObject.h"
#include "eggGroup.h"
#include "eggVertex.h"
#include "eggVertexPool.h"
#include "eggPolygon.h"
#include "eggPoint.h"
#include "eggNurbsSurface.h"
#include "eggNurbsCurve.h"
#include "eggTable.h"
#include "eggSAnimData.h"
#include "eggXfmSAnim.h"
#include "eggXfmAnimData.h"
#include "eggTexture.h"
#include "eggMaterial.h"
#include "eggComment.h"
#include "eggCoordinateSystem.h"
#include "eggExternalReference.h"
#include "eggData.h"
#include "pt_EggTexture.h"
#include "pt_EggMaterial.h"

#include "string_utils.h"
#include "filename.h"
#include "luse.h"
#include "lmatrix.h"
#include "coordinateSystem.h"
#include "pvector.h"
#include "dcast.h"

// Because our token type contains objects of type string, which
// require correct copy construction (and not simply memcpying), we
// cannot use bison's built-in auto-stack-grow feature.  As an easy
// solution, we ensure here that we have enough yacc stack to start
// with, and that it doesn't ever try to grow.
#define YYINITDEPTH 1000
#define YYMAXDEPTH 1000

// We need a stack of EggObject pointers.  Each time we encounter a
// nested EggObject of some kind, we'll allocate a new one of these
// and push it onto the stack.  At any given time, the top of the
// stack is the EggObject we are currently scanning.

typedef pvector< PT(EggObject) > EggStack;
static EggStack egg_stack;

// There's one "top-level" egg node, which is where we should parent
// things (e.g. implicit textures) encountered in the egg file that
// don't have an explicit place in the tree.  If this is NULL, such
// things won't be parented anywhere.
static EggGroupNode *egg_top_node;

// We need a table mapping vertex pool names to vertex pools.
typedef pmap<string,  PT(EggVertexPool) > VertexPools;
static VertexPools vertex_pools;

// And another one mapping texture names to textures.
typedef pmap<string,  PT_EggTexture > Textures;
static Textures textures;

// And again for material names to materials.
typedef pmap<string,  PT_EggMaterial > Materials;
static Materials materials;

// We need to be able to save the index number requested for a vertex
// temporarily.
static int vertex_index;

// We need to hold a matrix for a little bit while parsing the
// <Transform> entries.
static LMatrix4d matrix_3d;
static LMatrix3d matrix_2d;


////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

void
egg_init_parser(istream &in, const string &filename,
                EggObject *tos, EggGroupNode *top_node) {
  egg_init_lexer(in, filename);

  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();

  egg_stack.push_back(tos);
  egg_top_node = top_node;
}

void
egg_cleanup_parser() {
  // Clean these out after we're done, so we don't keep big memory
  // structures around needlessly.
  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();
}

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		686
#define	YYFLAG		-32768
#define	YYNTBASE	85

#define YYTRANSLATE(x) ((unsigned)(x) <= 336 ? yytranslate[x] : 196)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    83,     2,    84,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     6,     9,    12,    14,    17,    19,    21,    23,
    25,    27,    29,    31,    33,    35,    37,    39,    41,    43,
    45,    50,    56,    57,    65,    67,    74,    77,    78,    85,
    87,    94,   100,   107,   108,   115,   117,   120,   121,   127,
   128,   135,   137,   140,   144,   149,   155,   161,   167,   176,
   185,   188,   196,   204,   208,   217,   226,   231,   241,   251,
   252,   259,   260,   267,   268,   275,   277,   284,   290,   298,
   306,   312,   318,   324,   330,   336,   342,   348,   351,   354,
   357,   360,   362,   364,   367,   368,   374,   376,   379,   382,
   385,   388,   391,   394,   397,   400,   407,   412,   417,   422,
   430,   437,   442,   444,   461,   466,   468,   478,   479,   485,
   487,   490,   493,   496,   499,   505,   510,   516,   521,   523,
   533,   543,   545,   552,   557,   569,   582,   583,   590,   591,
   598,   599,   606,   607,   614,   616,   622,   628,   634,   637,
   643,   649,   655,   662,   664,   670,   676,   682,   685,   691,
   697,   703,   709,   715,   721,   724,   730,   737,   739,   745,
   751,   757,   760,   766,   772,   778,   784,   790,   797,   799,
   801,   803,   807,   816,   825,   830,   840,   850,   852,   861,
   864,   866,   868,   870,   876,   878,   881,   883,   885,   886,
   893,   894,   901,   903,   906,   909,   912,   915,   918,   919,
   926,   928,   935,   941,   942,   949,   951,   958,   964,   965,
   972,   974,   981,   984,   986,   989,   991,   994,   996,   998,
  1000,  1002,  1004,  1006,  1008,  1010,  1012,  1014,  1016,  1018,
  1020,  1022,  1024,  1027,  1029,  1031,  1033,  1035
};

static const short yyrhs[] = {    79,
    86,     0,    80,   113,     0,    81,    92,     0,    82,   149,
     0,   195,     0,    86,    87,     0,    88,     0,    89,     0,
    90,     0,    93,     0,    96,     0,    97,     0,   107,     0,
   109,     0,   111,     0,   141,     0,   143,     0,   145,     0,
   147,     0,   166,     0,    13,    83,   187,    84,     0,    12,
   186,    83,   190,    84,     0,     0,    63,   185,    83,   187,
    91,    92,    84,     0,   195,     0,    92,    54,   185,    83,
   193,    84,     0,    92,   129,     0,     0,    34,   185,    83,
    94,    95,    84,     0,   195,     0,    95,    54,   185,    83,
   193,    84,     0,    24,   186,    83,   187,    84,     0,   189,
    24,   186,    83,   187,    84,     0,     0,    75,   185,    98,
    83,    99,    84,     0,   195,     0,    99,   100,     0,     0,
    73,   101,    83,   103,    84,     0,     0,    73,   194,   102,
    83,   103,    84,     0,   192,     0,   192,   192,     0,   192,
   192,   192,     0,   192,   192,   192,   192,     0,   103,    71,
    83,   104,    84,     0,   103,    39,    83,   105,    84,     0,
   103,    48,    83,   106,    84,     0,   103,    19,   189,    83,
   192,   192,   192,    84,     0,   103,    19,    83,   189,   192,
   192,   192,    84,     0,   192,   192,     0,   104,    18,   189,
    83,   192,   192,    84,     0,   104,    18,    83,   189,   192,
   192,    84,     0,   192,   192,   192,     0,   105,    16,   189,
    83,   192,   192,   192,    84,     0,   105,    16,    83,   189,
   192,   192,   192,    84,     0,   192,   192,   192,   192,     0,
   106,    17,   189,    83,   192,   192,   192,   192,    84,     0,
   106,    17,    83,   189,   192,   192,   192,   192,    84,     0,
     0,    26,   186,   108,    83,   113,    84,     0,     0,    29,
   186,   110,    83,   113,    84,     0,     0,    32,   186,   112,
    83,   113,    84,     0,   195,     0,   113,    54,   185,    83,
   193,    84,     0,   113,     7,    83,   189,    84,     0,   113,
     8,    83,   192,   192,   192,    84,     0,   113,    11,   186,
    83,   114,   115,    84,     0,   113,    20,    83,   194,    84,
     0,   113,    15,    83,   194,    84,     0,   113,    15,    83,
     4,    84,     0,   113,    58,    83,   194,    84,     0,   113,
    42,    83,   187,    84,     0,   113,    37,    83,   194,    84,
     0,   113,    62,    83,   194,    84,     0,   113,   116,     0,
   113,   137,     0,   113,   139,     0,   113,    87,     0,   189,
     0,   195,     0,   115,   189,     0,     0,    65,   117,    83,
   118,    84,     0,   195,     0,   118,   127,     0,   118,   125,
     0,   118,   119,     0,   118,   120,     0,   118,   121,     0,
   118,   122,     0,   118,   123,     0,   118,   124,     0,    66,
    83,   192,   192,   192,    84,     0,    50,    83,   192,    84,
     0,    51,    83,   192,    84,     0,    52,    83,   192,    84,
     0,    49,    83,   192,   192,   192,   192,    84,     0,    55,
    83,   192,   192,   192,    84,     0,    36,    83,   126,    84,
     0,   195,     0,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,     0,
    35,    83,   128,    84,     0,   195,     0,   192,   192,   192,
   192,   192,   192,   192,   192,   192,     0,     0,    65,   130,
    83,   131,    84,     0,   195,     0,   131,   135,     0,   131,
   132,     0,   131,   133,     0,   131,   134,     0,    66,    83,
   192,   192,    84,     0,    49,    83,   192,    84,     0,    55,
    83,   192,   192,    84,     0,    35,    83,   136,    84,     0,
   195,     0,   192,   192,   192,   192,   192,   192,   192,   192,
   192,     0,    76,    83,   180,   138,    47,    83,   184,    84,
    84,     0,   195,     0,   138,    54,   185,    83,   193,    84,
     0,    59,    83,   140,    84,     0,    21,    83,   192,   192,
    73,    83,   192,   192,   192,    84,    84,     0,    21,    83,
   192,   192,   192,    73,    83,   192,   192,   192,    84,    84,
     0,     0,    46,   186,   142,    83,   149,    84,     0,     0,
    45,   186,   144,    83,   149,    84,     0,     0,    41,   186,
   146,    83,   150,    84,     0,     0,    40,   186,   148,    83,
   151,    84,     0,   195,     0,   149,    67,    83,   152,    84,
     0,   149,    63,    83,   153,    84,     0,   149,    38,    83,
   154,    84,     0,   149,   158,     0,   149,    39,    83,   155,
    84,     0,   149,    48,    83,   156,    84,     0,   149,     6,
    83,   157,    84,     0,   149,    54,   185,    83,   193,    84,
     0,   195,     0,   150,    67,    83,   152,    84,     0,   150,
    63,    83,   153,    84,     0,   150,    38,    83,   154,    84,
     0,   150,   158,     0,   150,    39,    83,   155,    84,     0,
   150,    48,    83,   156,    84,     0,   150,     6,    83,   157,
    84,     0,   150,    43,    83,   159,    84,     0,   150,    70,
    83,   160,    84,     0,   150,    72,    83,   161,    84,     0,
   150,   147,     0,   150,    68,    83,   162,    84,     0,   150,
    54,   185,    83,   193,    84,     0,   195,     0,   151,    67,
    83,   152,    84,     0,   151,    63,    83,   153,    84,     0,
   151,    38,    83,   154,    84,     0,   151,   158,     0,   151,
    39,    83,   155,    84,     0,   151,    48,    83,   156,    84,
     0,   151,     6,    83,   157,    84,     0,   151,    43,    83,
   164,    84,     0,   151,    30,    83,   165,    84,     0,   151,
    54,   185,    83,   193,    84,     0,   182,     0,   185,     0,
   183,     0,   192,   192,   192,     0,   155,    16,   189,    83,
   192,   192,   192,    84,     0,   155,    16,    83,   189,   192,
   192,   192,    84,     0,   192,   192,   192,   192,     0,   156,
    17,   189,    83,   192,   192,   192,   192,    84,     0,   156,
    17,    83,   189,   192,   192,   192,   192,    84,     0,   194,
     0,    76,    83,   180,    47,    83,   184,    84,    84,     0,
   194,   194,     0,   181,     0,   181,     0,   195,     0,   162,
    33,    83,   163,    84,     0,   195,     0,   163,   147,     0,
   194,     0,   181,     0,     0,    60,   186,   167,    83,   170,
    84,     0,     0,     9,   186,   169,    83,   170,    84,     0,
   195,     0,   170,   166,     0,   170,   168,     0,   170,   171,
     0,   170,   174,     0,   170,   177,     0,     0,    53,   186,
   172,    83,   173,    84,     0,   195,     0,   173,    54,   185,
    83,   193,    84,     0,   173,    61,    83,   181,    84,     0,
     0,    77,   186,   175,    83,   176,    84,     0,   195,     0,
   176,    54,   185,    83,   193,    84,     0,   176,    61,    83,
   181,    84,     0,     0,    78,   186,   178,    83,   179,    84,
     0,   195,     0,   179,    54,   185,    83,   193,    84,     0,
   179,   171,     0,   195,     0,   180,   194,     0,   195,     0,
   181,   192,     0,   185,     0,   185,     0,   185,     0,   195,
     0,   189,     0,   188,     0,   195,     0,   189,     0,   195,
     0,   189,     0,     3,     0,     4,     0,   195,     0,   191,
     0,   189,     0,   191,   189,     0,     3,     0,     3,     0,
     4,     0,     3,     0,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   179,   181,   182,   183,   193,   195,   209,   211,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   233,   256,   270,   284,   298,   300,   404,   414,   427,   441,
   443,   537,   545,   564,   577,   592,   594,   604,   609,   616,
   641,   661,   666,   670,   674,   678,   679,   680,   681,   689,
   707,   712,   720,   737,   742,   750,   767,   772,   780,   797,
   803,   817,   824,   838,   845,   859,   861,   914,   926,   931,
   938,   944,   951,   964,   970,   976,   982,   988,   989,   990,
   991,  1004,  1026,  1028,  1049,  1054,  1068,  1070,  1071,  1072,
  1073,  1074,  1075,  1076,  1077,  1080,  1086,  1092,  1098,  1104,
  1110,  1116,  1120,  1122,  1134,  1137,  1139,  1157,  1162,  1176,
  1178,  1179,  1180,  1181,  1184,  1190,  1196,  1202,  1205,  1207,
  1225,  1258,  1263,  1287,  1299,  1305,  1321,  1326,  1340,  1345,
  1359,  1364,  1378,  1383,  1398,  1400,  1401,  1402,  1403,  1404,
  1405,  1406,  1407,  1455,  1457,  1458,  1459,  1460,  1461,  1462,
  1463,  1464,  1465,  1466,  1467,  1473,  1474,  1527,  1529,  1530,
  1531,  1532,  1533,  1534,  1535,  1536,  1537,  1538,  1596,  1613,
  1653,  1670,  1675,  1683,  1700,  1705,  1713,  1730,  1746,  1777,
  1795,  1815,  1835,  1841,  1851,  1858,  1876,  1892,  1913,  1920,
  1935,  1942,  1957,  1959,  1963,  1967,  1971,  1975,  1989,  1995,
  2010,  2012,  2024,  2037,  2043,  2058,  2060,  2077,  2090,  2096,
  2111,  2113,  2128,  2142,  2147,  2160,  2165,  2178,  2199,  2220,
  2242,  2248,  2259,  2271,  2277,  2287,  2292,  2305,  2310,  2322,
  2327,  2342,  2347,  2360,  2371,  2377,  2392,  2403
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NUMBER",
"STRING","BEZIERCURVE","BFACE","BILLBOARD","BILLBOARDCENTER","BUNDLE","CLOSED",
"COLLIDE","COMMENT","COORDSYSTEM","CV","DART","DNORMAL","DRGBA","DUV","DXYZ",
"DCS","DISTANCE","DTREF","DYNAMICVERTEXPOOL","EXTERNAL_FILE","FLIGHT","GROUP",
"HIP","INTANGENT","JOINT","KNOTS","INCLUDE","INSTANCE","LOOP","MATERIAL","MATRIX3",
"MATRIX4","MODEL","MREF","NORMAL","NURBSCURVE","NURBSSURFACE","OBJECTTYPE","ORDER",
"OUTTANGENT","POINTLIGHT","POLYGON","REF","RGBA","ROTATE","ROTX","ROTY","ROTZ",
"SANIM","SCALAR","SCALE","SEQUENCE","SHADING","SWITCH","SWITCHCONDITION","TABLE",
"TABLE_V","TEXLIST","TEXTURE","TLENGTHS","TRANSFORM","TRANSLATE","TREF","TRIM",
"TXT","UKNOTS","UV","VKNOTS","VERTEX","VERTEXANIM","VERTEXPOOL","VERTEXREF",
"XFMANIM","XFMSANIM","START_EGG","START_GROUP_BODY","START_TEXTURE_BODY","START_PRIMITIVE_BODY",
"'{'","'}'","grammar","egg","node","coordsystem","comment","texture","@1","texture_body",
"material","@2","material_body","external_reference","vertex_pool","@3","vertex_pool_body",
"vertex","@4","@5","vertex_body","vertex_uv_body","vertex_normal_body","vertex_color_body",
"group","@6","joint","@7","instance","@8","group_body","cs_type","collide_flags",
"transform_3d","@9","transform_3d_body","translate_3d","rotx_3d","roty_3d","rotz_3d",
"rotate_3d","scale_3d","matrix4_3d","matrix4_3d_body","matrix3_3d","matrix3_3d_body",
"transform_2d","@10","transform_2d_body","translate_2d","rotate_2d","scale_2d",
"matrix3_2d","matrix3_2d_body","group_vertex_ref","group_vertex_membership",
"switchcondition","switchcondition_body","polygon","@11","point_light","@12",
"nurbs_surface","@13","nurbs_curve","@14","primitive_body","nurbs_surface_body",
"nurbs_curve_body","primitive_tref_body","primitive_texture_body","primitive_material_body",
"primitive_normal_body","primitive_color_body","primitive_bface_body","primitive_vertex_ref",
"nurbs_surface_order_body","nurbs_surface_uknots_body","nurbs_surface_vknots_body",
"nurbs_surface_trim_body","nurbs_surface_trim_loop_body","nurbs_curve_order_body",
"nurbs_curve_knots_body","table","@15","bundle","@16","table_body","sanim","@17",
"sanim_body","xfmanim","@18","xfmanim_body","xfm_s_anim","@19","xfm_s_anim_body",
"integer_list","real_list","texture_name","material_name","vertex_pool_name",
"required_name","optional_name","required_string","optional_string","string",
"repeated_string","repeated_string_body","real","real_or_string","integer","empty", NULL
};
#endif

static const short yyr1[] = {     0,
    85,    85,    85,    85,    86,    86,    87,    87,    87,    87,
    87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
    88,    89,    91,    90,    92,    92,    92,    94,    93,    95,
    95,    96,    96,    98,    97,    99,    99,   101,   100,   102,
   100,   103,   103,   103,   103,   103,   103,   103,   103,   103,
   104,   104,   104,   105,   105,   105,   106,   106,   106,   108,
   107,   110,   109,   112,   111,   113,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   113,   113,
   113,   114,   115,   115,   117,   116,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   126,   127,   128,   128,   130,   129,   131,
   131,   131,   131,   131,   132,   133,   134,   135,   136,   136,
   137,   138,   138,   139,   140,   140,   142,   141,   144,   143,
   146,   145,   148,   147,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   150,   150,   150,   150,   150,   150,   150,
   150,   150,   150,   150,   150,   150,   150,   151,   151,   151,
   151,   151,   151,   151,   151,   151,   151,   151,   152,   153,
   154,   155,   155,   155,   156,   156,   156,   157,   158,   159,
   160,   161,   162,   162,   163,   163,   164,   165,   167,   166,
   169,   168,   170,   170,   170,   170,   170,   170,   172,   171,
   173,   173,   173,   175,   174,   176,   176,   176,   178,   177,
   179,   179,   179,   180,   180,   181,   181,   182,   183,   184,
   185,   185,   186,   187,   187,   188,   188,   189,   189,   190,
   190,   191,   191,   192,   193,   193,   194,   195
};

static const short yyr2[] = {     0,
     2,     2,     2,     2,     1,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     4,     5,     0,     7,     1,     6,     2,     0,     6,     1,
     6,     5,     6,     0,     6,     1,     2,     0,     5,     0,
     6,     1,     2,     3,     4,     5,     5,     5,     8,     8,
     2,     7,     7,     3,     8,     8,     4,     9,     9,     0,
     6,     0,     6,     0,     6,     1,     6,     5,     7,     7,
     5,     5,     5,     5,     5,     5,     5,     2,     2,     2,
     2,     1,     1,     2,     0,     5,     1,     2,     2,     2,
     2,     2,     2,     2,     2,     6,     4,     4,     4,     7,
     6,     4,     1,    16,     4,     1,     9,     0,     5,     1,
     2,     2,     2,     2,     5,     4,     5,     4,     1,     9,
     9,     1,     6,     4,    11,    12,     0,     6,     0,     6,
     0,     6,     0,     6,     1,     5,     5,     5,     2,     5,
     5,     5,     6,     1,     5,     5,     5,     2,     5,     5,
     5,     5,     5,     5,     2,     5,     6,     1,     5,     5,
     5,     2,     5,     5,     5,     5,     5,     6,     1,     1,
     1,     3,     8,     8,     4,     9,     9,     1,     8,     2,
     1,     1,     1,     5,     1,     2,     1,     1,     0,     6,
     0,     6,     1,     2,     2,     2,     2,     2,     0,     6,
     1,     6,     5,     0,     6,     1,     6,     5,     0,     6,
     1,     6,     2,     1,     2,     1,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     1,     1,     1,     1,     0
};

static const short yydefact[] = {     0,
   238,   238,   238,   238,     1,     5,     2,    66,     3,    25,
     4,   135,   228,   229,   238,     0,   238,   238,   238,   238,
   238,   238,   238,   238,   238,   238,   238,   238,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,     0,     0,     0,   238,     0,     0,     0,
     0,   238,     0,     0,     0,    85,     0,    81,    78,    79,
    80,   238,   108,    27,     0,     0,     0,     0,   238,     0,
     0,     0,   139,     0,   223,   227,   226,   238,     0,    60,
    62,    64,     0,   222,   221,   133,   131,   129,   127,   189,
     0,    34,   238,     0,     0,     0,     0,     0,     0,   238,
     0,     0,     0,     0,     0,   238,     0,     0,     0,   238,
     0,     0,     0,   238,   238,   238,   238,     0,   225,   224,
   238,     0,     0,     0,    28,     0,     0,     0,     0,     0,
   238,     0,     0,     0,   234,     0,     0,   237,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   238,   238,
   214,     0,   238,     0,   178,     0,   171,   219,     0,     0,
     0,     0,     0,     0,   170,     0,   169,   218,     0,   232,
     0,   231,   230,    21,     0,   238,   238,   238,   238,   238,
   238,   238,   238,   238,    23,   238,   238,    68,     0,   238,
    82,    73,    72,    71,    76,    75,   235,   236,     0,    74,
     0,   124,    77,     0,    87,     0,   215,   122,     0,     0,
   110,   142,   138,     0,   140,     0,     0,   141,     0,     0,
   137,   136,     0,    22,   233,    32,     0,     0,     0,     0,
    30,     0,   158,     0,   144,     0,     0,     0,   193,   238,
     0,    36,     0,     0,     0,    83,    67,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    86,    90,    91,    92,
    93,    94,    95,    89,    88,     0,   238,    26,     0,     0,
     0,     0,   109,   112,   113,   114,   111,     0,     0,   172,
     0,     0,     0,   143,   238,    61,    63,    65,   238,    29,
     0,     0,     0,     0,     0,     0,   238,     0,     0,   134,
   162,     0,     0,     0,     0,     0,   238,     0,     0,     0,
     0,     0,   132,   155,   148,   130,   128,   238,   238,   238,
   238,   190,   194,   195,   196,   197,   198,     0,    38,    35,
    37,    33,    69,    70,    84,     0,   238,   238,     0,     0,
     0,     0,     0,     0,   238,     0,   238,     0,     0,     0,
     0,     0,     0,     0,   175,     0,   220,     0,     0,   238,
   238,     0,     0,     0,     0,   238,   238,     0,   238,     0,
     0,     0,     0,   238,   238,   238,   238,   238,   191,   199,
   204,   209,    24,     0,    40,     0,     0,     0,     0,   106,
     0,     0,   103,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   119,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   188,   216,     0,     0,     0,
   187,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   183,     0,   181,     0,   182,
     0,     0,     0,     0,     0,     0,     0,     0,   105,     0,
   102,     0,     0,    97,    98,    99,     0,     0,     0,     0,
   118,     0,   116,     0,     0,     0,     0,     0,     0,   179,
     0,   165,   167,   217,   161,   163,   166,   164,     0,   160,
   159,   151,   147,   149,   152,   180,   150,     0,   146,   145,
     0,   156,   153,   154,   238,   238,   238,   238,     0,    42,
     0,     0,     0,     0,     0,     0,     0,     0,   121,   123,
     0,   117,   115,     0,     0,     0,     0,    31,   168,   157,
   238,     0,     0,   201,     0,   206,     0,   211,     0,     0,
     0,     0,    39,    43,     0,     0,     0,     0,     0,     0,
   101,    96,     0,   174,   173,     0,     0,     0,   185,   192,
   238,     0,   200,   238,     0,   205,   238,   210,   213,     0,
     0,     0,     0,     0,    44,    41,     0,     0,     0,     0,
   100,     0,   177,   176,   184,   186,     0,   238,     0,   238,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    47,     0,     0,    48,     0,     0,    46,
    51,   125,     0,     0,     0,     0,     0,   203,     0,   208,
     0,     0,     0,     0,     0,    54,     0,     0,     0,     0,
     0,   126,     0,     0,     0,   202,   207,   212,     0,     0,
     0,     0,     0,     0,    57,     0,     0,   107,     0,   120,
    50,    49,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    53,    52,     0,    56,    55,     0,     0,     0,    59,    58,
     0,     0,   104,     0,     0,     0
};

static const short yydefgoto[] = {   684,
     5,    58,    30,    31,    32,   240,     9,    33,   179,   230,
    34,    35,   132,   241,   331,   384,   446,   499,   588,   584,
   586,    36,   122,    37,   123,    38,   124,     7,   190,   245,
    59,   105,   204,   258,   259,   260,   261,   262,   263,   264,
   391,   265,   388,    64,   108,   210,   274,   275,   276,   277,
   402,    60,   206,    61,   147,    39,   129,    40,   128,    41,
   127,    42,   126,    11,   234,   232,   166,   164,   156,   159,
   161,   154,    73,   429,   437,   439,   435,   548,   420,   415,
    43,   130,   324,   441,   238,   325,   442,   523,   326,   443,
   525,   327,   444,   527,   150,   416,   167,   157,   356,   158,
    74,   118,    75,    84,   171,   172,   474,   199,   155,    85
};

static const short yypact[] = {   186,
-32768,-32768,-32768,-32768,   354,-32768,  1026,-32768,    12,-32768,
   255,-32768,-32768,-32768,   188,    -7,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    66,    32,    41,   188,    53,    74,    76,
    78,   188,    80,    91,    95,-32768,   105,-32768,-32768,-32768,
-32768,   188,-32768,-32768,   110,   114,   125,   133,   188,   143,
   146,   158,-32768,   169,-32768,-32768,-32768,   188,   172,-32768,
-32768,-32768,   174,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   179,-32768,   188,   188,   100,   189,   228,   192,   192,   188,
   194,   192,   227,   192,   196,-32768,   197,   200,   192,   188,
   100,   100,   201,   188,   188,-32768,   188,   166,-32768,-32768,
   188,   206,   207,   212,-32768,   214,   218,   219,   221,   223,
   188,   224,   225,   175,-32768,   100,   188,-32768,   191,   226,
   236,   237,   239,   235,   240,   229,   241,   242,-32768,   192,
-32768,   235,-32768,   243,-32768,   244,-32768,-32768,    16,   100,
     7,   100,   235,   245,-32768,   246,-32768,-32768,    64,-32768,
   248,   188,-32768,-32768,   249,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   188,-32768,   100,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   259,-32768,
   100,-32768,-32768,   375,-32768,    98,-32768,-32768,   260,    15,
-32768,-32768,-32768,    19,-32768,   100,    31,-32768,   100,   277,
-32768,-32768,   280,-32768,-32768,-32768,   697,   856,   922,    17,
-32768,    99,-32768,   101,-32768,   180,   215,   112,-32768,-32768,
    -1,-32768,   281,   285,     3,-32768,-32768,   100,   288,   289,
   290,   291,   292,   293,   294,   296,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   298,   188,-32768,   299,   301,
   302,   306,-32768,-32768,-32768,-32768,-32768,   188,   308,-32768,
   188,   310,   100,-32768,   188,-32768,-32768,-32768,   188,-32768,
   315,   319,   320,   329,   330,   332,   188,   333,   335,-32768,
-32768,   336,   337,   338,   339,   340,   188,   345,   348,   349,
   350,   351,-32768,-32768,-32768,-32768,-32768,   188,   188,   188,
   188,-32768,-32768,-32768,-32768,-32768,-32768,    20,   192,-32768,
-32768,-32768,-32768,-32768,-32768,     5,   100,   100,   100,   100,
   100,   100,   100,   100,   188,   352,   100,   100,   100,   100,
   100,   100,   100,   100,-32768,   353,-32768,   355,   192,-32768,
   188,   100,   192,   100,   356,   188,   188,   192,   188,   100,
   192,   100,   359,   188,   188,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   361,-32768,   363,   238,   365,   100,-32768,
   368,   100,-32768,   100,   369,   370,   373,   100,   100,   377,
   235,   379,   100,-32768,   384,   100,   100,   100,   100,   100,
   100,   388,   235,   390,   391,   100,-32768,   392,    46,   393,
-32768,    22,   235,   394,   395,   397,   398,    47,   399,   192,
    24,   235,   400,   401,    -4,-32768,   402,   100,   403,   100,
   364,   405,   406,   407,   100,   408,   100,   409,-32768,   100,
-32768,   100,   100,-32768,-32768,-32768,   100,   100,   410,   411,
-32768,   100,-32768,   412,   413,   100,   100,   100,   100,-32768,
   421,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   422,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   423,-32768,-32768,
   425,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   131,   100,
   100,   100,   100,   100,   100,   100,   426,   427,-32768,-32768,
   100,-32768,-32768,   428,   429,   100,   100,-32768,-32768,-32768,
-32768,   167,   149,-32768,   176,-32768,   127,-32768,    34,   433,
   434,   436,-32768,   100,   165,   100,   100,   100,   100,   437,
-32768,-32768,   100,-32768,-32768,   438,   439,    29,-32768,-32768,
   188,   442,-32768,   188,   443,-32768,   188,-32768,-32768,   188,
   444,   100,   100,   100,   100,-32768,   445,   100,   100,   100,
-32768,   100,-32768,-32768,-32768,-32768,   447,-32768,   448,-32768,
   450,   100,   100,    49,   100,    51,   100,    38,   100,-32768,
   454,   458,   100,   100,   100,   235,     8,   235,    13,   235,
   100,   100,    40,-32768,   100,    42,-32768,   100,    44,-32768,
-32768,-32768,   459,   100,   100,   100,   460,-32768,   461,-32768,
   462,   100,   100,   188,   466,-32768,   188,   467,   100,   188,
   468,-32768,   100,   100,   100,-32768,-32768,-32768,   469,   470,
   100,   100,   100,   100,-32768,   100,   100,-32768,   100,-32768,
-32768,-32768,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   472,   473,   100,   474,   475,   100,   100,
-32768,-32768,   100,-32768,-32768,   480,   481,   100,-32768,-32768,
   100,   100,-32768,   493,   520,-32768
};

static const short yypgoto[] = {-32768,
-32768,   314,-32768,-32768,-32768,-32768,    58,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -137,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -58,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -231,-32768,    88,-32768,-32768,  -281,  -223,  -215,  -214,
  -166,  -284,  -183,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -237,-32768,-32768,-32768,   -59,     1,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   453,  -373,-32768,-32768,   230,   173,
    35,   -91,-32768,    -5,-32768,-32768,    -2,  -127,   -71,   671
};


#define	YYLAST		1251


static const short yytable[] = {    44,
   323,    44,   314,   438,   440,    13,    14,   135,   143,    76,
   135,    76,    76,    76,    76,   135,    76,    76,    76,    76,
    76,    13,    14,   217,   209,   140,   141,   142,   491,   175,
   145,   214,   148,    13,    14,   220,    13,    14,   217,   185,
   217,    76,    13,    14,    13,    14,    13,    14,   301,   269,
   315,    79,    80,    81,    82,   609,    86,    87,    88,    89,
    90,   214,   214,   270,   603,    62,   138,   606,    22,   271,
   289,   329,   119,    62,   414,    78,    63,   386,   207,   492,
   272,    96,   330,   426,    63,   425,   334,    76,   134,    93,
   218,   618,   136,   434,   119,   243,   620,   207,   273,   215,
   290,   278,   135,   383,   291,   478,   302,   487,   160,   162,
   223,   170,   575,   281,    94,   119,   560,   227,   228,   229,
   318,   610,   624,    95,   627,   119,   630,   133,   292,   476,
   484,   191,   604,   189,   607,    97,   293,   294,   303,   304,
    22,   295,   424,   305,   266,   418,   296,   419,   306,   529,
   433,   267,   297,   427,   307,   428,    98,   216,    99,   219,
   100,   298,   102,   308,   319,   299,   225,   309,   310,   530,
   311,    26,   312,   103,    72,   318,    72,   104,   531,   319,
   557,   119,   300,   529,   313,    65,   244,   106,   320,   321,
    13,    14,   109,    83,   138,   322,   110,   422,   248,    91,
    92,   532,   551,   530,   597,   431,   599,   111,   279,   552,
   558,   282,   531,   280,   533,   112,   283,    66,    67,   319,
    65,    44,    44,    44,   101,   114,    26,    68,   115,   554,
   138,   139,   553,    69,   107,   532,   555,   197,   198,   335,
   116,   113,    70,   320,   321,   336,    71,   146,   566,   174,
   550,   117,    66,    67,   121,    72,   125,   385,   188,   556,
    65,   131,    68,   316,     1,     2,     3,     4,    69,   236,
   237,   137,   351,   460,   192,   353,   144,    70,   149,   152,
   355,    71,   153,   163,   323,   471,   165,   168,   176,   177,
    72,   421,    66,    67,   178,   479,   180,   328,   317,   430,
   181,   182,    68,   183,   488,   184,   186,   187,    69,   193,
   448,   201,    76,    76,    76,    76,   576,    70,    29,   194,
   195,    71,   196,   200,   202,   203,   212,   213,   221,   222,
    72,   224,   226,   387,   389,   392,   394,   395,   396,   397,
   398,   399,   247,   268,   403,   405,   406,   407,   408,   409,
   410,   411,   379,   380,   381,   382,    13,    14,   486,   160,
   284,   162,   285,   535,   332,    15,    16,   160,   333,   162,
   337,   338,   339,   340,   341,   342,   343,    17,   344,    18,
   345,   347,    19,   348,   349,    20,   450,    21,   350,   452,
   352,   453,   354,    22,    23,   457,   458,   359,    24,    25,
   462,   360,   361,   464,   465,   466,   467,   468,   469,   249,
   250,   362,   363,    26,   364,   366,    27,   367,   368,   369,
   370,   371,   372,   251,   252,   253,   254,   374,    28,   255,
   375,   376,   377,   378,   401,   522,   412,   413,   423,   346,
   256,   432,   500,   445,   502,   447,   495,   504,   449,   505,
   506,   451,   454,   455,   507,   508,   456,   357,   257,   511,
   459,   358,   461,   514,   515,   516,   517,   463,   617,   365,
   619,   470,   621,   472,   473,   475,   477,   480,   481,   373,
   482,   483,   485,   489,   490,   493,   494,   496,   497,   498,
   501,   503,   685,   509,   510,   512,   513,   534,   500,   536,
   537,   538,   539,   540,   518,   519,   520,   521,   543,   541,
   542,   544,   545,   546,   547,   562,   563,   357,   564,   686,
   571,   573,   574,   561,   578,   580,   583,   559,   591,   596,
   598,   565,   600,   567,   568,   569,   570,   612,   165,   168,
   572,   613,   632,   636,   637,   638,   165,   168,   642,   644,
   647,     0,   651,   652,   582,   671,   672,   674,   675,   585,
   587,   589,   590,   679,   680,   592,   593,   594,   169,   595,
     0,     0,     0,     0,   400,     0,     0,     0,     0,   601,
   602,     0,   605,     0,   608,     0,   611,     0,     0,     0,
   614,   615,   616,     0,     0,     0,     0,   625,   622,   623,
   628,     0,   626,   631,     0,   629,     0,     0,     0,     0,
     0,   633,   634,   635,     0,     0,     0,     0,   641,   639,
   640,   643,     0,     0,   646,     0,   645,     0,     0,     0,
   648,   649,   650,     0,     0,     0,     0,     0,   653,   654,
   655,   656,     0,   657,   658,     0,   659,     0,     0,     0,
   660,   661,   662,   663,   664,   665,   666,   667,   668,   669,
   670,     0,     0,   673,     0,     0,   676,   677,     0,     0,
   678,     6,     8,    10,    12,   681,     0,     0,   682,   683,
     0,     0,     0,     0,     0,    77,     0,    77,    77,    77,
    77,     0,    77,    77,    77,    77,    77,     0,     0,    13,
    14,     0,     0,    45,    46,     0,     0,    47,    15,    16,
     0,    48,     0,     0,     0,     0,    49,    77,     0,     0,
    17,     0,    18,   577,     0,    19,   579,     0,    20,   581,
    21,     0,     0,    50,     0,     0,    22,    23,    51,     0,
     0,    24,    25,     0,     0,     0,     0,     0,   120,     0,
    52,     0,     0,     0,    53,    54,    26,     0,    55,    27,
     0,    56,     0,    77,     0,     0,     0,     0,     0,     0,
   120,    28,    57,     0,     0,     0,   151,     0,     0,     0,
   286,     0,     0,     0,     0,     0,   151,   173,     0,     0,
     0,   120,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   120,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   205,
   208,     0,     0,   211,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     8,     8,     8,   231,
   233,   235,    12,    12,   239,     0,   242,   120,    13,    14,
   246,     0,    45,    46,     0,     0,    47,    15,    16,     0,
    48,     0,     0,     0,     0,    49,     0,     0,     0,    17,
     0,    18,     0,     0,    19,     0,     0,    20,     0,    21,
     0,     0,    50,     0,     0,    22,    23,    51,     0,     0,
    24,    25,     0,     0,     0,     0,     0,     0,     0,    52,
    10,     0,     0,    53,    54,    26,     0,    55,    27,     0,
    56,     0,     0,     0,    13,    14,     0,     0,    45,    46,
    28,    57,    47,    15,    16,     0,    48,     0,     0,   287,
     0,    49,     0,     0,     0,    17,     0,    18,     0,     0,
    19,     0,     0,    20,     0,    21,     0,     0,    50,     0,
     0,    22,    23,    51,     0,     0,    24,    25,     0,     0,
     0,     0,     0,     0,     0,    52,     0,     0,     0,    53,
    54,    26,     0,    55,    27,     0,    56,     0,    77,    77,
    77,    77,     0,     0,     0,     0,    28,    57,     0,     0,
     0,     0,     0,     0,     0,   288,     0,   390,   393,     0,
     0,     0,     0,     0,     0,     0,     0,   404,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    13,    14,
   417,     0,    45,    46,     0,     0,    47,    15,    16,     0,
    48,     0,     0,     0,     0,    49,   436,   417,   417,    17,
     0,    18,     0,     0,    19,     0,     0,    20,     0,    21,
     0,     0,    50,     0,     0,    22,    23,    51,     0,     0,
    24,    25,     0,     0,     0,     0,     0,     0,     0,    52,
     0,     0,     0,    53,    54,    26,     0,    55,    27,     0,
    56,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    28,    57,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   239,   524,   526,   528,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   549,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   417,     0,
   417
};

static const short yycheck[] = {     5,
   238,     7,   234,   377,   378,     3,     4,     3,   100,    15,
     3,    17,    18,    19,    20,     3,    22,    23,    24,    25,
    26,     3,     4,    17,   152,    97,    98,    99,    33,   121,
   102,    16,   104,     3,     4,   163,     3,     4,    17,   131,
    17,    47,     3,     4,     3,     4,     3,     4,   232,    35,
   234,    17,    18,    19,    20,    18,    22,    23,    24,    25,
    26,    16,    16,    49,    16,    54,     3,    17,    40,    55,
    54,    73,    78,    54,   359,    83,    65,    73,   150,    84,
    66,    47,    84,   368,    65,   367,    84,    93,    94,    24,
    84,    84,    95,   375,   100,   187,    84,   169,    84,    84,
    84,    83,     3,    84,     6,    84,     6,    84,   111,   112,
    47,   117,    84,    83,    83,   121,    83,   176,   177,   178,
     9,    84,    83,    83,    83,   131,    83,    93,    30,    84,
    84,   137,    84,   136,    84,    83,    38,    39,    38,    39,
    40,    43,   366,    43,    47,   361,    48,   362,    48,    19,
   374,    54,    54,   369,    54,   370,    83,   160,    83,   162,
    83,    63,    83,    63,    53,    67,   172,    67,    68,    39,
    70,    60,    72,    83,    76,     9,    76,    83,    48,    53,
    54,   187,    84,    19,    84,     6,   189,    83,    77,    78,
     3,     4,    83,    21,     3,    84,    83,   364,   201,    27,
    28,    71,    54,    39,   578,   372,   580,    83,   214,    61,
    84,   217,    48,   216,    84,    83,   219,    38,    39,    53,
     6,   227,   228,   229,    52,    83,    60,    48,    83,    54,
     3,     4,    84,    54,    62,    71,    61,     3,     4,   245,
    83,    69,    63,    77,    78,   248,    67,    21,    84,    84,
    84,    83,    38,    39,    83,    76,    83,   329,    84,    84,
     6,    83,    48,    84,    79,    80,    81,    82,    54,   182,
   183,    83,   278,   401,    84,   281,    83,    63,    83,    83,
   283,    67,    83,    83,   522,   413,   114,   115,    83,    83,
    76,   363,    38,    39,    83,   423,    83,   240,    84,   371,
    83,    83,    48,    83,   432,    83,    83,    83,    54,    84,
    73,    83,   318,   319,   320,   321,   548,    63,     5,    84,
    84,    67,    84,    84,    84,    84,    84,    84,    84,    84,
    76,    84,    84,   336,   337,   338,   339,   340,   341,   342,
   343,   344,    84,    84,   347,   348,   349,   350,   351,   352,
   353,   354,   318,   319,   320,   321,     3,     4,   430,   362,
    84,   364,    83,   501,    84,    12,    13,   370,    84,   372,
    83,    83,    83,    83,    83,    83,    83,    24,    83,    26,
    83,    83,    29,    83,    83,    32,   389,    34,    83,   392,
    83,   394,    83,    40,    41,   398,   399,    83,    45,    46,
   403,    83,    83,   406,   407,   408,   409,   410,   411,    35,
    36,    83,    83,    60,    83,    83,    63,    83,    83,    83,
    83,    83,    83,    49,    50,    51,    52,    83,    75,    55,
    83,    83,    83,    83,    83,   495,    84,    83,    83,   267,
    66,    83,   445,    83,   447,    83,    83,   450,    84,   452,
   453,    84,    84,    84,   457,   458,    84,   285,    84,   462,
    84,   289,    84,   466,   467,   468,   469,    84,   596,   297,
   598,    84,   600,    84,    84,    84,    84,    84,    84,   307,
    84,    84,    84,    84,    84,    84,    84,    83,    83,    83,
    83,    83,     0,    84,    84,    84,    84,   500,   501,   502,
   503,   504,   505,   506,    84,    84,    84,    83,   511,    84,
    84,    84,    84,   516,   517,    83,    83,   345,    83,     0,
    84,    84,    84,   529,    83,    83,    83,   527,    84,    83,
    83,   534,    83,   536,   537,   538,   539,    84,   366,   367,
   543,    84,    84,    84,    84,    84,   374,   375,    83,    83,
    83,    -1,    84,    84,   560,    84,    84,    84,    84,   562,
   563,   564,   565,    84,    84,   568,   569,   570,   116,   572,
    -1,    -1,    -1,    -1,   345,    -1,    -1,    -1,    -1,   582,
   583,    -1,   585,    -1,   587,    -1,   589,    -1,    -1,    -1,
   593,   594,   595,    -1,    -1,    -1,    -1,   603,   601,   602,
   606,    -1,   605,   609,    -1,   608,    -1,    -1,    -1,    -1,
    -1,   614,   615,   616,    -1,    -1,    -1,    -1,   624,   622,
   623,   627,    -1,    -1,   630,    -1,   629,    -1,    -1,    -1,
   633,   634,   635,    -1,    -1,    -1,    -1,    -1,   641,   642,
   643,   644,    -1,   646,   647,    -1,   649,    -1,    -1,    -1,
   653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
   663,    -1,    -1,   666,    -1,    -1,   669,   670,    -1,    -1,
   673,     1,     2,     3,     4,   678,    -1,    -1,   681,   682,
    -1,    -1,    -1,    -1,    -1,    15,    -1,    17,    18,    19,
    20,    -1,    22,    23,    24,    25,    26,    -1,    -1,     3,
     4,    -1,    -1,     7,     8,    -1,    -1,    11,    12,    13,
    -1,    15,    -1,    -1,    -1,    -1,    20,    47,    -1,    -1,
    24,    -1,    26,   551,    -1,    29,   554,    -1,    32,   557,
    34,    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,
    -1,    45,    46,    -1,    -1,    -1,    -1,    -1,    78,    -1,
    54,    -1,    -1,    -1,    58,    59,    60,    -1,    62,    63,
    -1,    65,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,
   100,    75,    76,    -1,    -1,    -1,   106,    -1,    -1,    -1,
    84,    -1,    -1,    -1,    -1,    -1,   116,   117,    -1,    -1,
    -1,   121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,
   150,    -1,    -1,   153,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   176,   177,   178,   179,
   180,   181,   182,   183,   184,    -1,   186,   187,     3,     4,
   190,    -1,     7,     8,    -1,    -1,    11,    12,    13,    -1,
    15,    -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    24,
    -1,    26,    -1,    -1,    29,    -1,    -1,    32,    -1,    34,
    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,    -1,
    45,    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
   240,    -1,    -1,    58,    59,    60,    -1,    62,    63,    -1,
    65,    -1,    -1,    -1,     3,     4,    -1,    -1,     7,     8,
    75,    76,    11,    12,    13,    -1,    15,    -1,    -1,    84,
    -1,    20,    -1,    -1,    -1,    24,    -1,    26,    -1,    -1,
    29,    -1,    -1,    32,    -1,    34,    -1,    -1,    37,    -1,
    -1,    40,    41,    42,    -1,    -1,    45,    46,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    58,
    59,    60,    -1,    62,    63,    -1,    65,    -1,   318,   319,
   320,   321,    -1,    -1,    -1,    -1,    75,    76,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    84,    -1,   337,   338,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   347,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,
   360,    -1,     7,     8,    -1,    -1,    11,    12,    13,    -1,
    15,    -1,    -1,    -1,    -1,    20,   376,   377,   378,    24,
    -1,    26,    -1,    -1,    29,    -1,    -1,    32,    -1,    34,
    -1,    -1,    37,    -1,    -1,    40,    41,    42,    -1,    -1,
    45,    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
    -1,    -1,    -1,    58,    59,    60,    -1,    62,    63,    -1,
    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   495,   496,   497,   498,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,
   580
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 6:
#line 196 "parser.yxx"
{
  DCAST(EggData, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 21:
#line 235 "parser.yxx"
{
  string strval = yyvsp[-1]._string;
  EggCoordinateSystem *cs = new EggCoordinateSystem;

  CoordinateSystem f = parse_coordinate_system_string(strval);
  if (f == CS_invalid) {
    eggyywarning("Unknown coordinate system " + strval);
  } else {
    cs->set_value(f);
  }
  yyval._egg = cs;
;
    break;}
case 22:
#line 258 "parser.yxx"
{
  yyval._egg = new EggComment(yyvsp[-3]._string, yyvsp[-1]._string);
;
    break;}
case 23:
#line 272 "parser.yxx"
{
  string tref_name = yyvsp[-2]._string;
  Filename filename = yyvsp[0]._string;
  EggTexture *texture = new EggTexture(tref_name, filename);

  if (textures.find(tref_name) != textures.end()) {
    eggyywarning("Duplicate texture name " + tref_name);
  }
  textures[tref_name] = texture;

  egg_stack.push_back(texture);
;
    break;}
case 24:
#line 285 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 26:
#line 301 "parser.yxx"
{
  EggTexture *texture = DCAST(EggTexture, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "format") == 0) {
    EggTexture::Format f = EggTexture::string_format(strval);
    if (f == EggTexture::F_unspecified) {
      eggyywarning("Unknown texture format " + strval);
    } else {
      texture->set_format(f);
    }

  } else if (cmp_nocase_uh(name, "wrap") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_mode(w);
    }

  } else if (cmp_nocase_uh(name, "wrapu") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_u(w);
    }

  } else if (cmp_nocase_uh(name, "wrapv") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_v(w);
    }

  } else if (cmp_nocase_uh(name, "minfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_minfilter(f);
    }

  } else if (cmp_nocase_uh(name, "magfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_magfilter(f);
    }
  } else if (cmp_nocase_uh(name, "anisotropic_degree") == 0) {
    texture->set_anisotropic_degree(value);

  } else if (cmp_nocase_uh(name, "envtype") == 0) {
    EggTexture::EnvType e = EggTexture::string_env_type(strval);
    if (e == EggTexture::ET_unspecified) {
      eggyywarning("Unknown texture env type " + strval);
    } else {
      texture->set_env_type(e);
    }

  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      texture->set_alpha_mode(a);
    }

  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      texture->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      texture->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    texture->set_draw_order((int)value);

  } else if (cmp_nocase_uh(name, "bin") == 0) {
    texture->set_bin(strval);

  } else if (cmp_nocase_uh(name, "alpha_file") == 0) {
    texture->set_alpha_file(strval);

  } else {
    eggyywarning("Unsupported texture scalar: " + name);
  }
;
    break;}
case 28:
#line 416 "parser.yxx"
{
  string mref_name = yyvsp[-1]._string;
  EggMaterial *material = new EggMaterial(mref_name);

  if (materials.find(mref_name) != materials.end()) {
    eggyywarning("Duplicate material name " + mref_name);
  }
  materials[mref_name] = material;

  egg_stack.push_back(material);
;
    break;}
case 29:
#line 428 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 31:
#line 444 "parser.yxx"
{
  EggMaterial *material = DCAST(EggMaterial, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "diffr") == 0) {
    Colorf diff = material->get_diff();
    diff[0] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffg") == 0) {
    Colorf diff = material->get_diff();
    diff[1] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffb") == 0) {
    Colorf diff = material->get_diff();
    diff[2] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffa") == 0) {
    Colorf diff = material->get_diff();
    diff[3] = value;
    material->set_diff(diff);

  } else if (cmp_nocase_uh(name, "ambr") == 0) {
    Colorf amb = material->get_amb();
    amb[0] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambg") == 0) {
    Colorf amb = material->get_amb();
    amb[1] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambb") == 0) {
    Colorf amb = material->get_amb();
    amb[2] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "amba") == 0) {
    Colorf amb = material->get_amb();
    amb[3] = value;
    material->set_amb(amb);

  } else if (cmp_nocase_uh(name, "emitr") == 0) {
    Colorf emit = material->get_emit();
    emit[0] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitg") == 0) {
    Colorf emit = material->get_emit();
    emit[1] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitb") == 0) {
    Colorf emit = material->get_emit();
    emit[2] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emita") == 0) {
    Colorf emit = material->get_emit();
    emit[3] = value;
    material->set_emit(emit);

  } else if (cmp_nocase_uh(name, "specr") == 0) {
    Colorf spec = material->get_spec();
    spec[0] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specg") == 0) {
    Colorf spec = material->get_spec();
    spec[1] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specb") == 0) {
    Colorf spec = material->get_spec();
    spec[2] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "speca") == 0) {
    Colorf spec = material->get_spec();
    spec[3] = value;
    material->set_spec(spec);

  } else if (cmp_nocase_uh(name, "shininess") == 0) {
    material->set_shininess(value);

  } else if (cmp_nocase_uh(name, "local") == 0) {
    material->set_local(value != 0.0);

  } else {
    eggyywarning("Unsupported material scalar: " + name);
  }
;
    break;}
case 32:
#line 539 "parser.yxx"
{
  string node_name = yyvsp[-3]._string;
  Filename filename = yyvsp[-1]._string;
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  yyval._egg = ref;
;
    break;}
case 33:
#line 546 "parser.yxx"
{
  if (cmp_nocase_uh(yyvsp[-5]._string, "group") != 0) {
    eggyyerror("keyword 'group' expected");
  }
  string node_name = yyvsp[-3]._string;
  Filename filename = yyvsp[-1]._string;
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  yyval._egg = ref;
;
    break;}
case 34:
#line 566 "parser.yxx"
{
  string name = yyvsp[0]._string;
  EggVertexPool *pool = new EggVertexPool(name);

  if (vertex_pools.find(name) != vertex_pools.end()) {
    eggyywarning("Duplicate vertex pool name " + name);
  }
  vertex_pools[name] = pool;

  egg_stack.push_back(pool);
;
    break;}
case 35:
#line 578 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 38:
#line 606 "parser.yxx"
{
  egg_stack.push_back(new EggVertex);
;
    break;}
case 39:
#line 610 "parser.yxx"
{
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  DCAST(EggVertexPool, egg_stack.back())->add_vertex(vtx);
;
    break;}
case 40:
#line 617 "parser.yxx"
{
  vertex_index = (int)yyvsp[0]._number;
  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());

  if (vertex_index < 0) {
    ostringstream errmsg;
    errmsg << "Ignoring invalid vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;

  } else if (pool->get_vertex(vertex_index) != NULL) {
    ostringstream errmsg;
    errmsg << "Ignoring duplicate vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;
  }

  // Even if we didn't like the vertex index number, we still need to
  // go ahead and parse the vertex.  We just won't save it.

  egg_stack.push_back(new EggVertex);
;
    break;}
case 41:
#line 642 "parser.yxx"
{
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());
  if (vertex_index != -1) {
    pool->add_vertex(vtx, vertex_index);
  }
;
    break;}
case 42:
#line 663 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(yyvsp[0]._number);
;
    break;}
case 43:
#line 667 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint2d(yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 44:
#line 671 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint3d(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 45:
#line 675 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint4d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 49:
#line 682 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 50:
#line 690 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 51:
#line 709 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_uv(TexCoordd(yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 52:
#line 713 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-4]._string, LVector2d(yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 53:
#line 721 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord(yyvsp[-3]._string, LVector2d(yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-3]._string);
  }
;
    break;}
case 54:
#line 739 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_normal(Normald(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 55:
#line 743 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 56:
#line 751 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 57:
#line 769 "parser.yxx"
{
  DCAST(EggVertex, egg_stack.back())->set_color(Colorf(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 58:
#line 773 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-6]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-6]._string);
  }
;
    break;}
case 59:
#line 781 "parser.yxx"
{
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-5]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 60:
#line 799 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  egg_stack.push_back(group);
;
    break;}
case 61:
#line 804 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 62:
#line 819 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  group->set_group_type(EggGroup::GT_joint);
  egg_stack.push_back(group);
;
    break;}
case 63:
#line 825 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 64:
#line 840 "parser.yxx"
{
  EggGroup *group = new EggGroup(yyvsp[0]._string);
  group->set_group_type(EggGroup::GT_instance);
  egg_stack.push_back(group);
;
    break;}
case 65:
#line 846 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 67:
#line 862 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    group->set_switch_fps(value);
  } else if (cmp_nocase_uh(name, "no_fog") == 0) {
    group->set_nofog_flag(value != 0);
  } else if (cmp_nocase_uh(name, "decal") == 0) {
    group->set_decal_flag(value != 0);
  } else if (cmp_nocase_uh(name, "direct") == 0) {
    group->set_direct_flag(value != 0);
  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      group->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      group->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      group->set_depth_test_mode(m);
    }
  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    group->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    group->set_bin(strval);
  } else if (cmp_nocase_uh(name, "collide_mask") == 0) {
    group->set_collide_mask(value);
  } else if (cmp_nocase_uh(name, "from_collide_mask") == 0) {
    group->set_from_collide_mask(value);
  } else if (cmp_nocase_uh(name, "into_collide_mask") == 0) {
    group->set_into_collide_mask(value);
  } else {
    eggyywarning("Unknown group scalar " + name);
  }
;
    break;}
case 68:
#line 915 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::BillboardType f = EggGroup::string_billboard_type(strval);
  if (f == EggGroup::BT_none) {
    eggyywarning("Unknown billboard type " + strval);
  } else {
    group->set_billboard_type(f);
  }
;
    break;}
case 69:
#line 927 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_billboard_center(LPoint3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 70:
#line 932 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = yyvsp[-4]._string;

  group->set_collision_name(name);
;
    break;}
case 71:
#line 939 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_dcs_flag(value!=0);
;
    break;}
case 72:
#line 945 "parser.yxx"
{
  // The traditional flavor of DART, with { 0 } or { 1 }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_dart_type(value!=0 ? EggGroup::DT_default : EggGroup::DT_none);
;
    break;}
case 73:
#line 952 "parser.yxx"
{
  // The special flavor of DART, with { sync } or { nosync }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[-1]._string;

  EggGroup::DartType f = EggGroup::string_dart_type(strval);
  if (f == EggGroup::DT_none) {
    eggyywarning("Unknown dart type " + strval);
  } else {
    group->set_dart_type(f);
  }
;
    break;}
case 74:
#line 965 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_switch_flag(value!=0);
;
    break;}
case 75:
#line 971 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string type = yyvsp[-1]._string;
  group->set_objecttype(type);
;
    break;}
case 76:
#line 977 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_model_flag(value!=0);
;
    break;}
case 77:
#line 983 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)yyvsp[-1]._number;
  group->set_texlist_flag(value!=0);
;
    break;}
case 81:
#line 992 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 82:
#line 1006 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[0]._string;

  EggGroup::CollisionSolidType f = EggGroup::string_cs_type(strval);
  if (f == EggGroup::CST_none) {
    eggyywarning("Unknown collision solid type " + strval);
  } else {
    group->set_cs_type(f);
  }
;
    break;}
case 84:
#line 1029 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = yyvsp[0]._string;

  EggGroup::CollideFlags f = EggGroup::string_collide_flags(strval);
  if (f == EggGroup::CF_none) {
    eggyywarning("Unknown collision flag " + strval);
  } else {
    group->set_collide_flags(group->get_collide_flags() | f);
  }
;
    break;}
case 85:
#line 1051 "parser.yxx"
{
  matrix_3d = LMatrix4d::ident_mat();
;
    break;}
case 86:
#line 1055 "parser.yxx"
{
  DCAST(EggGroup, egg_stack.back())->set_transform(matrix_3d);
;
    break;}
case 96:
#line 1081 "parser.yxx"
{
  matrix_3d *= LMatrix4d::translate_mat(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number);
;
    break;}
case 97:
#line 1087 "parser.yxx"
{
  matrix_3d *= LMatrix4d::rotate_mat_normaxis(yyvsp[-1]._number, LVector3d(1.0, 0.0, 0.0));
;
    break;}
case 98:
#line 1093 "parser.yxx"
{
  matrix_3d *= LMatrix4d::rotate_mat_normaxis(yyvsp[-1]._number, LVector3d(0.0, 1.0, 0.0));
;
    break;}
case 99:
#line 1099 "parser.yxx"
{
  matrix_3d *= LMatrix4d::rotate_mat_normaxis(yyvsp[-1]._number, LVector3d(0.0, 0.0, 1.0));
;
    break;}
case 100:
#line 1105 "parser.yxx"
{
  matrix_3d *= LMatrix4d::rotate_mat(yyvsp[-4]._number, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number));
;
    break;}
case 101:
#line 1111 "parser.yxx"
{
  matrix_3d *= LMatrix4d::scale_mat(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number);
;
    break;}
case 104:
#line 1126 "parser.yxx"
{
  matrix_3d *= LMatrix4d(yyvsp[-15]._number, yyvsp[-14]._number, yyvsp[-13]._number, yyvsp[-12]._number,
                         yyvsp[-11]._number, yyvsp[-10]._number, yyvsp[-9]._number, yyvsp[-8]._number,
                         yyvsp[-7]._number, yyvsp[-6]._number, yyvsp[-5]._number, yyvsp[-4]._number,
                         yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number);
;
    break;}
case 107:
#line 1142 "parser.yxx"
{
  matrix_3d *= LMatrix4d(LMatrix3d(yyvsp[-8]._number, yyvsp[-7]._number, yyvsp[-6]._number,
                                   yyvsp[-5]._number, yyvsp[-4]._number, yyvsp[-3]._number,
                                   yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 108:
#line 1159 "parser.yxx"
{
  matrix_2d = LMatrix3d::ident_mat();
;
    break;}
case 109:
#line 1163 "parser.yxx"
{
  DCAST(EggTexture, egg_stack.back())->set_transform(matrix_2d);
;
    break;}
case 115:
#line 1185 "parser.yxx"
{
  matrix_2d *= LMatrix3d::translate_mat(yyvsp[-2]._number, yyvsp[-1]._number);
;
    break;}
case 116:
#line 1191 "parser.yxx"
{
  matrix_2d *= LMatrix3d::rotate_mat(yyvsp[-1]._number);
;
    break;}
case 117:
#line 1197 "parser.yxx"
{
  matrix_2d *= LMatrix3d::scale_mat(yyvsp[-2]._number, yyvsp[-1]._number);
;
    break;}
case 120:
#line 1210 "parser.yxx"
{
  matrix_2d *= LMatrix3d(yyvsp[-8]._number, yyvsp[-7]._number, yyvsp[-6]._number,
                         yyvsp[-5]._number, yyvsp[-4]._number, yyvsp[-3]._number,
                         yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number);
;
    break;}
case 121:
#line 1227 "parser.yxx"
{
  if (yyvsp[-2]._egg != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, yyvsp[-2]._egg);
    EggGroup *group = DCAST(EggGroup, egg_stack.back());
    PTA_double nums = yyvsp[-6]._number_list;
    double membership = yyvsp[-5]._number;

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        group->ref_vertex(vertex, membership);
      }
    }
  }
;
    break;}
case 122:
#line 1260 "parser.yxx"
{
  yyval._number = 1.0;
;
    break;}
case 123:
#line 1264 "parser.yxx"
{
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  double result = yyvsp[-5]._number;
  
  if (cmp_nocase_uh(name, "membership") == 0) {
    result = value;
  } else {
    eggyywarning("Unknown group vertex scalar " + name);
  }

  yyval._number = result;
;
    break;}
case 125:
#line 1301 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance(yyvsp[-8]._number, yyvsp[-7]._number, LPoint3d(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number)));
;
    break;}
case 126:
#line 1306 "parser.yxx"
{
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance(yyvsp[-9]._number, yyvsp[-8]._number, LPoint3d(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number), yyvsp[-7]._number));
;
    break;}
case 127:
#line 1323 "parser.yxx"
{
  egg_stack.push_back(new EggPolygon(yyvsp[0]._string));
;
    break;}
case 128:
#line 1327 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 129:
#line 1342 "parser.yxx"
{
  egg_stack.push_back(new EggPoint(yyvsp[0]._string));
;
    break;}
case 130:
#line 1346 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 131:
#line 1361 "parser.yxx"
{
  egg_stack.push_back(new EggNurbsSurface(yyvsp[0]._string));
;
    break;}
case 132:
#line 1365 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 133:
#line 1380 "parser.yxx"
{
  egg_stack.push_back(new EggNurbsCurve(yyvsp[0]._string));
;
    break;}
case 134:
#line 1384 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 143:
#line 1408 "parser.yxx"
{
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }
  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else {
    eggyywarning("Unknown scalar " + name);
  }
;
    break;}
case 155:
#line 1468 "parser.yxx"
{
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, yyvsp[0]._egg);
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_curves_on_surface.push_back(curve);
;
    break;}
case 157:
#line 1475 "parser.yxx"
{
  EggNurbsSurface *primitive = DCAST(EggNurbsSurface, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }
  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "u_subdiv") == 0) {
    primitive->set_u_subdiv(value);
  } else if (cmp_nocase_uh(name, "v_subdiv") == 0) {
    primitive->set_v_subdiv(value);
  } else {
    eggyywarning("Unknown scalar " + name);
  }
;
    break;}
case 168:
#line 1539 "parser.yxx"
{
  EggNurbsCurve *primitive = DCAST(EggNurbsCurve, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }
  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "subdiv") == 0) {
    primitive->set_subdiv(value);
  } else if (cmp_nocase_uh(name, "type") == 0) {
    EggCurve::CurveType a = EggCurve::string_curve_type(strval);
    if (a == EggCurve::CT_none) {
      eggyywarning("Unknown curve type " + strval);
    } else {
      primitive->set_curve_type(a);
    }
    
  } else {
    eggyywarning("Unknown scalar " + name);
  }
;
    break;}
case 169:
#line 1598 "parser.yxx"
{
  if (yyvsp[0]._egg != (EggTexture *)NULL) {
    EggTexture *texture = DCAST(EggTexture, yyvsp[0]._egg);
    DCAST(EggPrimitive, egg_stack.back())->set_texture(texture);
  }
;
    break;}
case 170:
#line 1615 "parser.yxx"
{
  EggTexture *texture = NULL;

  // Defining a texture on-the-fly.
  Filename filename = yyvsp[0]._string;
  string tref_name = filename.get_basename();

  Textures::iterator vpi = textures.find(tref_name);
  if (vpi == textures.end()) {
    // The texture was not yet defined.  Define it.
    texture = new EggTexture(tref_name, filename);
    textures[tref_name] = texture;

    if (egg_top_node != NULL) {
      egg_top_node->add_child(texture);
    }

  } else {
    // The texture already existed.  Use it.
    texture = (*vpi).second;
    if (filename != texture->get_filename()) {
      eggyywarning(string("Using previous path: ") + 
                   texture->get_filename().get_fullpath());
    }
  }

  nassertr(texture != NULL, 0);
  DCAST(EggPrimitive, egg_stack.back())->set_texture(texture);
;
    break;}
case 171:
#line 1655 "parser.yxx"
{
  if (yyvsp[0]._egg != (EggMaterial *)NULL) {
    EggMaterial *material = DCAST(EggMaterial, yyvsp[0]._egg);
    DCAST(EggPrimitive, egg_stack.back())->set_material(material);
  }
;
    break;}
case 172:
#line 1672 "parser.yxx"
{
  DCAST(EggPrimitive, egg_stack.back())->set_normal(Normald(yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 173:
#line 1676 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-5]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 174:
#line 1684 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal(yyvsp[-4]._string, LVector3d(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-4]._string);
  }
;
    break;}
case 175:
#line 1702 "parser.yxx"
{
  DCAST(EggPrimitive, egg_stack.back())->set_color(Colorf(yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number, yyvsp[0]._number));
;
    break;}
case 176:
#line 1706 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-6]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-6]._string);
  }
;
    break;}
case 177:
#line 1714 "parser.yxx"
{
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor(yyvsp[-5]._string, LVector4f(yyvsp[-4]._number, yyvsp[-3]._number, yyvsp[-2]._number, yyvsp[-1]._number))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + yyvsp[-5]._string);
  }
;
    break;}
case 178:
#line 1732 "parser.yxx"
{
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  int value = (int)yyvsp[0]._number;
  primitive->set_bface_flag(value!=0);
;
    break;}
case 179:
#line 1748 "parser.yxx"
{
  if (yyvsp[-2]._egg != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, yyvsp[-2]._egg);
    EggPrimitive *prim = DCAST(EggPrimitive, egg_stack.back());
    PTA_double nums = yyvsp[-5]._number_list;

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        prim->add_vertex(vertex);
      }
    }
  }
;
    break;}
case 180:
#line 1779 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  int u_order = (int)yyvsp[-1]._number;
  int v_order = (int)yyvsp[0]._number;
  nurbs->set_u_order(u_order);
  nurbs->set_v_order(v_order);
;
    break;}
case 181:
#line 1797 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_u_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_u_knot(i, nums[i]);
  }
;
    break;}
case 182:
#line 1817 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_v_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_v_knot(i, nums[i]);
  }
;
    break;}
case 183:
#line 1837 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_trims.push_back(EggNurbsSurface::Trim());
;
    break;}
case 185:
#line 1853 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nurbs->_trims.back().push_back(EggNurbsSurface::Loop());
;
    break;}
case 186:
#line 1859 "parser.yxx"
{
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nassertr(!nurbs->_trims.back().empty(), 0);
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, yyvsp[0]._egg); 
  nurbs->_trims.back().back().push_back(curve);
;
    break;}
case 187:
#line 1878 "parser.yxx"
{
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  int order = (int)yyvsp[0]._number;
  nurbs->set_order(order);
;
    break;}
case 188:
#line 1894 "parser.yxx"
{
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  PTA_double nums = yyvsp[0]._number_list;

  nurbs->set_num_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_knot(i, nums[i]);
  }
;
    break;}
case 189:
#line 1915 "parser.yxx"
{
  EggTable *table = new EggTable(yyvsp[0]._string);
  table->set_table_type(EggTable::TT_table);
  egg_stack.push_back(table);
;
    break;}
case 190:
#line 1921 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 191:
#line 1937 "parser.yxx"
{
  EggTable *table = new EggTable(yyvsp[0]._string);
  table->set_table_type(EggTable::TT_bundle);
  egg_stack.push_back(table);
;
    break;}
case 192:
#line 1943 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 194:
#line 1960 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 195:
#line 1964 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 196:
#line 1968 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 197:
#line 1972 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 198:
#line 1976 "parser.yxx"
{
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 199:
#line 1991 "parser.yxx"
{
  EggSAnimData *anim_data = new EggSAnimData(yyvsp[0]._string);
  egg_stack.push_back(anim_data);
;
    break;}
case 200:
#line 1996 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 202:
#line 2013 "parser.yxx"
{
  EggSAnimData *anim_data = DCAST(EggSAnimData, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else {
    eggyywarning("Unsupported S$Anim scalar: " + name);
  }
;
    break;}
case 203:
#line 2025 "parser.yxx"
{
  DCAST(EggSAnimData, egg_stack.back())->set_data(yyvsp[-1]._number_list);
;
    break;}
case 204:
#line 2039 "parser.yxx"
{
  EggXfmAnimData *anim_data = new EggXfmAnimData(yyvsp[0]._string);
  egg_stack.push_back(anim_data);
;
    break;}
case 205:
#line 2044 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 207:
#line 2061 "parser.yxx"
{
  EggXfmAnimData *anim_data = DCAST(EggXfmAnimData, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_data->set_order(strval);
  } else if (cmp_nocase_uh(name, "contents") == 0) {
    anim_data->set_contents(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim scalar: " + name);
  }
;
    break;}
case 208:
#line 2078 "parser.yxx"
{
  DCAST(EggXfmAnimData, egg_stack.back())->set_data(yyvsp[-1]._number_list);
;
    break;}
case 209:
#line 2092 "parser.yxx"
{
  EggXfmSAnim *anim_group = new EggXfmSAnim(yyvsp[0]._string);
  egg_stack.push_back(anim_group);
;
    break;}
case 210:
#line 2097 "parser.yxx"
{
  yyval._egg = egg_stack.back();
  egg_stack.pop_back();
;
    break;}
case 212:
#line 2114 "parser.yxx"
{
  EggXfmSAnim *anim_group = DCAST(EggXfmSAnim, egg_stack.back());
  string name = yyvsp[-3]._string;
  double value = yyvsp[-1]._number;
  string strval = yyvsp[-1]._string;

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_group->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_group->set_order(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim_S$ scalar: " + name);
  }
;
    break;}
case 213:
#line 2129 "parser.yxx"
{
  DCAST(EggXfmSAnim, egg_stack.back())->add_child(DCAST(EggNode, yyvsp[0]._egg));
;
    break;}
case 214:
#line 2144 "parser.yxx"
{
  yyval._number_list = PTA_double::empty_array(0);
;
    break;}
case 215:
#line 2148 "parser.yxx"
{
  yyval._number_list.push_back((double)yyvsp[0]._number);
;
    break;}
case 216:
#line 2162 "parser.yxx"
{
  yyval._number_list = PTA_double::empty_array(0);
;
    break;}
case 217:
#line 2166 "parser.yxx"
{
  yyval._number_list.push_back(yyvsp[0]._number);
;
    break;}
case 218:
#line 2180 "parser.yxx"
{
  string name = yyvsp[0]._string;
  Textures::iterator vpi = textures.find(name);
  if (vpi == textures.end()) {
    eggyyerror("Unknown texture " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
;
    break;}
case 219:
#line 2201 "parser.yxx"
{
  string name = yyvsp[0]._string;
  Materials::iterator vpi = materials.find(name);
  if (vpi == materials.end()) {
    eggyyerror("Unknown material " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
;
    break;}
case 220:
#line 2222 "parser.yxx"
{
  string name = yyvsp[0]._string;
  VertexPools::iterator vpi = vertex_pools.find(name);
  if (vpi == vertex_pools.end()) {
    eggyyerror("Unknown vertex pool " + name);
    yyval._egg = PT(EggObject)();
  } else {
    yyval._egg = (*vpi).second;
  }
;
    break;}
case 221:
#line 2244 "parser.yxx"
{
  eggyyerror("Name required.");
  yyval._string = "";
;
    break;}
case 224:
#line 2273 "parser.yxx"
{
  eggyyerror("String required.");
  yyval._string = "";
;
    break;}
case 226:
#line 2289 "parser.yxx"
{
  yyval._string = "";
;
    break;}
case 228:
#line 2307 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
;
    break;}
case 230:
#line 2324 "parser.yxx"
{
  yyval._string = "";
;
    break;}
case 231:
#line 2328 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
;
    break;}
case 232:
#line 2344 "parser.yxx"
{
  yyval._string = yyvsp[0]._string;
;
    break;}
case 233:
#line 2348 "parser.yxx"
{
  yyval._string = yyvsp[-1]._string + "\n" + yyvsp[0]._string;
;
    break;}
case 235:
#line 2373 "parser.yxx"
{
  yyval._number = yyvsp[0]._number;
  yyval._string = yyvsp[0]._string;
;
    break;}
case 236:
#line 2378 "parser.yxx"
{
  yyval._number = 0.0;
  yyval._string = yyvsp[0]._string;
;
    break;}
case 237:
#line 2394 "parser.yxx"
{
  int i = (int)yyvsp[0]._number;
  if ((double)i != yyvsp[0]._number) {
    eggyywarning("Integer expected.");
    yyval._number = (double)i;
  }
;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 2405 "parser.yxx"

#define yy_create_buffer eggyy_create_buffer
#define yy_delete_buffer eggyy_delete_buffer
#define yy_scan_buffer eggyy_scan_buffer
#define yy_scan_string eggyy_scan_string
#define yy_scan_bytes eggyy_scan_bytes
#define yy_flex_debug eggyy_flex_debug
#define yy_init_buffer eggyy_init_buffer
#define yy_flush_buffer eggyy_flush_buffer
#define yy_load_buffer_state eggyy_load_buffer_state
#define yy_switch_to_buffer eggyy_switch_to_buffer
#define yyin eggyyin
#define yyleng eggyyleng
#define yylex eggyylex
#define yyout eggyyout
#define yyrestart eggyyrestart
#define yytext eggyytext
#define yywrap eggyywrap

#line 20 "lex.yy.c"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 99
#define YY_END_OF_BUFFER 100
static yyconst short int yy_accept[577] =
    {   0,
        0,    0,  100,   98,    2,    1,   97,   98,   98,   98,
       98,   89,   89,   89,   98,   98,   98,    5,   98,    1,
       98,   89,   89,   98,   89,    4,    3,   89,   91,   98,
       90,   89,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   89,   98,    3,    3,   91,   98,
       89,   90,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   65,   98,   98,   98,   93,
       98,   98,   94,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   19,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   80,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   25,   98,   98,   98,   98,   98,
       23,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   51,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   66,   98,   98,   98,   98,   98,
       98,   98,   98,   77,   98,   98,   98,   98,   98,   98,
       92,   98,   95,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   20,   98,   98,   98,   98,
       98,   24,   98,   29,   98,   98,   98,   98,   98,   36,
       37,   98,   98,   98,   42,   98,   98,   98,   98,   98,

       98,   98,   52,   98,   54,   55,   56,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   73,
       98,   76,   98,   98,   98,   98,   98,   98,   92,   96,
       98,   98,    8,   98,   98,   98,   13,   98,   98,   98,
       98,   98,   98,   98,   98,   22,   27,   98,   30,   98,
       98,   32,   33,   98,   98,   41,   98,   98,   98,   98,
       47,   98,   98,   98,   98,   98,   98,   59,   98,   98,
       98,   64,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   12,
       14,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   43,   98,   98,   98,   98,   98,
       98,   53,   57,   58,   98,   98,   62,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   83,
       98,   98,   98,   98,   98,   98,   98,   98,   15,   16,
       98,   98,   98,   98,   21,   98,   34,   98,   98,   39,
       40,   98,   98,   98,   98,   98,   50,   98,   61,   98,
       67,   68,   69,   98,   98,   98,   98,   78,   79,   81,
       82,   98,   98,   98,   98,   98,   98,   98,   11,   98,
       98,   98,   26,   98,   35,   38,   98,   98,   98,   98,
       98,   60,   98,   70,   98,   98,   98,   98,   98,   98,

       98,   87,   98,   98,   98,    9,   98,   17,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   71,   72,   98,
       98,   98,   98,   86,   98,   98,   98,   98,   98,   98,
       98,   44,   98,   46,   48,   49,   98,   98,   98,   84,
       85,   98,    6,    7,   98,   98,   31,   98,   98,   98,
       74,   98,   88,   98,   98,   98,   45,   98,   98,   98,
       98,   98,   98,   75,   98,   98,   98,   98,   10,   98,
       98,   63,   18,   98,   28,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    1,    1,    1,    1,
        1,    7,    8,    1,    9,   10,   11,   12,   13,   14,
       15,   16,   14,   14,   14,   14,   14,    1,    1,   17,
        1,   18,    1,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
        1,    1,    1,    1,   19,    1,   20,   21,   22,   23,

       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,    1,   46,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[47] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2
    } ;

static yyconst short int yy_base[582] =
    {   0,
        0,   45,  698,    0,  699,    0,  699,    8,   82,   22,
       18,  101,    9,   20,  125,  664,  676,  699,    0,    0,
       52,   29,   59,  662,   69,    0,   40,  114,   14,  161,
      166,  187,  661,   79,  108,  192,  665,  655,  658,  656,
      656,   11,   86,   36,   50,  654,   75,  191,  197,   99,
      186,  662,  661,  652,  236,  659,   75,    0,   19,  230,
      241,    0,  655,  654,  636,  660,  100,  646,  658,  643,
      162,  658,  638,  636,  648,  634,  637,  644,  632,  627,
      623,  633,  634,  630,   67,  635,  628,  628,  626,  620,
      635,  633,  619,  618,  625,  630,  613,   12,  626,  629,

      610,  628,  627,  610,  625,  616,  237,  600,  618,  199,
      602,  610,  609,  620,  607,    0,  606,  598,  602,    0,
      621,  604,    0,  598,  598,  601,  606,  596,  592,  602,
      587,  585,  591,  102,  584,    0,  581,  601,  598,  578,
      579,  594,  590,  595,  567,  591,  586,  569,  577,  568,
      573,  566,  580,  568,   51,  578,  576,  568,  578,  574,
      573,  557,  562,  550,  575,  572,  163,  558,  559,  549,
      565,  548,  555,  567,  558,   93,  550,  549,  556,   80,
      562,  546,  545,    0,  544,  543,  536,  568,  530,  539,
      546,  535,  545,  544,  546,  529,  534,  557,  539,  534,

      537,  526,  536,  540,    0,  517,  536,  523,  534,  528,
        0,  534,  519,  532,  514,  508,  527,  507,  507,  526,
      525,  505,  513,  509,  521,  518,  499,  514,  498,  514,
      494,  506,    0,  513,  491,  511,  510,  509,  498,  147,
      501,  496,  501,  498,    0,  497,  492,  479,  492,  479,
      498,  482,  496,    0,  479,  478,  477,  476,  485,  488,
      259,  482,    0,  469,  468,  486,  469,  470,  477,  482,
      476,  475,  464,  463,  467,    0,  463,  460,  472,  473,
      472,    0,  461,    0,  470,  464,  453,  467,  466,    0,
        0,  455,  439,  463,    0,  449,  114,  440,  460,  444,

      445,  441,    0,  450,    0,    0,    0,  441,  435,  453,
      437,  436,  441,  449,  433,  427,  427,  424,  199,    0,
      436,    0,  422,  421,  420,  419,  414,  423,    0,    0,
      431,  432,    0,  433,  432,  433,    0,  432,  425,  409,
      423,  413,  406,  422,  412,    0,    0,  420,    0,  417,
      418,    0,    0,  419,  169,    0,  420,  397,  396,  396,
        0,  408,  405,  399,  413,  412,  411,    0,  406,  401,
      204,    0,  387,  386,  400,  396,  388,  401,  389,  381,
      380,  379,  378,  241,  387,  383,  373,  375,  380,    0,
        0,  392,  391,  375,  387,  371,  381,  386,  362,  384,

      377,  369,  381,  380,    0,  360,  359,  351,  370,  367,
      374,    0,    0,    0,  367,  372,    0,  355,  370,  369,
      368,  347,  347,  344,  358,  363,  362,  361,  360,    0,
      344,  342,  351,  342,  339,  335,  348,  352,    0,    0,
      330,  329,  333,  348,    0,  341,    0,  346,  345,    0,
        0,  321,  336,  325,  326,  331,    0,  339,    0,  323,
        0,    0,    0,  337,  322,  329,  239,    0,    0,    0,
        0,  324,  317,  325,  219,  329,  307,  244,    0,  329,
      322,  307,    0,  307,    0,    0,  319,  322,  317,  301,
      300,    0,  315,    0,  319,  318,  315,  295,  301,  301,

      313,    0,  292,  306,  304,    0,  303,    0,  288,  301,
      285,  305,  300,  303,  302,  301,  290,    0,    0,  284,
      279,  297,  296,    0,  307,  294,  293,  277,  265,  290,
      283,    0,  282,    0,    0,    0,  266,  286,  275,    0,
        0,  284,    0,    0,  262,  262,    0,  256,  280,  269,
        0,  261,    0,  271,  255,  234,    0,  234,  249,  228,
      223,  205,  176,    0,  180,  140,  127,  125,    0,  123,
       43,    0,    0,   33,    0,  699,  284,    0,  287,  289,
      291
    } ;

static yyconst short int yy_def[582] =
    {   0,
      577,  577,  576,  578,  576,  579,  576,  578,  578,  578,
      578,  578,   12,   12,  578,  578,  578,  576,  578,  579,
      578,   12,   12,  578,  578,  578,  580,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  580,  581,  578,  578,
      578,   31,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,

      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,

      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,

      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  261,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,

      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,

      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,    0,  576,  576,  576,  576,
      576
    } ;

static yyconst short int yy_nxt[746] =
    {   0,
       19,    5,    6,    7,  576,  576,  576,    8,    9,   10,
       11,   12,   13,   14,   14,   14,   15,   21,   32,   22,
       22,   22,   22,   22,   26,   59,   59,   16,   27,   19,
       59,   59,   17,   25,   25,   25,   25,   25,   88,  163,
       19,   58,  164,   58,   89,   18,    5,    6,    7,   19,
      575,   19,    8,    9,   10,   11,   12,   13,   14,   14,
       14,   15,   19,   25,   25,   25,   25,   25,   55,   93,
       95,   19,   16,  574,  222,   94,   58,   17,   58,   19,
       25,   25,   25,   25,   25,   58,   96,  223,  149,   97,
       18,   21,   30,   22,   23,   22,   22,   22,   99,  252,

      100,   19,   65,   66,  150,   90,   67,  112,  101,   24,
       28,  253,   22,   22,   22,   22,   22,  113,   68,   91,
       58,   29,   92,  247,   30,   25,   25,   25,   25,   25,
      128,  248,  129,  201,   69,  358,  202,   30,   70,  114,
      573,   71,  572,   31,   33,   34,   35,   36,   72,   37,
       38,  359,   39,   40,   41,   42,   43,   44,   45,   46,
      571,   47,   48,   49,   50,   51,  309,   52,   60,   60,
      310,  570,   61,   61,   61,   61,   61,   62,   62,   62,
       62,   62,  235,  403,  404,   62,   62,   62,   62,   62,
       62,   63,  133,  134,  115,  135,  102,  569,   25,   25,

       25,   25,   25,  116,  117,  236,  237,  238,  568,  118,
       30,   73,  103,   74,  104,   75,  107,  105,  178,   76,
      108,  417,  179,  377,   77,  418,  180,  109,   78,  378,
       79,   80,  106,  110,   81,   82,  502,  503,  567,  111,
      122,   61,   61,   61,   61,   61,  566,   25,   25,   25,
       25,   25,   61,   61,   61,   61,   61,  173,  430,   30,
      431,  506,  174,  497,  565,  507,  564,  563,  562,  175,
      329,  329,  329,  329,  329,  432,  498,  433,  329,  329,
      329,  329,  329,  329,    4,    4,    4,   20,   20,   57,
       57,   58,   58,  561,  560,  559,  558,  557,  556,  555,

      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,
      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  511,  510,  509,  508,  505,  504,  501,
      500,  499,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  487,  486,  485,  484,  483,  482,  481,  480,  479,
      478,  477,  476,  475,  474,  473,  472,  471,  470,  469,
      468,  467,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  453,  452,  451,  450,  449,

      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  416,  415,  414,  413,
      412,  411,  410,  409,  408,  407,  406,  405,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  376,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  366,  365,  364,  363,  362,  361,  360,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  338,  337,

      336,  335,  334,  333,  332,  331,  330,  328,  327,  326,
      325,  324,  323,  322,  321,  320,  319,  318,  317,  316,
      315,  314,  313,  312,  311,  308,  307,  306,  305,  304,
      303,  302,  301,  300,  299,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,
      263,  262,  261,  260,  259,  258,  257,  256,  255,  254,
      251,  250,  249,  246,  245,  244,  243,  242,  241,  240,
      239,  234,  233,  232,  231,  230,  229,  228,  227,  226,

      225,  224,  221,  220,  219,  218,  217,  216,  215,  214,
      213,  212,  211,  210,  209,  208,  207,  206,  205,  204,
      203,  200,  199,  198,  197,  196,  195,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  184,  183,  182,
      181,  177,  176,  172,  171,  170,  169,  168,  167,  166,
      165,  162,  161,  160,  159,  158,  157,  156,  155,  154,
      153,  152,  151,  148,  147,  146,  145,  144,  143,  142,
      141,  140,  139,  138,  137,  136,  132,  131,  130,  127,
      126,  125,  124,  123,  121,  120,  119,   98,   87,   86,
       85,   84,   83,   64,   56,   54,   53,  576,    3,  576,

      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576
    } ;

static yyconst short int yy_chk[746] =
    {   0,
      578,    1,    1,    1,    0,    0,    0,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    8,   13,    8,
        8,    8,    8,    8,   11,   29,   29,    1,   11,   13,
       59,   59,    1,   10,   10,   10,   10,   10,   42,   98,
       14,   27,   98,   27,   42,    1,    2,    2,    2,   22,
      574,   13,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   14,   21,   21,   21,   21,   21,   23,   44,
       45,   22,    2,  571,  155,   44,   57,    2,   57,   23,
       25,   25,   25,   25,   25,   27,   45,  155,   85,   45,
        2,    9,   25,    9,    9,    9,    9,    9,   47,  180,

       47,   23,   34,   34,   85,   43,   34,   50,   47,    9,
       12,  180,   12,   12,   12,   12,   12,   50,   34,   43,
       57,   12,   43,  176,   12,   28,   28,   28,   28,   28,
       67,  176,   67,  134,   35,  297,  134,   28,   35,   50,
      570,   35,  568,   12,   15,   15,   15,   15,   35,   15,
       15,  297,   15,   15,   15,   15,   15,   15,   15,   15,
      567,   15,   15,   15,   15,   15,  240,   15,   30,   30,
      240,  566,   30,   30,   30,   30,   30,   31,   31,   31,
       31,   31,  167,  355,  355,   31,   31,   31,   31,   31,
       31,   32,   71,   71,   51,   71,   48,  565,   32,   32,

       32,   32,   32,   51,   51,  167,  167,  167,  563,   51,
       32,   36,   48,   36,   48,   36,   49,   48,  110,   36,
       49,  371,  110,  319,   36,  371,  110,   49,   36,  319,
       36,   36,   48,   49,   36,   36,  475,  475,  562,   49,
       55,   60,   60,   60,   60,   60,  561,   55,   55,   55,
       55,   55,   61,   61,   61,   61,   61,  107,  384,   55,
      384,  478,  107,  467,  560,  478,  559,  558,  556,  107,
      261,  261,  261,  261,  261,  384,  467,  384,  261,  261,
      261,  261,  261,  261,  577,  577,  577,  579,  579,  580,
      580,  581,  581,  555,  554,  552,  550,  549,  548,  546,

      545,  542,  539,  538,  537,  533,  531,  530,  529,  528,
      527,  526,  525,  523,  522,  521,  520,  517,  516,  515,
      514,  513,  512,  511,  510,  509,  507,  505,  504,  503,
      501,  500,  499,  498,  497,  496,  495,  493,  491,  490,
      489,  488,  487,  484,  482,  481,  480,  477,  476,  474,
      473,  472,  466,  465,  464,  460,  458,  456,  455,  454,
      453,  452,  449,  448,  446,  444,  443,  442,  441,  438,
      437,  436,  435,  434,  433,  432,  431,  429,  428,  427,
      426,  425,  424,  423,  422,  421,  420,  419,  418,  416,
      415,  411,  410,  409,  408,  407,  406,  404,  403,  402,

      401,  400,  399,  398,  397,  396,  395,  394,  393,  392,
      389,  388,  387,  386,  385,  383,  382,  381,  380,  379,
      378,  377,  376,  375,  374,  373,  370,  369,  367,  366,
      365,  364,  363,  362,  360,  359,  358,  357,  354,  351,
      350,  348,  345,  344,  343,  342,  341,  340,  339,  338,
      336,  335,  334,  332,  331,  328,  327,  326,  325,  324,
      323,  321,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  304,  302,  301,  300,  299,  298,  296,
      294,  293,  292,  289,  288,  287,  286,  285,  283,  281,
      280,  279,  278,  277,  275,  274,  273,  272,  271,  270,

      269,  268,  267,  266,  265,  264,  262,  260,  259,  258,
      257,  256,  255,  253,  252,  251,  250,  249,  248,  247,
      246,  244,  243,  242,  241,  239,  238,  237,  236,  235,
      234,  232,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  219,  218,  217,  216,  215,  214,
      213,  212,  210,  209,  208,  207,  206,  204,  203,  202,
      201,  200,  199,  198,  197,  196,  195,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  183,  182,  181,
      179,  178,  177,  175,  174,  173,  172,  171,  170,  169,
      168,  166,  165,  164,  163,  162,  161,  160,  159,  158,

      157,  156,  154,  153,  152,  151,  150,  149,  148,  147,
      146,  145,  144,  143,  142,  141,  140,  139,  138,  137,
      135,  133,  132,  131,  130,  129,  128,  127,  126,  125,
      124,  122,  121,  119,  118,  117,  115,  114,  113,  112,
      111,  109,  108,  106,  105,  104,  103,  102,  101,  100,
       99,   97,   96,   95,   94,   93,   92,   91,   90,   89,
       88,   87,   86,   84,   83,   82,   81,   80,   79,   78,
       77,   76,   75,   74,   73,   72,   70,   69,   68,   66,
       65,   64,   63,   56,   54,   53,   52,   46,   41,   40,
       39,   38,   37,   33,   24,   17,   16,    3,  576,  576,

      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.lxx"
#define INITIAL 0
/*
// Filename: lexer.l
// Created by:  drose (16Jan99)
// 
////////////////////////////////////////////////////////////////////
*/
#line 9 "lexer.lxx"
#include "pandabase.h"
#include "lexerDefs.h"
#include "parserDefs.h"
#include "config_egg.h"
#include "parser.h"
#include "indent.h"
#include "pnotify.h"
#include "lightMutex.h"
#include "thread.h"

#include <math.h>

extern "C" int eggyywrap(void);  // declared below.

static int yyinput(void);        // declared by flex.


////////////////////////////////////////////////////////////////////
// Static variables
////////////////////////////////////////////////////////////////////

// This mutex protects all of these global variables. 
LightMutex egg_lock; 

// We'll increment line_number and col_number as we parse the file, so
// that we can report the position of an error.
static int line_number = 0;
static int col_number = 0;

// current_line holds as much of the current line as will fit.  Its
// only purpose is for printing it out to report an error to the user.
static const int max_error_width = 1024;
static char current_line[max_error_width + 1];

static int error_count = 0;
static int warning_count = 0;

// This is the pointer to the current input stream.
static istream *inp = NULL;

// This is the name of the egg file we're parsing.  We keep it so we
// can print it out for error messages.
static string egg_filename;

// This is the initial token state returned by the lexer.  It allows
// the yacc grammar to start from initial points.
static int initial_token;

////////////////////////////////////////////////////////////////////
// Defining the interface to the lexer.
////////////////////////////////////////////////////////////////////

void
egg_init_lexer(istream &in, const string &filename) {
  inp = &in;
  egg_filename = filename;
  line_number = 0;
  col_number = 0;
  error_count = 0;
  warning_count = 0;
  initial_token = START_EGG;
}

void
egg_start_group_body() {
  /* Set the initial state to begin within a group_body context,
     instead of at the beginning of the egg file. */
  initial_token = START_GROUP_BODY;
}

void
egg_start_texture_body() {
  initial_token = START_TEXTURE_BODY;
}

void
egg_start_primitive_body() {
  initial_token = START_PRIMITIVE_BODY;
}

int
egg_error_count() {
  return error_count;
}

int
egg_warning_count() {
  return warning_count;
}


////////////////////////////////////////////////////////////////////
// Internal support functions.
////////////////////////////////////////////////////////////////////

int
eggyywrap(void) {
  return 1;
}

void
eggyyerror(const string &msg) {
  if (egg_cat.is_error()) {
    ostream &out = egg_cat.error(false);

    out << "\nError";
    if (!egg_filename.empty()) {
      out << " in " << egg_filename;
    }
    out 
      << " at line " << line_number << ", column " << col_number << ":\n"
      << setiosflags(Notify::get_literal_flag())
      << current_line << "\n";
    indent(out, col_number-1) 
      << "^\n" << msg << "\n\n" 
      << resetiosflags(Notify::get_literal_flag()) << flush;
  }
  error_count++;
}

void
eggyyerror(ostringstream &strm) {
  string s = strm.str();
  eggyyerror(s);
}

void
eggyywarning(const string &msg) {
  if (egg_cat.is_warning()) {
    ostream &out = egg_cat.warning(false);

    out << "\nWarning";
    if (!egg_filename.empty()) {
      out << " in " << egg_filename;
    }
    out 
      << " at line " << line_number << ", column " << col_number << ":\n"
      << setiosflags(Notify::get_literal_flag())
      << current_line << "\n";
    indent(out, col_number-1) 
      << "^\n" << msg << "\n\n" 
      << resetiosflags(Notify::get_literal_flag()) << flush;
  }
  warning_count++;
}

void
eggyywarning(ostringstream &strm) {
  string s = strm.str();
  eggyywarning(s);
}

// Now define a function to take input from an istream instead of a
// stdio FILE pointer.  This is flex-specific.
static void
input_chars(char *buffer, int &result, int max_size) {
  nassertv(inp != NULL);
  if (*inp) {
    inp->read(buffer, max_size);
    result = inp->gcount();

    if (line_number == 0) {
      // This is a special case.  If we are reading the very first bit
      // from the stream, copy it into the current_line array.  This
      // is because the \n.* rule below, which fills current_line
      // normally, doesn't catch the first line.
      int length = min(max_error_width, result);
      strncpy(current_line, buffer, length);
      current_line[length] = '\0';
      line_number++;
      col_number = 0;

      // Truncate it at the newline.
      char *end = strchr(current_line, '\n');
      if (end != NULL) {
        *end = '\0';
      }
    }

  } else {
    // End of file or I/O error.
    result = 0;
  }
  Thread::consider_yield();
}
#undef YY_INPUT
#define YY_INPUT(buffer, result, max_size) input_chars(buffer, result, max_size)

// read_char reads and returns a single character, incrementing the
// supplied line and column numbers as appropriate.  A convenience
// function for the scanning functions below.
static int
read_char(int &line, int &col) {
  int c = yyinput();
  if (c == '\n') {
    line++;
    col = 0;
  } else {
    col++;
  }
  return c;
}

// scan_quoted_string reads a string delimited by quotation marks and
// returns it.
static string
scan_quoted_string() {
  string result;

  // We don't touch the current line number and column number during
  // scanning, so that if we detect an error while scanning the string
  // (e.g. an unterminated string), we'll report the error as
  // occurring at the start of the string, not at the end--somewhat
  // more convenient for the user.

  // Instead of adjusting the global line_number and col_number
  // variables, we'll operate on our own local variables for the
  // interim.
  int line = line_number;
  int col = col_number;

  int c;
  c = read_char(line, col);
  while (c != '"' && c != EOF) {
    result += c;
    c = read_char(line, col);
  }

  if (c == EOF) {
    eggyyerror("This quotation mark is unterminated.");
  }

  line_number = line;
  col_number = col;

  return result;
}

// eat_c_comment scans past all characters up until the first */
// encountered.
static void
eat_c_comment() {
  // As above, we'll operate on our own local copies of line_number
  // and col_number within this function.

  int line = line_number;
  int col = col_number;

  int c, last_c;
  
  last_c = '\0';
  c = read_char(line, col);
  while (c != EOF && !(last_c == '*' && c == '/')) {
    if (last_c == '/' && c == '*') {
      ostringstream errmsg;
      errmsg << "This comment contains a nested /* symbol at line "
             << line << ", column " << col-1 << "--possibly unclosed?"
             << ends;
      eggyywarning(errmsg);
    }
    last_c = c;
    c = read_char(line, col);
  }

  if (c == EOF) {
    eggyyerror("This comment marker is unclosed.");
  }

  line_number = line;
  col_number = col;
}


// accept() is called below as each piece is pulled off and
// accepted by the lexer; it increments the current column number.
INLINE void accept() {
  col_number += yyleng;
}

#line 1022 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 294 "lexer.lxx"



  if (initial_token != 0) {
    int t = initial_token;
    initial_token = 0;
    return t;
  }


#line 1184 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 577 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 699 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 304 "lexer.lxx"
{
  // New line.  Save a copy of the line so we can print it out for the
  // benefit of the user in case we get an error.

  strncpy(current_line, yytext+1, max_error_width);
  current_line[max_error_width] = '\0';
  line_number++;
  col_number=0;

  // Return the whole line to the lexer, except the newline character,
  // which we eat.
  yyless(1);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 318 "lexer.lxx"
{ 
  // Eat whitespace.
  accept();
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 323 "lexer.lxx"
{ 
  // Eat C++-style comments.
  accept();
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 328 "lexer.lxx"
{
  // Eat C-style comments.
  accept();
  eat_c_comment(); 
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 334 "lexer.lxx"
{
  // Send curly braces as themselves.
  accept(); 
  return eggyytext[0];
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 342 "lexer.lxx"
{
  accept();
  return ANIMPRELOAD;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 346 "lexer.lxx"
{
  accept();
  return BEZIERCURVE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 350 "lexer.lxx"
{
  accept();
  return BFACE;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 354 "lexer.lxx"
{
  accept();
  return BILLBOARD;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 358 "lexer.lxx"
{
  accept();
  return BILLBOARDCENTER;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 362 "lexer.lxx"
{
  accept();
  return BINORMAL;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 366 "lexer.lxx"
{
  accept();
  return BUNDLE;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 370 "lexer.lxx"
{
  accept();
  return SCALAR;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 374 "lexer.lxx"
{
  accept();
  return CLOSED;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 378 "lexer.lxx"
{
  accept();
  return COLLIDE;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 382 "lexer.lxx"
{
  accept();
  return COMMENT;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 386 "lexer.lxx"
{
  accept();
  return COMPONENT;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 390 "lexer.lxx"
{
  accept();
  return COORDSYSTEM;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 394 "lexer.lxx"
{
  accept();
  return CV;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 398 "lexer.lxx"
{
  accept();
  return DART;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 402 "lexer.lxx"
{
  accept();
  return DNORMAL;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 406 "lexer.lxx"
{
  accept();
  return DRGBA;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 410 "lexer.lxx"
{
  accept();
  return DUV;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 414 "lexer.lxx"
{
  accept();
  return DXYZ;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 418 "lexer.lxx"
{
  accept();
  return DCS;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 422 "lexer.lxx"
{
  accept();
  return DISTANCE;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 426 "lexer.lxx"
{
  accept();
  return DTREF;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 430 "lexer.lxx"
{
  accept();
  return DYNAMICVERTEXPOOL;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 434 "lexer.lxx"
{
  accept();
  return EXTERNAL_FILE;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 438 "lexer.lxx"
{
  accept();
  return GROUP;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 442 "lexer.lxx"
{
  accept();
  return DEFAULTPOSE;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 446 "lexer.lxx"
{
  accept();
  return JOINT;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 450 "lexer.lxx"
{
  accept();
  return KNOTS;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 454 "lexer.lxx"
{
  accept();
  return INCLUDE;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 458 "lexer.lxx"
{
  accept();
  return INSTANCE;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 462 "lexer.lxx"
{
  accept();
  return LINE;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 466 "lexer.lxx"
{
  accept();
  return LOOP;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 470 "lexer.lxx"
{
  accept();
  return MATERIAL;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 474 "lexer.lxx"
{
  accept();
  return MATRIX3;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 478 "lexer.lxx"
{
  accept();
  return MATRIX4;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 482 "lexer.lxx"
{
  accept();
  return MODEL;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 486 "lexer.lxx"
{
  accept();
  return MREF;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 490 "lexer.lxx"
{
  accept();
  return NORMAL;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 494 "lexer.lxx"
{
  accept();
  return NURBSCURVE;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 498 "lexer.lxx"
{
  accept();
  return NURBSSURFACE;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 502 "lexer.lxx"
{
  accept();
  return OBJECTTYPE;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 506 "lexer.lxx"
{
  accept();
  return ORDER;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 510 "lexer.lxx"
{
  accept();
  return OUTTANGENT;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 514 "lexer.lxx"
{
  accept();
  return POINTLIGHT;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 518 "lexer.lxx"
{
  accept();
  return POLYGON;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 522 "lexer.lxx"
{
  accept();
  return REF;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 526 "lexer.lxx"
{
  accept();
  return RGBA;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 530 "lexer.lxx"
{
  accept();
  return ROTATE;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 534 "lexer.lxx"
{
  accept();
  return ROTX;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 538 "lexer.lxx"
{
  accept();
  return ROTY;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 542 "lexer.lxx"
{
  accept();
  return ROTZ;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 546 "lexer.lxx"
{
  accept();
  return SANIM;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 550 "lexer.lxx"
{
  accept();
  return SCALAR;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 554 "lexer.lxx"
{
  accept();
  return SCALE;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 558 "lexer.lxx"
{
  accept();
  return SEQUENCE;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 562 "lexer.lxx"
{
  accept();
  return SHADING;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 566 "lexer.lxx"
{
  accept();
  return SWITCH;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 570 "lexer.lxx"
{
  accept();
  return SWITCHCONDITION;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 574 "lexer.lxx"
{
  accept();
  return TABLE;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 578 "lexer.lxx"
{
  accept();
  return TABLE_V;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 582 "lexer.lxx"
{
  accept();
  return TAG;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 586 "lexer.lxx"
{
  accept();
  return TANGENT;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 590 "lexer.lxx"
{
  accept();
  return TEXLIST;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 594 "lexer.lxx"
{
  accept();
  return TEXTURE;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 598 "lexer.lxx"
{
  accept();
  return TLENGTHS;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 602 "lexer.lxx"
{
  accept();
  return TRANSFORM;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 606 "lexer.lxx"
{
  accept();
  return TRANSLATE;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 610 "lexer.lxx"
{
  accept();
  return TREF;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 614 "lexer.lxx"
{
  accept();
  return TRIANGLEFAN;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 618 "lexer.lxx"
{
  accept();
  return TRIANGLESTRIP;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 622 "lexer.lxx"
{
  accept();
  return TRIM;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 626 "lexer.lxx"
{
  accept();
  return TXT;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 630 "lexer.lxx"
{
  accept();
  return UKNOTS;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 634 "lexer.lxx"
{
  accept();
  return UKNOTS;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 638 "lexer.lxx"
{
  accept();
  return UV;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 642 "lexer.lxx"
{
  accept();
  return VKNOTS;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 646 "lexer.lxx"
{
  accept();
  return VKNOTS;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 650 "lexer.lxx"
{
  accept();
  return VERTEX;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 654 "lexer.lxx"
{
  accept();
  return VERTEXANIM;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 658 "lexer.lxx"
{
  accept();
  return VERTEXPOOL;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 662 "lexer.lxx"
{
  accept();
  return VERTEXREF;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 666 "lexer.lxx"
{
  accept();
  return XFMANIM;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 670 "lexer.lxx"
{
  accept();
  return XFMSANIM;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 677 "lexer.lxx"
{ 
  // An integer or floating-point number.
  accept(); 
  eggyylval._number = atof(eggyytext); 
  eggyylval._string = yytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 685 "lexer.lxx"
{
  // A hexadecimal integer number.
  accept(); 
  eggyylval._ulong = strtoul(yytext+2, NULL, 16);
  eggyylval._string = yytext;
  return EGG_ULONG; 
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 693 "lexer.lxx"
{
  // A binary integer number.
  accept(); 
  eggyylval._ulong = strtoul(yytext+2, NULL, 2);
  eggyylval._string = yytext;
  return EGG_ULONG; 
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 701 "lexer.lxx"
{
  // not-a-number.  These sometimes show up in egg files accidentally.
  accept(); 
  memset(&eggyylval._number, 0, sizeof(eggyylval._number));
  *(unsigned long *)&eggyylval._number = strtoul(yytext+3, NULL, 0);
  eggyylval._string = yytext;
  return EGG_NUMBER;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 710 "lexer.lxx"
{ 
  // infinity.  As above.
  accept(); 
  eggyylval._number = HUGE_VAL;
  eggyylval._string = yytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 718 "lexer.lxx"
{
  // minus infinity.  As above.
  accept(); 
  eggyylval._number = -HUGE_VAL;
  eggyylval._string = yytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 726 "lexer.lxx"
{ 
  // infinity, on Win32.  As above.
  accept(); 
  eggyylval._number = HUGE_VAL;
  eggyylval._string = yytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 734 "lexer.lxx"
{
  // minus infinity, on Win32.  As above.
  accept(); 
  eggyylval._number = -HUGE_VAL;
  eggyylval._string = yytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 743 "lexer.lxx"
{
  // Quoted string.
  accept();
  eggyylval._string = scan_quoted_string();
  return EGG_STRING;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 750 "lexer.lxx"
{ 
  // Unquoted string.
  accept();
  eggyylval._string = yytext;
  return EGG_STRING;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 756 "lexer.lxx"
ECHO;
	YY_BREAK
#line 2096 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 577 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 577 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 576);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 756 "lexer.lxx"

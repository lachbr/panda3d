#line 2 "lex.yy.c"

#line 4 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer eggyy_create_buffer
#define yy_delete_buffer eggyy_delete_buffer
#define yy_flex_debug eggyy_flex_debug
#define yy_init_buffer eggyy_init_buffer
#define yy_flush_buffer eggyy_flush_buffer
#define yy_load_buffer_state eggyy_load_buffer_state
#define yy_switch_to_buffer eggyy_switch_to_buffer
#define yyin eggyyin
#define yyleng eggyyleng
#define yylex eggyylex
#define yylineno eggyylineno
#define yyout eggyyout
#define yyrestart eggyyrestart
#define yytext eggyytext
#define yywrap eggyywrap
#define yyalloc eggyyalloc
#define yyrealloc eggyyrealloc
#define yyfree eggyyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE eggyyrestart(eggyyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t eggyyleng;

extern FILE *eggyyin, *eggyyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up eggyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up eggyytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via eggyyrestart()), so that the user can continue scanning by
	 * just pointing eggyyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when eggyytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t eggyyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow eggyywrap()'s to do buffer switches
 * instead of setting up a fresh eggyyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void eggyyrestart (FILE *input_file  );
void eggyy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE eggyy_create_buffer (FILE *file,int size  );
void eggyy_delete_buffer (YY_BUFFER_STATE b  );
void eggyy_flush_buffer (YY_BUFFER_STATE b  );
void eggyypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void eggyypop_buffer_state (void );

static void eggyyensure_buffer_stack (void );
static void eggyy_load_buffer_state (void );
static void eggyy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER eggyy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE eggyy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE eggyy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE eggyy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *eggyyalloc (yy_size_t  );
void *eggyyrealloc (void *,yy_size_t  );
void eggyyfree (void *  );

#define yy_new_buffer eggyy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        eggyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            eggyy_create_buffer(eggyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        eggyyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            eggyy_create_buffer(eggyyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

typedef unsigned char YY_CHAR;

FILE *eggyyin = (FILE *) 0, *eggyyout = (FILE *) 0;

typedef int yy_state_type;

extern int eggyylineno;

int eggyylineno = 1;

extern char *eggyytext;
#define yytext_ptr eggyytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up eggyytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	eggyyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 100
#define YY_END_OF_BUFFER 101
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[580] =
    {   0,
        0,    0,  101,   99,    2,    1,   98,   99,   99,   99,
       99,   90,   90,   90,   99,   99,   99,    5,   99,    1,
       99,   90,   90,   99,   90,    4,    3,   90,   92,   99,
       91,   90,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   90,   99,    3,    3,   92,   99,
       90,   91,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   66,   99,   99,   99,
       94,   99,   99,   95,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   20,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   81,   99,   99,   99,   99,   99,
       99,   99,   99,   99,    7,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   26,   99,   99,
       99,   99,   99,   24,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   52,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   67,   99,   99,
       99,   99,   99,   99,   99,   99,   78,   99,   99,   99,
       99,   99,   99,   93,   99,   96,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   21,   99,
       99,   99,   99,   99,   25,   99,   30,   99,   99,   99,
       99,   99,   37,   38,   99,   99,   99,   43,   99,   99,

       99,   99,   99,   99,   99,   53,   99,   55,   56,   57,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   74,   99,   77,   99,   99,   99,   99,   99,
       99,   93,   97,   99,   99,    9,   99,   99,   99,   14,
       99,   99,   99,   99,   99,   99,   99,   99,   23,   28,
       99,   31,   99,   99,   33,   34,   99,   99,   42,   99,
       99,   99,   99,   48,   99,   99,   99,   99,   99,   99,
       60,   99,   99,   99,   65,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   13,   15,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   44,   99,   99,
       99,   99,   99,   99,   54,   58,   59,   99,   99,   63,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   84,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   16,   17,   99,   99,   99,   99,   22,   99,   35,
       99,   99,   40,   41,   99,   99,   99,   99,   99,   51,
       99,   62,   99,   68,   69,   70,   99,   99,   99,   99,
       79,   80,   82,   99,   99,   99,   83,   99,   99,   99,
       99,   12,   99,   99,   99,   27,   99,   36,   39,   99,
       99,   99,   99,   99,   61,   99,   71,   99,   99,   99,

       99,   99,   99,   99,   88,   99,   99,   99,   10,   99,
       18,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       72,   73,   99,   99,   99,   99,   87,   99,   99,   99,
       99,   99,   99,   99,   45,   99,   47,   49,   50,   99,
       99,   99,   85,   86,   99,    6,    8,   99,   99,   32,
       99,   99,   99,   75,   99,   89,   99,   99,   99,   46,
       99,   99,   99,   99,   99,   99,   76,   99,   99,   99,
       99,   11,   99,   99,   64,   19,   99,   29,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    1,    1,    1,    1,
        1,    7,    8,    1,    9,   10,   11,   12,   13,   14,
       15,   16,   14,   14,   14,   14,   14,    1,    1,   17,
        1,   18,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        1,    1,    1,    1,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,    1,   72,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2
    } ;

static yyconst flex_int16_t yy_base[585] =
    {   0,
        0,   71, 1215,    0, 1216,    0, 1216,    8,   23,   28,
       18,  134,   55,   79,  203,    2,    0, 1216,    0,    0,
       94,  101,  122,   17,  146,    0,   24,  151,   18,  174,
      263,  276,  136,  277,  289,  338,   36,   63,   68,   68,
       72,  146,  261,  284,  300,   79,  312,  352,  376,  293,
      401,  129,  146,  139,  442,  154,   49,    0,   35,  339,
      401,    0,  271,  276,  263,  296,  322,  339,  350,  375,
      378,  404, 1196,  387,  388,  408,  399,  407,  416,  406,
      403,  401,  416,  419,  420,  445,  433,  439,  441,  441,
      439,  456,  456,  445,  447,  456,  463,  448,  461,  465,

      470,  456,  476,  477,  462,  479,  475,  494,  461,  484,
      508,  482,  499, 1195,  503,  504,    0,  500,  508,  507,
        0, 1200,  512,    0,  508,  511, 1193,  516,  523,  515,
      515,  527,  514,  514,  522,  549,  521,    0,  523, 1192,
      549,  535,  538,  561,  559, 1191,  541,  567,  564,  550,
      560,  553,  560,  555,  571,  562,  575,  574,  575,  571,
      583,  581,  582,  568,  583,  579, 1190,  608,  609,  602,
      605,  597,  615,  601,  610, 1189,  616,  618,  611,  612,
      621,  627, 1188,  615,    0,  618,  625,  621,  628, 1199,
      623,  637,  652,  647,    0,  659,  665,  669,  654,  661,

     1197,  670,  667,  672,  664,  676, 1185,    0,  660,  681,
      670,  683,  680,    0, 1184,  674, 1183,  672,  668,  691,
      673,  675, 1182, 1181,  677,  687,  689, 1180,  704,  693,
      714,  700,  723,  705,  719,    0, 1179,  707, 1178, 1177,
     1176,  720,  729,  726,  724,  732,  731,    0,  732,  729,
      719,  734,  723, 1175,  729, 1159,    0,  731,  732,  733,
      744,  735,  754,  789,  765,    0,  754,  760, 1158,  764,
      767,  776, 1157,  784,  785,  782,  783,  791,    0,  789,
      788,  802, 1156, 1150,    0,  795,    0, 1149,  805,  796,
     1144,  944,    0,    0,  802,  788,  814,    0,  801,  822,

      806,  766,  818,  821,  819,    0,  830,    0,    0,    0,
      829,  825,  759,  830,  831,  838,  538,  833,  829,  831,
      830,  845,    0,  847,    0,  835,  836,  838,  839,  844,
      851,    0,    0,  861,  864,    0,  878,  879,  413,    0,
      412,  881,  867,  883,  875,  875,  893,  885,    0,    0,
      895,    0,  894,  897,    0,    0,  900,   40,    0,  411,
      881,  882,  884,    0,  898,  899,  895,  410,  409,  373,
        0,  907,  904,  917,    0,  892,  898,  914,  913,  918,
      933,  928,  922,  923,  924,  955,  930,  941,  939,  931,
      935,  942,    0,    0,  372,  371,  943,  957,  943,  957,

      369,  941,  367,  959,  953,  365,  361,    0,  948,  954,
      949,  970,  975,  330,    0,    0,    0,  982,  316,    0,
      973,  300,  290,  288,  975,  977,  976,  992,  278,  277,
      275,    0,  989,  989, 1000,  189,  993,  992,  990, 1006,
      181,    0,    0,  991,  992,  998,  176,    0, 1011,    0,
      175,  174,    0,    0,  995, 1012, 1003, 1006, 1017,    0,
      173,    0, 1012,    0,    0,    0,  167, 1014, 1023, 1023,
        0,    0,    0, 1027, 1026, 1042,    0, 1049, 1049, 1029,
     1057,    0,  159, 1053, 1040,    0, 1043,    0,    0, 1057,
     1063, 1060, 1046, 1047,    0, 1066,    0,  138,  137, 1070,

     1052, 1060, 1062,  134,    0, 1060, 1076, 1076,    0, 1077,
        0, 1064, 1079, 1070,  124, 1092,  123,  122,  115, 1087,
        0,    0, 1088, 1085,  105,  104,    0,  114,  101,  100,
     1090, 1080,   79, 1107,    0, 1108,    0,    0,    0, 1094,
       48, 1106,    0,    0,   46,    0,    0, 1096, 1099,    0,
     1095,   44, 1111,    0, 1105,    0, 1119, 1105, 1110,    0,
     1112,   42, 1110, 1128, 1119, 1121,    0,   40, 1123, 1122,
       39,    0,   34, 1126,    0,    0,   27,    0, 1216, 1183,
        0, 1186, 1188, 1190
    } ;

static yyconst flex_int16_t yy_def[585] =
    {   0,
      580,  580,  579,  581,  579,  582,  579,  581,  581,  581,
      581,  581,  581,  581,  579,  581,  581,  579,  581,  582,
      581,  581,  581,  581,  581,  581,  583,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  583,  584,  581,  581,
      581,   31,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,

      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,

      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,

      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  264,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,

      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,

      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,    0,  579,
      579,  579,  579,  579
    } ;

static yyconst flex_int16_t yy_nxt[1289] =
    {   0,
       19,    5,    6,    7,  579,  579,  579,    8,    9,   10,
       11,   12,   13,   14,   14,   14,   15,   21,   54,   22,
       22,   22,   22,   22,   26,   58,   16,   58,   27,   59,
       59,   17,   21,   53,   22,   23,   22,   22,   22,   25,
       25,   25,   25,   25,  578,   54,   59,   59,   56,   24,
       58,  576,   58,   16,  406,  407,  575,  572,   17,  567,
       53,  560,   84,  556,   32,  554,   22,   22,   22,   22,
       22,   18,    5,    6,    7,   56,   24,   30,    8,    9,
       10,   11,   12,   13,   14,   14,   14,   15,   28,   84,
       22,   22,   22,   22,   22,   58,  550,   16,   85,   86,

       87,   30,   17,   88,   30,   25,   25,   25,   25,   25,
       28,   99,   22,   22,   22,   22,   22,  547,  546,  545,
       58,  544,  543,   30,   16,   85,   86,   87,   30,   17,
       88,   55,  539,   22,   22,   22,   22,   22,   99,  538,
      537,  535,   18,   28,   30,   22,   22,   22,   22,   22,
       30,  527,  120,   29,  522,  521,   30,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   64,   30,  121,
      122,   30,   89,   30,   65,   31,  511,  124,   90,  120,
       29,   60,   60,   30,  497,   61,   61,   61,   61,   61,
      495,  489,  488,  486,   64,   30,  121,  122,  482,   89,

       30,   65,   31,   19,  124,   90,  477,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   33,   34,   35,   36,   19,   37,   38,   19,   39,
       40,   41,   42,   43,   44,   45,   46,   19,   47,   48,
       49,   50,   51,   19,   52,   19,   19,   19,   33,   34,
       35,   36,   19,   37,   38,   19,   39,   40,   41,   42,
       43,   44,   45,   46,   19,   47,   48,   49,   50,   51,
       19,   52,   19,   19,   62,   62,   62,   62,   62,   91,
       63,   62,   62,   62,   62,   62,   62,   25,   25,   25,
       25,   25,  473,   92,  472,  471,   93,  125,   30,   66,

       67,  113,  126,   68,  127,  466,   91,  465,   62,   62,
       62,   62,   62,   62,   70,   69,   94,  464,   71,   96,
       92,   72,   95,   93,  125,   30,   66,   67,   73,  126,
       68,  127,  114,  462,  100,   97,  101,  115,   98,  128,
      129,   70,   69,   94,  102,   71,   96,  460,   72,   95,
       61,   61,   61,   61,   61,   73,   74,  103,   75,  114,
       76,  100,   97,  101,   77,   98,  128,  129,  130,   78,
      131,  102,  104,   79,  105,   80,   81,  106,  454,   82,
       83,  132,  453,   74,  450,   75,  448,   76,  443,  442,
      417,   77,  107,  133,  108,  130,   78,  131,  109,  104,

       79,  105,   80,   81,  106,  110,   82,   83,  132,  116,
      134,  111,   61,   61,   61,   61,   61,  112,  117,  107,
      133,  108,  139,  118,  140,  109,  416,  415,  408,  394,
      393,  141,  110,  135,  136,  142,  137,  134,  111,  143,
      144,  145,  146,  147,  112,  119,  123,  148,  149,  139,
      118,  140,  150,   25,   25,   25,   25,   25,  141,  153,
      135,  136,  142,  137,   30,  151,  143,  144,  145,  146,
      147,  154,  155,  156,  148,  149,  157,  158,  159,  150,
      160,  152,  161,  162,  163,  164,  153,  165,  167,  168,
      166,   30,  151,  169,  170,  171,  172,  173,  154,  155,

      156,  174,  178,  157,  158,  159,  179,  160,  152,  161,
      162,  163,  164,  175,  165,  167,  168,  166,  176,  183,
      169,  170,  171,  172,  173,  177,  180,  184,  174,  178,
      181,  186,  187,  179,  182,  188,  189,  190,  192,  193,
      175,  194,  196,  197,  198,  176,  183,  199,  200,  201,
      202,  203,  177,  180,  184,  375,  206,  181,  186,  187,
      207,  182,  188,  189,  190,  192,  193,  209,  194,  196,
      197,  198,  210,  211,  199,  200,  201,  202,  203,  204,
      212,  213,  205,  206,  215,  216,  217,  207,  218,  219,
      220,  221,  222,  223,  209,  224,  227,  225,  228,  210,

      211,  229,  230,  231,  232,  233,  204,  212,  213,  205,
      226,  215,  216,  217,  234,  218,  219,  220,  221,  222,
      223,  235,  224,  227,  225,  228,  237,  238,  229,  230,
      231,  232,  233,  242,  243,  244,  245,  226,  246,  247,
      249,  234,  252,  253,  254,  255,  258,  250,  235,  259,
      239,  240,  241,  237,  238,  251,  260,  256,  261,  262,
      242,  243,  244,  245,  264,  246,  247,  249,  265,  252,
      253,  254,  255,  258,  250,  266,  259,  239,  240,  241,
      267,  268,  251,  260,  256,  261,  262,  269,  270,  271,
      272,  264,  274,  275,  276,  265,  277,  278,  280,  281,

      282,  283,  266,  284,  286,  288,  289,  267,  268,  290,
      291,  292,  295,  296,  269,  270,  271,  272,  297,  274,
      275,  276,  299,  277,  278,  280,  281,  282,  283,  300,
      284,  286,  288,  289,  301,  302,  290,  291,  292,  295,
      296,  303,  304,  305,  307,  297,  311,  312,  314,  299,
      315,  313,  316,  317,  318,  319,  300,  320,  321,  322,
      324,  301,  302,  326,  327,  328,  329,  330,  303,  304,
      305,  307,  331,  311,  312,  314,  371,  315,  313,  316,
      317,  318,  319,  364,  320,  321,  322,  324,  333,  334,
      326,  327,  328,  329,  330,  335,  337,  338,  339,  331,

      332,  332,  332,  332,  332,  341,  342,  332,  332,  332,
      332,  332,  332,  343,  344,  333,  334,  345,  346,  347,
      348,  351,  335,  337,  338,  339,  353,  354,  357,  358,
      360,  359,  341,  342,  332,  332,  332,  332,  332,  332,
      343,  344,  361,  363,  345,  346,  347,  348,  351,  365,
      366,  367,  368,  353,  354,  357,  358,  360,  362,  369,
      370,  372,  373,  374,  376,  377,  378,  379,  380,  361,
      363,  382,  383,  384,  381,  385,  365,  366,  367,  368,
      386,  387,  388,  389,  390,  362,  369,  370,  372,  373,
      374,  376,  377,  378,  379,  380,  391,  392,  382,  383,

      384,  381,  385,  395,  396,  397,  398,  386,  387,  388,
      389,  390,  399,  400,  401,  402,  403,  404,  405,  409,
      410,  411,  412,  391,  392,  413,  414,  418,  419,  422,
      395,  396,  397,  398,  420,  423,  424,  421,  425,  399,
      400,  401,  402,  403,  404,  405,  409,  410,  411,  412,
      426,  427,  413,  414,  418,  419,  422,  428,  429,  430,
      431,  356,  423,  424,  421,  425,  436,  437,  438,  439,
      440,  441,  432,  433,  444,  445,  446,  426,  427,  447,
      449,  451,  452,  455,  428,  429,  430,  431,  434,  456,
      435,  457,  458,  436,  437,  438,  439,  440,  441,  459,

      433,  444,  445,  446,  461,  463,  447,  449,  451,  452,
      455,  467,  468,  469,  470,  434,  456,  435,  457,  458,
      474,  475,  476,  478,  479,  480,  459,  481,  483,  484,
      485,  461,  463,  487,  490,  491,  492,  493,  467,  468,
      469,  470,  494,  496,  498,  499,  500,  474,  475,  476,
      478,  479,  480,  502,  481,  483,  484,  485,  503,  501,
      487,  490,  491,  492,  493,  504,  505,  507,  508,  494,
      496,  498,  499,  500,  509,  512,  513,  510,  514,  515,
      502,  516,  517,  518,  519,  503,  501,  520,  523,  524,
      525,  526,  504,  506,  507,  508,  528,  529,  530,  531,

      532,  533,  512,  513,  510,  514,  515,  534,  516,  517,
      518,  519,  536,  540,  520,  523,  524,  525,  526,  541,
      542,  548,  549,  528,  529,  530,  531,  532,  533,  551,
      552,  553,  555,  557,  534,  558,  559,  561,  562,  536,
      540,  563,  564,  565,  566,  568,  541,  542,  548,  549,
      569,  570,  571,  573,  574,  577,  551,  552,  553,  555,
      557,  355,  558,  559,  561,  562,  352,  350,  563,  564,
      565,  566,  568,  349,  340,  336,  325,  569,  570,  571,
      573,  574,  577,    4,    4,    4,   20,   20,   57,   57,
       58,   58,  323,  310,  309,  308,  306,  298,  294,  293,

      287,  285,  279,  273,  263,  257,  248,  236,  214,  208,
      195,  191,  185,  138,  579,    3,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579
    } ;

static yyconst flex_int16_t yy_chk[1289] =
    {   0,
      581,    1,    1,    1,    0,    0,    0,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    8,   17,    8,
        8,    8,    8,    8,   11,   27,    1,   27,   11,   29,
       29,    1,    9,   16,    9,    9,    9,    9,    9,   10,
       10,   10,   10,   10,  577,   17,   59,   59,   24,    9,
       57,  573,   57,    1,  358,  358,  571,  568,    1,  562,
       16,  552,   37,  545,   13,  541,   13,   13,   13,   13,
       13,    1,    2,    2,    2,   24,    9,   13,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   14,   37,
       14,   14,   14,   14,   14,   27,  533,    2,   38,   39,

       40,   14,    2,   41,   13,   21,   21,   21,   21,   21,
       22,   46,   22,   22,   22,   22,   22,  530,  529,  528,
       57,  526,  525,   22,    2,   38,   39,   40,   14,    2,
       41,   23,  519,   23,   23,   23,   23,   23,   46,  518,
      517,  515,    2,   12,   23,   12,   12,   12,   12,   12,
       22,  504,   52,   12,  499,  498,   12,   25,   25,   25,
       25,   25,   28,   28,   28,   28,   28,   33,   25,   53,
       54,   23,   42,   28,   33,   12,  483,   56,   42,   52,
       12,   30,   30,   12,  467,   30,   30,   30,   30,   30,
      461,  452,  451,  447,   33,   25,   53,   54,  441,   42,

       28,   33,   12,   15,   56,   42,  436,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   31,   31,   31,   31,   31,   43,
       32,   31,   31,   31,   31,   31,   31,   32,   32,   32,
       32,   32,  431,   43,  430,  429,   43,   63,   32,   34,

       34,   50,   64,   34,   65,  424,   43,  423,   31,   31,
       31,   31,   31,   31,   35,   34,   44,  422,   35,   45,
       43,   35,   44,   43,   63,   32,   34,   34,   35,   64,
       34,   65,   50,  419,   47,   45,   47,   50,   45,   66,
       67,   35,   34,   44,   47,   35,   45,  414,   35,   44,
       60,   60,   60,   60,   60,   35,   36,   48,   36,   50,
       36,   47,   45,   47,   36,   45,   66,   67,   68,   36,
       68,   47,   48,   36,   48,   36,   36,   48,  407,   36,
       36,   69,  406,   36,  403,   36,  401,   36,  396,  395,
      370,   36,   48,   70,   49,   68,   36,   68,   49,   48,

       36,   48,   36,   36,   48,   49,   36,   36,   69,   51,
       71,   49,   61,   61,   61,   61,   61,   49,   51,   48,
       70,   49,   74,   51,   75,   49,  369,  368,  360,  341,
      339,   76,   49,   72,   72,   77,   72,   71,   49,   78,
       79,   80,   81,   82,   49,   51,   55,   83,   84,   74,
       51,   75,   85,   55,   55,   55,   55,   55,   76,   87,
       72,   72,   77,   72,   55,   86,   78,   79,   80,   81,
       82,   88,   89,   90,   83,   84,   91,   92,   93,   85,
       94,   86,   95,   96,   97,   98,   87,   99,  100,  101,
       99,   55,   86,  102,  103,  104,  105,  106,   88,   89,

       90,  107,  109,   91,   92,   93,  110,   94,   86,   95,
       96,   97,   98,  108,   99,  100,  101,   99,  108,  112,
      102,  103,  104,  105,  106,  108,  111,  113,  107,  109,
      111,  115,  116,  110,  111,  118,  119,  120,  123,  125,
      108,  126,  128,  129,  130,  108,  112,  131,  132,  133,
      134,  135,  108,  111,  113,  317,  137,  111,  115,  116,
      139,  111,  118,  119,  120,  123,  125,  141,  126,  128,
      129,  130,  142,  143,  131,  132,  133,  134,  135,  136,
      144,  145,  136,  137,  147,  148,  149,  139,  150,  151,
      152,  153,  154,  155,  141,  156,  158,  157,  159,  142,

      143,  160,  161,  162,  163,  164,  136,  144,  145,  136,
      157,  147,  148,  149,  165,  150,  151,  152,  153,  154,
      155,  166,  156,  158,  157,  159,  168,  169,  160,  161,
      162,  163,  164,  170,  171,  172,  173,  157,  174,  175,
      177,  165,  179,  180,  181,  182,  184,  178,  166,  186,
      169,  169,  169,  168,  169,  178,  187,  182,  188,  189,
      170,  171,  172,  173,  191,  174,  175,  177,  192,  179,
      180,  181,  182,  184,  178,  193,  186,  169,  169,  169,
      194,  196,  178,  187,  182,  188,  189,  197,  198,  199,
      200,  191,  202,  203,  204,  192,  205,  206,  209,  210,

      211,  212,  193,  213,  216,  218,  219,  194,  196,  220,
      221,  222,  225,  226,  197,  198,  199,  200,  227,  202,
      203,  204,  229,  205,  206,  209,  210,  211,  212,  230,
      213,  216,  218,  219,  231,  232,  220,  221,  222,  225,
      226,  233,  234,  235,  238,  227,  242,  243,  244,  229,
      245,  243,  246,  247,  249,  250,  230,  251,  252,  253,
      255,  231,  232,  258,  259,  260,  261,  262,  233,  234,
      235,  238,  263,  242,  243,  244,  313,  245,  243,  246,
      247,  249,  250,  302,  251,  252,  253,  255,  265,  267,
      258,  259,  260,  261,  262,  268,  270,  271,  272,  263,

      264,  264,  264,  264,  264,  274,  275,  264,  264,  264,
      264,  264,  264,  276,  277,  265,  267,  278,  280,  281,
      282,  286,  268,  270,  271,  272,  289,  290,  295,  296,
      299,  297,  274,  275,  264,  264,  264,  264,  264,  264,
      276,  277,  300,  301,  278,  280,  281,  282,  286,  303,
      304,  305,  307,  289,  290,  295,  296,  299,  300,  311,
      312,  314,  315,  316,  318,  319,  320,  321,  322,  300,
      301,  324,  326,  327,  322,  328,  303,  304,  305,  307,
      329,  330,  331,  334,  335,  300,  311,  312,  314,  315,
      316,  318,  319,  320,  321,  322,  337,  338,  324,  326,

      327,  322,  328,  342,  343,  344,  345,  329,  330,  331,
      334,  335,  346,  347,  348,  351,  353,  354,  357,  361,
      362,  363,  365,  337,  338,  366,  367,  372,  373,  376,
      342,  343,  344,  345,  374,  377,  378,  374,  379,  346,
      347,  348,  351,  353,  354,  357,  361,  362,  363,  365,
      380,  381,  366,  367,  372,  373,  376,  382,  383,  384,
      385,  292,  377,  378,  374,  379,  387,  388,  389,  390,
      391,  392,  386,  386,  397,  398,  399,  380,  381,  400,
      402,  404,  405,  409,  382,  383,  384,  385,  386,  410,
      386,  411,  412,  387,  388,  389,  390,  391,  392,  413,

      386,  397,  398,  399,  418,  421,  400,  402,  404,  405,
      409,  425,  426,  427,  428,  386,  410,  386,  411,  412,
      433,  434,  435,  437,  438,  439,  413,  440,  444,  445,
      446,  418,  421,  449,  455,  456,  457,  458,  425,  426,
      427,  428,  459,  463,  468,  469,  470,  433,  434,  435,
      437,  438,  439,  474,  440,  444,  445,  446,  475,  470,
      449,  455,  456,  457,  458,  476,  478,  479,  480,  459,
      463,  468,  469,  470,  481,  484,  485,  481,  487,  490,
      474,  491,  492,  493,  494,  475,  470,  496,  500,  501,
      502,  503,  476,  478,  479,  480,  506,  507,  508,  510,

      512,  513,  484,  485,  481,  487,  490,  514,  491,  492,
      493,  494,  516,  520,  496,  500,  501,  502,  503,  523,
      524,  531,  532,  506,  507,  508,  510,  512,  513,  534,
      536,  540,  542,  548,  514,  549,  551,  553,  555,  516,
      520,  557,  558,  559,  561,  563,  523,  524,  531,  532,
      564,  565,  566,  569,  570,  574,  534,  536,  540,  542,
      548,  291,  549,  551,  553,  555,  288,  284,  557,  558,
      559,  561,  563,  283,  273,  269,  256,  564,  565,  566,
      569,  570,  574,  580,  580,  580,  582,  582,  583,  583,
      584,  584,  254,  241,  240,  239,  237,  228,  224,  223,

      217,  215,  207,  201,  190,  183,  176,  167,  146,  140,
      127,  122,  114,   73,    3,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int eggyy_flex_debug;
int eggyy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *eggyytext;
#line 1 "lexer.lxx"
/*
// Filename: lexer.l
// Created by:  drose (16Jan99)
// 
////////////////////////////////////////////////////////////////////
*/
#line 9 "lexer.lxx"
#include "pandabase.h"
#include "lexerDefs.h"
#include "parserDefs.h"
#include "config_egg.h"
#include "parser.h"
#include "indent.h"
#include "pnotify.h"
#include "lightMutex.h"
#include "thread.h"
#include "pstrtod.h"

#include <math.h>

extern "C" int eggyywrap(void);  // declared below.

static int yyinput(void);        // declared by flex.


////////////////////////////////////////////////////////////////////
// Static variables
////////////////////////////////////////////////////////////////////

// This mutex protects all of these global variables. 
LightMutex egg_lock; 

// We'll increment line_number and col_number as we parse the file, so
// that we can report the position of an error.
static int line_number = 0;
static int col_number = 0;

// current_line holds as much of the current line as will fit.  Its
// only purpose is for printing it out to report an error to the user.
static const int max_error_width = 1024;
static char current_line[max_error_width + 1];

static int error_count = 0;
static int warning_count = 0;

// This is the pointer to the current input stream.
static istream *input_p = NULL;

// This is the name of the egg file we're parsing.  We keep it so we
// can print it out for error messages.
static string egg_filename;

// This is the initial token state returned by the lexer.  It allows
// the yacc grammar to start from initial points.
static int initial_token;

////////////////////////////////////////////////////////////////////
// Defining the interface to the lexer.
////////////////////////////////////////////////////////////////////

void
egg_init_lexer(istream &in, const string &filename) {
  input_p = &in;
  egg_filename = filename;
  line_number = 0;
  col_number = 0;
  error_count = 0;
  warning_count = 0;
  initial_token = START_EGG;
}

void
egg_start_group_body() {
  /* Set the initial state to begin within a group_body context,
     instead of at the beginning of the egg file. */
  initial_token = START_GROUP_BODY;
}

void
egg_start_texture_body() {
  initial_token = START_TEXTURE_BODY;
}

void
egg_start_primitive_body() {
  initial_token = START_PRIMITIVE_BODY;
}

int
egg_error_count() {
  return error_count;
}

int
egg_warning_count() {
  return warning_count;
}


////////////////////////////////////////////////////////////////////
// Internal support functions.
////////////////////////////////////////////////////////////////////

int
eggyywrap(void) {
  return 1;
}

void
eggyyerror(const string &msg) {
  if (egg_cat.is_error()) {
    ostream &out = egg_cat.error(false);

    out << "\nError";
    if (!egg_filename.empty()) {
      out << " in " << egg_filename;
    }
    out 
      << " at line " << line_number << ", column " << col_number << ":\n"
      << setiosflags(Notify::get_literal_flag())
      << current_line << "\n";
    indent(out, col_number-1) 
      << "^\n" << msg << "\n\n" 
      << resetiosflags(Notify::get_literal_flag()) << flush;
  }
  error_count++;
}

void
eggyyerror(ostringstream &strm) {
  string s = strm.str();
  eggyyerror(s);
}

void
eggyywarning(const string &msg) {
  if (egg_cat.is_warning()) {
    ostream &out = egg_cat.warning(false);

    out << "\nWarning";
    if (!egg_filename.empty()) {
      out << " in " << egg_filename;
    }
    out 
      << " at line " << line_number << ", column " << col_number << ":\n"
      << setiosflags(Notify::get_literal_flag())
      << current_line << "\n";
    indent(out, col_number-1) 
      << "^\n" << msg << "\n\n" 
      << resetiosflags(Notify::get_literal_flag()) << flush;
  }
  warning_count++;
}

void
eggyywarning(ostringstream &strm) {
  string s = strm.str();
  eggyywarning(s);
}

// Now define a function to take input from an istream instead of a
// stdio FILE pointer.  This is flex-specific.
static void
input_chars(char *buffer, int &result, int max_size) {
  nassertv(input_p != NULL);
  if (*input_p) {
    input_p->read(buffer, max_size);
    result = input_p->gcount();

    if (line_number == 0) {
      // This is a special case.  If we are reading the very first bit
      // from the stream, copy it into the current_line array.  This
      // is because the \n.* rule below, which fills current_line
      // normally, doesn't catch the first line.
      int length = min(max_error_width, result);
      strncpy(current_line, buffer, length);
      current_line[length] = '\0';
      line_number++;
      col_number = 0;

      // Truncate it at the newline.
      char *end = strchr(current_line, '\n');
      if (end != NULL) {
        *end = '\0';
      }
    }

  } else {
    // End of file or I/O error.
    result = 0;
  }
  Thread::consider_yield();
}
#undef YY_INPUT

// Define this macro carefully, since different flex versions call it
// with a different type for result.
#define YY_INPUT(buffer, result, max_size) { \
  int int_result; \
  input_chars((buffer), int_result, (max_size)); \
  (result) = int_result; \
}

// read_char reads and returns a single character, incrementing the
// supplied line and column numbers as appropriate.  A convenience
// function for the scanning functions below.
static int
read_char(int &line, int &col) {
  int c = yyinput();
  if (c == '\n') {
    line++;
    col = 0;
  } else {
    col++;
  }
  return c;
}

// scan_quoted_string reads a string delimited by quotation marks and
// returns it.
static string
scan_quoted_string() {
  string result;

  // We don't touch the current line number and column number during
  // scanning, so that if we detect an error while scanning the string
  // (e.g. an unterminated string), we'll report the error as
  // occurring at the start of the string, not at the end--somewhat
  // more convenient for the user.

  // Instead of adjusting the global line_number and col_number
  // variables, we'll operate on our own local variables for the
  // interim.
  int line = line_number;
  int col = col_number;

  int c;
  c = read_char(line, col);
  while (c != '"' && c != EOF) {
    result += c;
    c = read_char(line, col);
  }

  if (c == EOF) {
    eggyyerror("This quotation mark is unterminated.");
  }

  line_number = line;
  col_number = col;

  return result;
}

// eat_c_comment scans past all characters up until the first */
// encountered.
static void
eat_c_comment() {
  // As above, we'll operate on our own local copies of line_number
  // and col_number within this function.

  int line = line_number;
  int col = col_number;

  int c, last_c;
  
  last_c = '\0';
  c = read_char(line, col);
  while (c != EOF && !(last_c == '*' && c == '/')) {
    if (last_c == '/' && c == '*') {
      ostringstream errmsg;
      errmsg << "This comment contains a nested /* symbol at line "
             << line << ", column " << col-1 << "--possibly unclosed?"
             << ends;
      eggyywarning(errmsg);
    }
    last_c = c;
    c = read_char(line, col);
  }

  if (c == EOF) {
    eggyyerror("This comment marker is unclosed.");
  }

  line_number = line;
  col_number = col;
}


// accept() is called below as each piece is pulled off and
// accepted by the lexer; it increments the current column number.
INLINE void accept() {
  col_number += eggyyleng;
}

#line 1236 "lex.yy.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int eggyylex_destroy (void );

int eggyyget_debug (void );

void eggyyset_debug (int debug_flag  );

YY_EXTRA_TYPE eggyyget_extra (void );

void eggyyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *eggyyget_in (void );

void eggyyset_in  (FILE * in_str  );

FILE *eggyyget_out (void );

void eggyyset_out  (FILE * out_str  );

yy_size_t eggyyget_leng (void );

char *eggyyget_text (void );

int eggyyget_lineno (void );

void eggyyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int eggyywrap (void );
#else
extern int eggyywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( eggyytext, eggyyleng, 1, eggyyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( eggyyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( eggyyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, eggyyin))==0 && ferror(eggyyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(eggyyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int eggyylex (void);

#define YY_DECL int eggyylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after eggyytext and eggyyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 302 "lexer.lxx"



  if (initial_token != 0) {
    int t = initial_token;
    initial_token = 0;
    return t;
  }


#line 1429 "lex.yy.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! eggyyin )
			eggyyin = stdin;

		if ( ! eggyyout )
			eggyyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			eggyyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				eggyy_create_buffer(eggyyin,YY_BUF_SIZE );
		}

		eggyy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of eggyytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 580 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1216 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 312 "lexer.lxx"
{
  // New line.  Save a copy of the line so we can print it out for the
  // benefit of the user in case we get an error.

  strncpy(current_line, eggyytext+1, max_error_width);
  current_line[max_error_width] = '\0';
  line_number++;
  col_number=0;

  // Return the whole line to the lexer, except the newline character,
  // which we eat.
  yyless(1);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 326 "lexer.lxx"
{ 
  // Eat whitespace.
  accept();
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 331 "lexer.lxx"
{ 
  // Eat C++-style comments.
  accept();
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 336 "lexer.lxx"
{
  // Eat C-style comments.
  accept();
  eat_c_comment(); 
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 342 "lexer.lxx"
{
  // Send curly braces as themselves.
  accept(); 
  return eggyytext[0];
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 350 "lexer.lxx"
{
  accept();
  return ANIMPRELOAD;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 354 "lexer.lxx"
{
  accept();
  return AUX;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 358 "lexer.lxx"
{
  accept();
  return BEZIERCURVE;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 362 "lexer.lxx"
{
  accept();
  return BFACE;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 366 "lexer.lxx"
{
  accept();
  return BILLBOARD;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 370 "lexer.lxx"
{
  accept();
  return BILLBOARDCENTER;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 374 "lexer.lxx"
{
  accept();
  return BINORMAL;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 378 "lexer.lxx"
{
  accept();
  return BUNDLE;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 382 "lexer.lxx"
{
  accept();
  return SCALAR;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 386 "lexer.lxx"
{
  accept();
  return CLOSED;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 390 "lexer.lxx"
{
  accept();
  return COLLIDE;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 394 "lexer.lxx"
{
  accept();
  return COMMENT;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 398 "lexer.lxx"
{
  accept();
  return COMPONENT;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 402 "lexer.lxx"
{
  accept();
  return COORDSYSTEM;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 406 "lexer.lxx"
{
  accept();
  return CV;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 410 "lexer.lxx"
{
  accept();
  return DART;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 414 "lexer.lxx"
{
  accept();
  return DNORMAL;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 418 "lexer.lxx"
{
  accept();
  return DRGBA;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 422 "lexer.lxx"
{
  accept();
  return DUV;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 426 "lexer.lxx"
{
  accept();
  return DXYZ;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 430 "lexer.lxx"
{
  accept();
  return DCS;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 434 "lexer.lxx"
{
  accept();
  return DISTANCE;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 438 "lexer.lxx"
{
  accept();
  return DTREF;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 442 "lexer.lxx"
{
  accept();
  return DYNAMICVERTEXPOOL;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 446 "lexer.lxx"
{
  accept();
  return EXTERNAL_FILE;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 450 "lexer.lxx"
{
  accept();
  return GROUP;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 454 "lexer.lxx"
{
  accept();
  return DEFAULTPOSE;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 458 "lexer.lxx"
{
  accept();
  return JOINT;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 462 "lexer.lxx"
{
  accept();
  return KNOTS;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 466 "lexer.lxx"
{
  accept();
  return INCLUDE;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 470 "lexer.lxx"
{
  accept();
  return INSTANCE;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 474 "lexer.lxx"
{
  accept();
  return LINE;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 478 "lexer.lxx"
{
  accept();
  return LOOP;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 482 "lexer.lxx"
{
  accept();
  return MATERIAL;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 486 "lexer.lxx"
{
  accept();
  return MATRIX3;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 490 "lexer.lxx"
{
  accept();
  return MATRIX4;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 494 "lexer.lxx"
{
  accept();
  return MODEL;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 498 "lexer.lxx"
{
  accept();
  return MREF;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 502 "lexer.lxx"
{
  accept();
  return NORMAL;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 506 "lexer.lxx"
{
  accept();
  return NURBSCURVE;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 510 "lexer.lxx"
{
  accept();
  return NURBSSURFACE;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 514 "lexer.lxx"
{
  accept();
  return OBJECTTYPE;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 518 "lexer.lxx"
{
  accept();
  return ORDER;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 522 "lexer.lxx"
{
  accept();
  return OUTTANGENT;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 526 "lexer.lxx"
{
  accept();
  return POINTLIGHT;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 530 "lexer.lxx"
{
  accept();
  return POLYGON;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 534 "lexer.lxx"
{
  accept();
  return REF;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 538 "lexer.lxx"
{
  accept();
  return RGBA;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 542 "lexer.lxx"
{
  accept();
  return ROTATE;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 546 "lexer.lxx"
{
  accept();
  return ROTX;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 550 "lexer.lxx"
{
  accept();
  return ROTY;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 554 "lexer.lxx"
{
  accept();
  return ROTZ;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 558 "lexer.lxx"
{
  accept();
  return SANIM;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 562 "lexer.lxx"
{
  accept();
  return SCALAR;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 566 "lexer.lxx"
{
  accept();
  return SCALE;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 570 "lexer.lxx"
{
  accept();
  return SEQUENCE;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 574 "lexer.lxx"
{
  accept();
  return SHADING;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 578 "lexer.lxx"
{
  accept();
  return SWITCH;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 582 "lexer.lxx"
{
  accept();
  return SWITCHCONDITION;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 586 "lexer.lxx"
{
  accept();
  return TABLE;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 590 "lexer.lxx"
{
  accept();
  return TABLE_V;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 594 "lexer.lxx"
{
  accept();
  return TAG;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 598 "lexer.lxx"
{
  accept();
  return TANGENT;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 602 "lexer.lxx"
{
  accept();
  return TEXLIST;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 606 "lexer.lxx"
{
  accept();
  return TEXTURE;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 610 "lexer.lxx"
{
  accept();
  return TLENGTHS;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 614 "lexer.lxx"
{
  accept();
  return TRANSFORM;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 618 "lexer.lxx"
{
  accept();
  return TRANSLATE;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 622 "lexer.lxx"
{
  accept();
  return TREF;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 626 "lexer.lxx"
{
  accept();
  return TRIANGLEFAN;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 630 "lexer.lxx"
{
  accept();
  return TRIANGLESTRIP;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 634 "lexer.lxx"
{
  accept();
  return TRIM;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 638 "lexer.lxx"
{
  accept();
  return TXT;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 642 "lexer.lxx"
{
  accept();
  return UKNOTS;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 646 "lexer.lxx"
{
  accept();
  return UKNOTS;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 650 "lexer.lxx"
{
  accept();
  return UV;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 654 "lexer.lxx"
{
  accept();
  return VKNOTS;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 658 "lexer.lxx"
{
  accept();
  return VKNOTS;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 662 "lexer.lxx"
{
  accept();
  return VERTEX;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 666 "lexer.lxx"
{
  accept();
  return VERTEXANIM;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 670 "lexer.lxx"
{
  accept();
  return VERTEXPOOL;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 674 "lexer.lxx"
{
  accept();
  return VERTEXREF;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 678 "lexer.lxx"
{
  accept();
  return XFMANIM;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 682 "lexer.lxx"
{
  accept();
  return XFMSANIM;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 689 "lexer.lxx"
{ 
  // An integer or floating-point number.
  accept(); 
  eggyylval._number = patof(eggyytext); 
  eggyylval._string = eggyytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 697 "lexer.lxx"
{
  // A hexadecimal integer number.
  accept(); 
  eggyylval._ulong = strtoul(eggyytext+2, NULL, 16);
  eggyylval._string = eggyytext;
  return EGG_ULONG; 
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 705 "lexer.lxx"
{
  // A binary integer number.
  accept(); 
  eggyylval._ulong = strtoul(eggyytext+2, NULL, 2);
  eggyylval._string = eggyytext;
  return EGG_ULONG; 
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 713 "lexer.lxx"
{
  // not-a-number.  These sometimes show up in egg files accidentally.
  accept(); 
  memset(&eggyylval._number, 0, sizeof(eggyylval._number));
  *(unsigned long *)&eggyylval._number = strtoul(eggyytext+3, NULL, 0);
  eggyylval._string = eggyytext;
  return EGG_NUMBER;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 722 "lexer.lxx"
{ 
  // infinity.  As above.
  accept(); 
  eggyylval._number = HUGE_VAL;
  eggyylval._string = eggyytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 730 "lexer.lxx"
{
  // minus infinity.  As above.
  accept(); 
  eggyylval._number = -HUGE_VAL;
  eggyylval._string = eggyytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 738 "lexer.lxx"
{ 
  // infinity, on Win32.  As above.
  accept(); 
  eggyylval._number = HUGE_VAL;
  eggyylval._string = eggyytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 746 "lexer.lxx"
{
  // minus infinity, on Win32.  As above.
  accept(); 
  eggyylval._number = -HUGE_VAL;
  eggyylval._string = eggyytext;
  return EGG_NUMBER; 
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 755 "lexer.lxx"
{
  // Quoted string.
  accept();
  eggyylval._string = scan_quoted_string();
  return EGG_STRING;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 762 "lexer.lxx"
{ 
  // Unquoted string.
  accept();
  eggyylval._string = eggyytext;
  return EGG_STRING;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 768 "lexer.lxx"
ECHO;
	YY_BREAK
#line 2350 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed eggyyin at a new source and called
			 * eggyylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = eggyyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( eggyywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * eggyytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of eggyylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					eggyyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			eggyyrestart(eggyyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) eggyyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 580 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 580 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 579);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up eggyytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					eggyyrestart(eggyyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( eggyywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve eggyytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void eggyyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        eggyyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            eggyy_create_buffer(eggyyin,YY_BUF_SIZE );
	}

	eggyy_init_buffer(YY_CURRENT_BUFFER,input_file );
	eggyy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void eggyy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		eggyypop_buffer_state();
	 *		eggyypush_buffer_state(new_buffer);
     */
	eggyyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	eggyy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (eggyywrap()) processing, but the only time this flag
	 * is looked at is after eggyywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void eggyy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	eggyyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE eggyy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) eggyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in eggyy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) eggyyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in eggyy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	eggyy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with eggyy_create_buffer()
 * 
 */
    void eggyy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		eggyyfree((void *) b->yy_ch_buf  );

	eggyyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a eggyyrestart() or at EOF.
 */
    static void eggyy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	eggyy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then eggyy_init_buffer was _probably_
     * called from eggyyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void eggyy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		eggyy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void eggyypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	eggyyensure_buffer_stack();

	/* This block is copied from eggyy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from eggyy_switch_to_buffer. */
	eggyy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void eggyypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	eggyy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		eggyy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void eggyyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)eggyyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in eggyyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)eggyyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in eggyyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE eggyy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) eggyyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in eggyy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	eggyy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to eggyylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       eggyy_scan_bytes() instead.
 */
YY_BUFFER_STATE eggyy_scan_string (yyconst char * yystr )
{
    
	return eggyy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to eggyylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE eggyy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) eggyyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in eggyy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = eggyy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in eggyy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up eggyytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		eggyytext[eggyyleng] = (yy_hold_char); \
		(yy_c_buf_p) = eggyytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		eggyyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int eggyyget_lineno  (void)
{
        
    return eggyylineno;
}

/** Get the input stream.
 * 
 */
FILE *eggyyget_in  (void)
{
        return eggyyin;
}

/** Get the output stream.
 * 
 */
FILE *eggyyget_out  (void)
{
        return eggyyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t eggyyget_leng  (void)
{
        return eggyyleng;
}

/** Get the current token.
 * 
 */

char *eggyyget_text  (void)
{
        return eggyytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void eggyyset_lineno (int  line_number )
{
    
    eggyylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see eggyy_switch_to_buffer
 */
void eggyyset_in (FILE *  in_str )
{
        eggyyin = in_str ;
}

void eggyyset_out (FILE *  out_str )
{
        eggyyout = out_str ;
}

int eggyyget_debug  (void)
{
        return eggyy_flex_debug;
}

void eggyyset_debug (int  bdebug )
{
        eggyy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from eggyylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    eggyyin = stdin;
    eggyyout = stdout;
#else
    eggyyin = (FILE *) 0;
    eggyyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * eggyylex_init()
     */
    return 0;
}

/* eggyylex_destroy is for both reentrant and non-reentrant scanners. */
int eggyylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		eggyy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		eggyypop_buffer_state();
	}

	/* Destroy the stack itself. */
	eggyyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * eggyylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *eggyyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *eggyyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void eggyyfree (void * ptr )
{
	free( (char *) ptr );	/* see eggyyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 768 "lexer.lxx"

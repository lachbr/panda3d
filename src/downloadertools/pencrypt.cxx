// Filename: pencrypt.cxx
// Created by:  drose (01Sep04)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) 2001 - 2004, Disney Enterprises, Inc.  All rights reserved
//
// All use of this software is subject to the terms of the Panda 3d
// Software license.  You should have received a copy of this license
// along with this source code; you will also find a current copy of
// the license at http://etc.cmu.edu/panda3d/docs/license/ .
//
// To contact the maintainers of this program write to
// panda3d-general@lists.sourceforge.net .
//
////////////////////////////////////////////////////////////////////

#include "filename.h"
#include "encryptStream.h"
#include "notify.h"

#ifndef HAVE_GETOPT
  #include "gnu_getopt.h"
#else
  #ifdef HAVE_GETOPT_H
    #include <getopt.h>
  #endif
#endif

void 
usage() {
  cerr
    << "\n"
    << "Usage: pencrypt [opts] <file> [<dest_file>]\n\n"
    
    << "This program will apply an encryption algorithm to a file, creating an\n"
    << "encrypted version of the file which can only be recovered using pdecrypt and\n"
    << "the same password that was supplied to pencrypt.  If the dest_file name is\n"
    << "not specified, a default output name is generated by appending .pe to the\n"
    << "input file name.\n\n"

    << "Options:\n\n"

    << "  -a algorithm\n"
    << "      Specifies the particular encryption algorithm to use.  Available\n"
    << "      algorithm names are defined by OpenSSL.  If this is unspecified a\n"
    << "      default algorithm is selected.\n\n"
    
    << "  -p \"password\"\n"
    << "      Specifies the password to use for encryption.  There are no\n"
    << "      restrictions on the password length or contents, but longer passwords\n"
    << "      are more secure.  If this is not specified, the user is prompted from\n"
    << "      standard input.\n\n";
}

int
main(int argc, char *argv[]) {
  extern char *optarg;
  extern int optind;
  const char *optstr = "a:p:h";

  string algorithm;
  string password;
  bool got_password = false;

  int flag = getopt(argc, argv, optstr);

  while (flag != EOF) {
    switch (flag) {
    case 'a':
      algorithm = optarg;
      break;

    case 'p':
      password = optarg;
      got_password = true;
      break;

    case 'h':
    case '?':
    default:
      usage();
      return 1;
    }
    flag = getopt(argc, argv, optstr);
  }

  argc -= (optind-1);
  argv += (optind-1);

  if (argc < 2) {
    usage();
    return 1;
  }

  bool implicit_dest_file;
  Filename source_file = Filename::from_os_specific(argv[1]);
  Filename dest_file;
  if (argc < 3) {
    dest_file = source_file.get_fullpath() + ".pe";
    implicit_dest_file = true;
  } else {
    dest_file = Filename::from_os_specific(argv[2]);
    implicit_dest_file = false;
  }

  // Open source file
  ifstream read_stream;
  source_file.set_binary();
  if (!source_file.open_read(read_stream)) {
    cerr << "failed to open: " << source_file << endl;
    return 1;
  }

  // Open destination file
  ofstream write_stream;
  dest_file.set_binary();
  if (!dest_file.open_write(write_stream, true)) {
    cerr << "failed to open: " << dest_file << endl;
    return 1;
  }

  // Prompt for password.
  if (!got_password) {
    cerr << "Enter password: ";
    getline(cin, password);
  }
    
  bool fail = false;
  {
    OEncryptStream encrypt(&write_stream, false, password, algorithm);
    
    int ch = read_stream.get();
    while (!read_stream.eof() && !read_stream.fail()) {
      encrypt.put(ch);
      ch = read_stream.get();
    }

    fail = encrypt.fail() && !encrypt.eof();
  }

  read_stream.close();
  write_stream.close();

  if (fail) {
    dest_file.unlink();

  } else {
    if (implicit_dest_file) {
      source_file.unlink();
    }
  }

  return 0;
}

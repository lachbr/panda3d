WARNING: This document is an internal VR Studio document describing
how to set up Panda on a new PC using our internal development
environment.  It is not useful for programmers who are not within the
VR Studio firewall.

If you are looking for documentation on installing Panda in the rest
of the world, see INSTALL.txt in this directory.




To install Panda3D on WinXP/Win2000
-------------------------------------
Notes:
  Lines preceeded by ">" are instructions to be typed on the command line. 
  On WinNT, make sure your system clock is not set to GMT (only worry about
    this if your makedepend seems out of sync, i.e. you constantly reinstall
    old files over more current ones).
  "Touch" doesn't quite work properly on WinNT or Win98 currently.
  Make sure you run ftp in "binary" mode to fetch tarballs.
  "ftp" doesn't currently read "backspace" in rxvt, so you'll just have to be
    precise at the ftp prompt for now ("delete" doesn't work either).
    If this really bugs you, you can create a shortcut on the Desktop to
    "tcsh.exe" and run ftp properly from there rather than from rxvt.
  Make sure your machine has enough disk space - I'd start with the largest
    open space on any of your partitions.
  Make sure your machine has networking (IP, gateway, etc.) so you can use
    ftp to get to mother.
    
Step 0: Map network drive to build tools drive
  - right click on Network Places, choose Map Network Drive
  - Map Network Drive V: to \\dimbo\panda
  - select reconnect drive at startup
  - if this doesnt work, you can install the build tools from CD

Step 1: 
  Choose whether to use Visual C++ v7.0 or v6.0
  
  To Install VC++ 7.0
        Run v:\msvc7\vc_setup\setup.exe, or install from the MSDN 'Visual Studio.NET' CD
        Click on 'Windows Component Update' (if it is highlighted, else click '2')
        Click 'Continue' (Selecting 'Do not use this machine to host web projects')
        You will install IE6, which will requires a reboot.  Give your pw if you
        want it to happen automatically.
        
        After rebooting, setup should start again.  If it does not, go back and rerun
        it, it should remember where it left off.
        
        After installing components, you are ready to install VC7 in Step 2.
        Enter this step and enter the product-key, which is stored in
        V:\msvc7\vc7-prodkey.txt
        
        On the 'select items to install page', you need uncheck things to avoid wasting 
        gigs of extra space and install time.  Uncheck everything except for
        Language Tools->Visual C++, Server Components->Remote Debugger->Native Remote
        Debugger, and if you want, Documentation (this is a gig, and is only a slight
        update if you already have MSDN installed locally though.  you will want to
        uninstall the separately-installed MSDN docs if you get this.)
        
        Unlike VC 6.0, there is no option to add the required compiler bin 
        directories to the environment path automatically.  To do this, if you 
        are running from the NT command line, run 
        "C:\Program Files\Microsoft Visual Studio .NET\Vc7\bin\vcvars32.bat"
        
        If you are using tcsh.exe under cygwin, see step 4.5 to setup the environment after
        your shell environment is running properly
  
  To Install Visual C++ (v6.0)
  - Run V:\msvc-6.0\setup.exe, or install from CD.  
    For a faster install, select custom install and uncheck everything
    but Visual C++, Data Access, ActiveX, and Tools
  - On WinNT/XP/2000, you will be prompted to register environment variables for
    running the compiler from the command line - do it.
  - Install MSVC Service Pack 5 by running V:\msvc-sp5\setupsp5.exe, or from CD
    You may need to run v:\msvc-sp5\mdac_typ.exe first (setup will tell you if so)
  - Install the MSDN Library documentation if this is a primary dev machine.
    Install from CD, or by running V:\msdn-apr01\setup.exe.  To save time and
    disk space, choose custom install and uncheck everything but Text-Search 
    Index, VC++, Platform SDK, Knowledge Base, and All Other Files.
    
  - Install MS Platform SDK to get updated VC libs and headers
  - Run v:\platform-sdk\setup.exe to install the Feb 2001 Platform SDK and
    choose 'Install MS Platform SDK in default location.'
   (there may be problems with other newer versions of the Platform SDK) 
    This should prepend the Platform SDK paths to your PATH,INCLUDE, 
    and LIB dirs.  Building libpandadx requires this step (needs DX7 
    headers/libs)
    
Step 2: On Win2000, install ServicePack 2 and DX 8.1
  - run
    v:\win2k-servicepack2.exe  
    v:\dx8.1\DX81NTeng.exe
    or download them from http://windowsupdate.microsoft.com (this will be MUCH slower).
    Also check your video card manufacturer's website for updated drivers, the ones
    on the original win2k CD are most likely too old.

Step 3: Install Cygwin (v1.3.5 or above should work)
  - Install Cygwin by running V:\cygwin-1.3.5\setup.exe, and selecting 
    'install from local directory' (or go to cygwin.com and run setup.exe
     from the link there to install the latest version from the internet).
     Be careful to make sure that packages such as CVS, perl, bison,
     etc. which are required to build PANDA are selected for installation.
     Alternatively, you can install the latest Cygwin off the Internet from
     http://cygwin.com.
  - Open up a shell by running (and, if you desire, creating a shortcut to)
    tcsh.exe in: 
       C:/Cygwin/bin 
    Known Problems with tcsh:
       tcsh v6.09.00: (cygwin 1.0)   long paths result in 'Word too long' errors
       tcsh v6.10.00  (cygwin 1.3.3) uppercase filename executables not found on
                                     path, so build fails (cant find 'CL.EXE')
       tcsh v6.11.00  (cygwin 1.3.6) TAB filename completion sometimes fails
       
       v6.09 and v6.11 should be stored on V:\cygwin-1.3.5, you can copy them
       to c:\cygwin\bin if you want to use them
               
    Alternately, you can run a bash shell by going to the "Start"
    button at the bottom left of your screen, selecting "Programs",
    "Cygwin" and "bash".  You can then run "tcsh" at the bash prompt to make 
    things easier.  
  - Set up the Cygwin environment:
    - all of the commands below have been collected in V:\win\install\wintools\etc\setup_env.csh.  cd V:\win\install\wintools\etc, run tcsh, and 
do 'source setup_env.csh' to do all of the below automatically

    - Check for directories /bin /etc /tmp /usr and create them using 
      mkdir if they don't exist.  
    - Make the following directories:
      > mkdir /c /f /g /h /i /j /v
      > mkdir /msvc98 /mscommon /mspsdk /msvc7 /intel /ia32
      > mkdir /usr/local /usr/local/bin /usr/local/etc
      
    - Rename any cygwin-installed python.exe (if it exists) to avoid conflicts with required VRSTUDIO-compiled python,
      which is custom-built to load sitecustomize.py and setup PYTHONPATH for our panda environment
      
      > mv /bin/python.exe /bin/python-cygwin.exe

    - Create some links expected by the attach scripts:
      > ln -s /bin/tcsh /bin/csh
      > ln -s /bin/perl /usr/local/bin/perl
      > ln -s /bin/bash /usr/local/bin/bash
    - Connect the network drives:
      Note that any of your drive letters are already in use, you
      simply do a 'net use' to a different drive letter, then
      change the 'mount' command to point the official '/[drivelet]' dir
      at the real drive letter it's mounted to.  It is not necessary
      for /v to point to the v: drive.

      > net use f: "\\nufat\fat" /persistent:yes
      > net use g: "\\nufat\bit" /persistent:yes
      > net use h: "\\dimbo\usr2" /persistent:yes
      > net use i: "\\nufat\big" /persistent:yes
      > net use j: "\\nufat\for" /persistent:yes
      > net use v: "\\dimbo\panda" /persistent:yes
    - Mount directories.  Note the use of -b for the unix mounts. The
      VC++ mounts assume VC++ was installed in C:\Program Files:
      > mount -s c:/ /c
      > mount -s -b f:/ /f
      > mount -s -b g:/ /g
      > mount -s -b h:/ /h
      > mount -s -b i:/ /i
      > mount -s -b j:/ /j
      > mount -s -b v:/ /v
      > mount -s C:/Program\ Files/Microsoft\ Visual\ Studio/VC98 /msvc98
      > mount -s C:/Program\ Files/Microsoft\ Visual\ Studio/Common /mscommon
      > mount -s C:/Program\ Files/Microsoft\ Platform\ Sdk /mspsdk
      
      If VC7 is installed:
      > mount -s C:/Program\ Files/Microsoft\ Visual\ Studio .NET/Vc7 /msvc7
      
      If Intel C++ is installed:
      > mount -s C:/Program\ Files/Intel /intel
      > mount -s C:/Program\ Files/Intel/Compiler60/IA32 /ia32

    - These are optional, but handy
      > mkdir /fat
      > mkdir /bit
      > mkdir /fit
      > mkdir /ful
      > mkdir /alpha
      > mkdir /beta
      > mkdir /gamma
      > mkdir /for
      > mount -s -b F:/ /fat
      > mount -s -b G: /bit
      > mount -s -b H:/fit/ /fit
      > mount -s -b H:/ful/ /ful
      > mount -s -b I:/alpha/ /alpha
      > mount -s -b I:/beta /beta
      > mount -s -b I:/gamma /gamma
      > mount -s -b J:/ /for
      
Step 4: Create your home directory
  - Create a HOME directory:
    > mkdir /usr/<yourname>
  - Set the $HOME environment variable:
    - On WinNT use the Registry:
      - Select "My Computer" icon from the desktop.
      - Select "Control Panel" icon.
      - Select "System" icon.
      - Select "Environment" tab.
      - Create the variable "HOME" with the value "/usr/<yourname>".
      - click ok - ok - ok to exit (you must exit for the change to take 
        effect)
      - Now open a new shell to get the changes.
    - On Win98 use AUTOEXEC.BAT:
      - Add/Change the "HOME=/usr/<yourname>" line in C:\AUTOEXEC.BAT:
      - Note: if you want to edit your existing AUTOEXEC.BAT, you need
        to use "edit.exe" in order to generate the correct "newline"
        character (^M).
    - Note: We've seen a problem where we can't source ~/.cshrc if the home
      directory /usr/<yourname> does not match the user name %USERNAME% windows env var.
      To be safe, be sure and name your home directory to be /usr/<yourname>.
  - Copy important startup files into your home directory:
    > cd /v/win/install/wintools/panda
    > cp .cshrc .emacs Configrc Config.pp /usr/<yourname>
  - Make sure the contents of .cshrc are correct for your setup.  In
    particular, make sure the definition for PANDA_ROOT matches the
    directory you have installed Cygwin to (normally C:\Cygwin), and
    that CVSROOT is correct for your CVS login (if $USERNAME is not
    the same as your CVS/Unix account name, edit the variable as
    necessary).
    

Step 4.5:
    If using VC++ 7.0
        'source $WINTOOLS/bin/setup_msvc7.csh'  (ignore any 'already exists' messages)
        You will want to copy the top portion of setup_msvc7.csh to your .cshrc, and put
        'set_msvc7' cmd from the script at the end of your .cshrc to set up the PATH properly 
        as well as do the 'setenv USE_COMPILER MSVC7'.

Step 5: Update /usr/local/etc:
  - Copy vspec files from $WINTOOLS to /usr/local/etc
    > cd /v/win/install/wintools
    > cp_vspec 
  - (Optional) Add new username to vspec files
    - If you are setting up a new user, edit the *.vspec files
      in /usr/local/etc to reflect the new username and path to the player
      tree.  
    - Also edit (on the SGI, for instance on mother) the file 
      /fit/cvs/CVSROOT/passwd to add the new username as a valid user of
      CVS.
  - (Optional) Update default values in vspec files
    - Edit appropriate *.vspec files to specify which trees you wish to use
      as a default (e.g. install vs. minstall vs. personal)

Step 6: Grab the cvs trees
  - Open a new shell
  - Create personal trees:
    > cd ~
    > mkdir player
    > cd player
    # Just hit return when prompted for a password
    > cvs login
    > cvs co dtool (only if local dtool will be built)
    > cvs co panda (only if local panda will be built)
    > cvs co direct (only if local direct will be built)
    > cvs co toontown (only if local toontown will be built)
  - Choose which optimize level you want. This is set in Config.pp in
    your $HOME directory.  Look for #define OPTIMIZE and follow
    instructions above that.  You can only choose an arbitrary
    optimize level if you are building your own DTOOL and PANDA;
    otherwise, you must set it to the optimize level corresponding to
    the version of DTOOL/PANDA you intend to attach to (install is
    built OPTIMIZE 2, release is built OPTIMIZE 3).

Step 7: (Optional) Build $DTOOL
  - When you opened a new shell in step 6, it should have attached
    to $DTOOL:install automatically, but you will need to attach to your
    own DTOOL if you want to build your own.
    > cta dtool personal
    > cd $DTOOL
    > ppremake
    > nmake install

Step 8: (Optional) Build $PANDA 
  - Build panda
    > cta panda personal
    > cd $PANDA
    > ppremake
    > nmake install
  - You can now run "demo" to test the install and build - you should
    see a window pop up with a triangle in it.  To see the triangle with
    a texture on it, you'll need to be in $PANDA/src/all/testbed/ when
    you run "demo".

Step 9: Install Emacs   
  (note: this emacs does not use Cygwin paths, "/" represents the real root not "C:\Cygwin".)
  - get the tarball from /for/program/tarballs/emacs-20.7-fullbin-i386.tar.gz 
  - untar/install (This will install emacs into C:/emacs-20.7, 
    do not attempt to install it under a directory containing a space,
    like "Program Files".)
    > cd /c
    > tar xvzf ~/emacs-20.7-fullbin-i386.tar.gz
  - Copy lisp/script files
    > cp $DIRECT/src/directscripts/python-mode.el /c/emacs-20.7/lisp/progmodes
    > cp $DIRECT/src/directscripts/runPythonEmacs /usr/local/bin
  - Update environment variables (win2000).  Note: You should only need to
    do this if you intend to invoke Panda from a non-Cygwin prompt.  If you
    will always be using Cygwin, simply edit your .cshrc file to extend the
    path appropriately. 
    - right click on your computer icon at the top left of the screen
    - select "properties"
    - click on the "Advanced" tab
    - click on "Environment Variables..."
    - double click on the "Path" variable in the bottom pane (system variables)
    - add  C:\emacs-20.7\bin  to the end of the path (semicolon separated)
    - click ok - ok - ok to exit (you must exit for the change to take effect)

Step 10: Build $DIRECT
  > cta direct personal
  > cd $DIRECT
  > ppremake
  > nmake install

Step 11: Build $TOONTOWN
  > cta toontown personal
  > cd $TOONTOWN
  > ppremake
  > nmake install

Step 12: Generate Python Code
  > cd $DIRECT/bin
  > genPyCode win-debug (if you have built using OPTIMIZE = 1 or 2)
  > genPyCode win-release (if you have built using OPTIMIZE = 3 or 4)


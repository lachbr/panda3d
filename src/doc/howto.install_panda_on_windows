To install Panda3D on WinNT or Win98:
-------------------------------------
Notes:
  Lines preceeded by "#" are comments.
  Lines preceeded by ">" are instructions to be typed on the command line. 
  On WinNT, make sure your system clock is not set to GMT (only worry about
    this if your makedepend seems out of sync, i.e. you constantly reinstall
    old files over more current ones).
  Opengl appears to be installed with the os for both WinNT and Win98, but I
    read somewhere that we might want to do our own version control for
    this eventually using "VerInstallFile" to install our own version of
    OpenGl.
  "Touch" doesn't quite work properly on WinNT or Win98 currently.
  Make sure you run ftp in "binary" mode to fetch tarballs.
  "ftp" doesn't currently read "backspace" in rxvt, so you'll just have to be
    precise at the ftp prompt for now ("delete" doesn't work either).
    If this really bugs you, you can create a shortcut on the Desktop to
    "tcsh.exe" and run ftp properly from there rather than from rxvt.
  Occasionally, a freshly opened shell will hang in the middle of attaching
    or something.  If this happens, go ahead and kill the tcsh process (or
    ftp or rxvt process) using the Task Manager and try again.
  Make sure your machine has enough disk space - I'd start with the largest
    open space on any of your partitions.
  Make sure your machine has networking (IP, gateway, etc.) so you can use
    ftp to get to dumbo.

Step 1: Install Visual C++ (v6.0)
  # On WinNT, you will be prompted to register environment variables for
  # running the compiler from the command line - do it.
  # I also recommend installing the full MSDN Library documentation.

Step 2: Install Cygwin (v1.0)
  # Install Cygwin from the cd  
  # To get things started, you can run a bash shell by going to the "Start"
  # button at the bottom left of your screen, selecting "Programs",
  # "Cygwin" and "bash".  I usually run "tcsh" at the bash prompt to make 
  # things easier.
  # Set up the Cygwin environment:
    # Check for directories /bin /etc /tmp /usr and create them using 
    # mkdir if they don't exist.  Also make the following directories:
      > mkdir /mscommon
      > mkdir /msvc98
      > mkdir /c
    # Mount directories (This assumes VC++ was installed in C:\Program Files):
      > mount -s C:/Program\ Files/Microsoft\ Visual\ Studio/Common /mscommon
      > mount -s C:/Program\ Files/Microsoft\ Visual\ Studio/VC98 /msvc98
      > mount -s C:/ /c
    # Create some links expected by the attach scripts:
      > mkdir /usr/local
      > mkdir /usr/local/bin
      > ln -s /contrib/bin/tcsh /bin/csh
      > ln -s /contrib/bin/perl /usr/local/bin/perl
      > ln -s /bin/bash /usr/local/bin/bash

    # Connect and mount the network drives:
      > net use g: "\\nufat\bit" /persistent:yes
      > net use i: "\\nufat\big" /persistent:yes
      > net use v: "\\dimbo\mass" /persistent:yes
      > mkdir /g /i /v
      > mount -s -b g:/ /g
      > mount -s -b i:/ /i
      > mount -s -b v:/ /v

Step 3: Install winpandatools
  # Winpandatools currently includes rxvt, glut, and nspr, as well as
  # .cshrc, Configrc, the .vspec files, and Squeak.
  > cd /
  > tar zxvf /g/player/tarballs/winpandatools.tgz
  # Create a HOME directory:
    > mkdir /home/<yourname>
    > cp /usr/local/winpandatools/.cshrc /home/<yourname>
    > cp /usr/local/winpandatools/.emacs /home/<yourname>
    > cp /usr/local/winpandatools/Configrc /home/<yourname>

Step 4: Set $HOME environment variable 
  # On WinNT use the Registry:
    # Select "My Computer" icon from the desktop.
    # Select "Control Panel" icon.
    # Select "System" icon.
    # Select "Environment" tab.
    # Create the variable "HOME" with the value "/home/<yourname>".
    # Click the "Set" button.
    # Click the "Apply" button.
    # Now open a new shell to get the changes.
  # On Win98 use AUTOEXEC.BAT:
    # Change the "HOME=/home/<yourname>" line in 
    # /usr/local/winpandatools/AUTOEXEC.BAT
    > cp /usr/local/winpandatools/AUTOEXEC.BAT C:
    # Note: if you want to edit your existing AUTOEXEC.BAT, you need
    # to use "edit.exe" in order to generate the correct "newline"
    # character (^M).
  # Note: We've seen a problem where we can't source ~/.cshrc if the home
  # directory /home/<yourname> does not match the user name exactly. 
  # To be safe, be sure and name your home directory to be /home/<yourname>.

Step 5: (Optional) Add new username
  # If you are setting up a new user, edit the *.vspec files
  # in /usr/local/etc to reflect the new username and path to the player
  # tree.  Make and install a new winpandatools.tgz to reflect this change
  # by typing:
  > cd /usr/local/winpandatools
  > source install_winpandatools
  > mv winpandatools.tgz /g/player/tarballs

  # Also edit (on the SGI, for instance on dumbo) the file 
  # /fit/cvs/CVSROOT/passwd to add the new username as a valid user of CVS.

Step 6: Grab the cvs trees
  > cd ~
  > mkdir player
  > cd player
  > cvs login
  > cvs co dtool (only if local dtool will be built)
  > cvs co panda (only if local panda will be built)
  > cvs co direct
  # Choose which optimize level you want. This is set in /usr/local/etc/Config.pp
  # Look for #defing OPTIMIZE and follow instructions above that

Step 7: (Optional) Build $DTOOL
  # Now you must use the tcsh shortcut to open a new shell - it should attach
  # to $DTOOL automatically.
  > cd $DTOOL
  > ppremake
  > nmake install

Step 8: (Optional) Install DirectX
  # Install DirectX 7.0 (by default into C:\mssdk).  You need this to
  # successfully build all of panda.

Step 9: (Optional) Build $PANDA 
  > cta panda
  > cd $PANDA
  > ppremake
  > nmake install
  # You can now run "demo" to test the install and build - you should
  # see a window pop up with a triangle in it.  To see the triangle with
  # a texture on it, you'll need to be in $PANDA/src/all/testbed/ when
  # you run "demo".

Step 10: Install Python
  # get /for/program/tarballs/python16.exe and python_d.zip by ftp
  # run python16.exe to install python into C:/Python16 (the default
    location)
  > cd /c/Python16
  > unzip ~/python_d.zip

Step 11: Install Emacs
  # get /for/program/tarballs/emacs-20.7-fullbin-i386.tar.gz by ftp
  > cd /c
  > tar xvzf ~/emacs-20.7-fullbin-i386.tar.gz

  # This will install emacs into C:/emacs-20.7/ (not under program files)

  > cp $DIRECT/src/directscripts/python-mode.el /c/emacs-20.7/lisp/progmodes
  > cp $DIRECT/src/directscripts/runPythonEmacs /usr/local/bin

Step 12: Update environment variables (win2000)
  # right click on your computer icon at the top left of the screen
  # select "properties"
  # click on the "Advanced" tab
  # click on "Environment Variables..."
  # double click on the "Path" variable in the bottom pane (system variables)
  # add  C:\emacs-20.7\bin  to the end of the path (semicolon separated)
  # add  C:\PYTHON16  to the end of the path (semicolon separated)
  # click ok - ok - ok to exit (you must exit for the change to take effect)

Step 13: Build $DIRECT
  > cta direct
  > cd $DIRECT
  > ppremake
  > nmake install

Step 14: Build $TOONTOWN
  > cta toontown
  > cd $TOONTOWN
  > ppremake
  > nmake install

Step 15: Generate Python Code
  > cd $DIRECT/bin
  > ppython generatePythonCode
  # Follow instructions presented there



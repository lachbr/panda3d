from pandac.PandaModules import getModelPath, Filename, ConfigVariableFilename

# This file defines a number of standard "packages" that correspond to
# a Panda3D distribution.  These packages are built by passing this
# file to the ppackage utility, either as a packaged application, or
# as the module direct.p3d.ppackage.

# These packages are then downloaded by the Panda3D plugin and
# standalone runtime executable, and they contain the actual Panda3D
# runtime libraries.

# We divide the runtime into several smaller packages.  There is the
# core Panda3D package, which is needed by all Panda3D applications,
# and then a number of smaller, optional packages, which may or may
# not be needed by any one particular application.

class coreapi(solo):
    # The special "coreapi" package.  As a "solo", this is just a
    # single .dll (or dylib, or whatever).
    file('p3d_plugin.dll')

class images(package):
    # The default startup images are stored as their own package.
    names = ['download', 'play_click', 'play_ready', 'play_rollover',
             'auth_click', 'auth_ready', 'auth_rollover']
    configDict = {}
    for name in names:
        # Look for a png image first.
        basename = '%s.png' % (name)
        filename = Filename('plugin_images/%s' % (basename))
        found = filename.resolveFilename(getModelPath().getValue())
        if not found:
            found = filename.resolveFilename("models")
        if not found:
            # Then try a jpeg image.
            basename = '%s.jpg' % (name)
            filename = Filename('plugin_images/%s' % (basename))
            found = filename.resolveFilename(getModelPath().getValue())
            if not found:
                found = filename.resolveFilename("models")
            
        if found:
            # Add the image file to the package
            file(filename, newName = basename, extract = True)

            # And set the config variable to reference it.
            token = '%s_img' % (name)
            configDict[token] = basename
        else:
            print "Could not locate %s" % (filename)

    # Also make a few special cases.  We use the same default image
    # for download, ready, unauth, launch, and failed.
    download = configDict.get('download_img', None)
    if download:
        configDict['ready_img'] = download
        configDict['unauth_img'] = download
        configDict['launch_img'] = download
        configDict['failed_img'] = download

    config(**configDict)

class p3dcert(package):
    # This special application, used to pop up a dialog to prompt the
    # user to accept or deny unknown applications, is its own package.
    config(display_name = "Authorization Dialog")

    file('p3dcert.exe')

    # Also add the certificate authority file.
    cvar = ConfigVariableFilename('ca-bundle-filename')
    filename = Filename(cvar.getValue())
    if not filename.empty():
        file(filename, newName = 'ca-bundle.crt', extract = True)
        

class panda3d(package):
    # The core Panda3D package.  Contains Python and most of the graphics
    # code in Panda3D.

    config(display_name = "Panda3D")

    # First, add the minimum startup files for a Panda3D package.
    # These are files that the Panda3D runtime will explicitly look
    # for by name in order to get itself bootstrapped.
    setupPanda3D()
    
    # These are Python modules that are needed by most Panda3D
    # applications.  It doesn't matter too much if we miss one or two
    # here, since any module imported by any of this code will
    # automatically be included as well, and we end up with a pretty
    # complete list that way.
    module('direct.directbase.DirectStart',
           'direct.actor.*',
           'direct.controls.*',
           'direct.directdevices.*',
           'direct.directnotify.*',
           'direct.directtools.*',
           'direct.directutil.*',
           'direct.distributed.*',
           'direct.fsm.*',
           'direct.gui.*',
           'direct.interval.*',
           'direct.particles.*',
           'direct.showbase.*',
           'direct.showutil.*',
           'direct.stdpy.*')

    # Exclude these Panda3D libs; they are big and many applications don't
    # use them.  We define them as separate, optional packages, below,
    # except for skel - this is useless in a shipped game anyways.
    excludeModule('libpandaegg')
    excludeModule('libpandaode')
    excludeModule('libpandaskel')

    # Exclude these GUI toolkits; they're big, and many applications don't
    # use them.  We define them as separate, optional packages, below.
    excludeModule('wx',
                  'direct.showbase.WxGlobal')

    excludeModule('Tkinter',
                  'direct.showbase.TkGlobal',
                  'direct.tkpanels',
                  'direct.tkwidgets')

    # Most of the core Panda3D DLL's will be included implicitly due to
    # being referenced by the above Python code.  Here we name a few more
    # that are also needed, but aren't referenced by any code.  Again,
    # note that the .dll extension is automatically replaced with the
    # platform-specific extension for an executable.
    file('libpandagl.dll', 'libtinydisplay.dll')
    if platform.startswith('win'):
        file('libpandadx8.dll', 'libpandadx9.dll')

    # A basic config file is needed to lay some some fundamental runtime
    # variables.
    if platform.startswith('win'):
        auxDisplays = """
aux-display pandagl
aux-display pandadx9
aux-display pandadx8
aux-display tinydisplay
"""
    else:
        auxDisplays = """
aux-display pandagl
aux-display tinydisplay
"""
        
    file('Config.prc', extract = True, text = """
plugin-path $PANDA3D_ROOT
default-model-extension .bam
""" + auxDisplays)


class egg(package):
    # This package contains the code for reading and operating on egg
    # files.  Since the Packager automatically converts egg files to bam
    # files, this is not needed for most Panda3D applications.

    config(display_name = "Panda3D egg loader")
    require('panda3d')

    file('libpandaegg.dll')

    file('egg.prc', extract = True, text = """
plugin-path $EGG_ROOT
load-file-type egg pandaegg
""")

class ode(package):
    # This package contains the code for the ODE integration.
    # As not every application uses the ODE layers, and to cut down
    # the download size, it is provided as separate package.

    config(display_name = "Panda3D Open Dynamics Engine integration")
    require('panda3d')

    file('libpandaode.dll')

class wx(package):
    config(display_name = "wxPython GUI Toolkit")
    require('panda3d')

    module('direct.showbase.WxGlobal', 'wx', 'wx.*')


class tk(package):
    config(display_name = "Tk GUI Toolkit")
    require('panda3d')

    module('Tkinter',
           'direct.showbase.TkGlobal',
           'direct.tkpanels',
           'direct.tkwidgets')

class packp3d(p3d):
    # This application is a command-line convenience for building a p3d
    # application out of a directory hierarchy on disk.  We build it here
    # into its own p3d application, to allow end-users to easily build p3d
    # applications using the appropriate version of Python and Panda for
    # the targeted runtime.

    config(display_name = "Panda3D Application Packer",
           hidden = True, platform_specific = False)
    require('panda3d', 'egg')

    mainModule('direct.p3d.packp3d')


class ppackage(p3d):
    # As above, a packaging utility.  This is the fully-general ppackage
    # utility, which reads pdef files (like this one!) and creates one or
    # more packages or p3d applications.

    config(display_name = "Panda3D General Package Utility",
           hidden = True, platform_specific = False)
    require('panda3d', 'egg')

    mainModule('direct.p3d.ppackage')

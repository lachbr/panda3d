// Filename: shader.cxx
// Created by:  mike (09Jan97)
//
////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////
#include "shader.h"

////////////////////////////////////////////////////////////////////
// Static variables
////////////////////////////////////////////////////////////////////
TypeHandle Shader::_type_handle;
TypeHandle FrustumShader::_type_handle;

Shader::Visualize* Shader::_viz = (Shader::Visualize*)0L;

Shader::Visualize::Visualize(void)
{
}

Shader::Visualize::~Visualize(void)
{
}

void Shader::Visualize::DisplayTexture(PT(Texture)&, Shader*)
{
}

void Shader::Visualize::DisplayPixelBuffer(PT(PixelBuffer)&, Shader*)
{
}

void Shader::Visualize::Flush(void)
{
}

////////////////////////////////////////////////////////////////////
//     Function: Shader::apply
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
void Shader::
apply(Node *, const AllAttributesWrapper &, 
      const AllTransitionsWrapper &, 
      GraphicsStateGuardian *) 
{
  if (is_dirty()) config();
}

////////////////////////////////////////////////////////////////////
//     Function: Shader::pre_apply
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
void Shader::
pre_apply(Node *, const AllAttributesWrapper &, 
      const AllTransitionsWrapper &, 
      GraphicsStateGuardian *) 
{
}

////////////////////////////////////////////////////////////////////
//     Function: Shader::set_priority
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
void Shader::
set_priority(int priority)
{
  _priority = priority;
}

////////////////////////////////////////////////////////////////////
//     Function: Shader::get_priority
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
int Shader::
get_priority(void) const
{
  return _priority;
}


////////////////////////////////////////////////////////////////////
//     Function: Shader::set_multipass
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
void Shader::
set_multipass(bool on)
{
  _multipass_on = on;
}






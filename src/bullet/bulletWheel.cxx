// Filename: bulletWheel.cxx
// Created by:  enn0x (17Feb10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////

#include "bulletWheel.h"

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
BulletWheel::
BulletWheel(btWheelInfo &info) : _info(info) {

}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_suspension_rest_length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_suspension_rest_length() const {

  return _info.getSuspensionRestLength();
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_suspension_stiffness
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_suspension_stiffness(float value) {

  _info.m_suspensionStiffness = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_suspension_stiffness
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_suspension_stiffness() const {

  return _info.m_suspensionStiffness;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_max_suspension_travel_cm
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_max_suspension_travel_cm(float value) {

  _info.m_maxSuspensionTravelCm = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_max_suspension_travel_cm
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_max_suspension_travel_cm() const {

  return _info.m_maxSuspensionTravelCm;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_friction_slip
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_friction_slip(float value) {

  _info.m_frictionSlip = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_friction_slip
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_friction_slip() const {

  return _info.m_frictionSlip;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_max_suspension_force
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_max_suspension_force(float value) {

  _info.m_maxSuspensionForce = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_max_suspension_force
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_max_suspension_force() const {

  return _info.m_maxSuspensionForce;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_wheels_damping_compression
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_wheels_damping_compression(float value) {

  _info.m_wheelsDampingCompression = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_wheels_damping_compression
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_wheels_damping_compression() const {

  return _info.m_wheelsDampingCompression;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_wheels_damping_relaxation
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_wheels_damping_relaxation(float value) {

  _info.m_wheelsDampingRelaxation = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_wheels_damping_relaxation
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_wheels_damping_relaxation() const {

  return _info.m_wheelsDampingRelaxation;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_roll_influence
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_roll_influence(float value) {

  _info.m_rollInfluence = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_roll_influence
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_roll_influence() const {

  return _info.m_rollInfluence;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_wheel_radius
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_wheel_radius(float value) {

  _info.m_wheelsRadius = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_wheel_radius
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_wheel_radius() const {

  return _info.m_wheelsRadius;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_steering
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_steering(float value) {

  _info.m_steering = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_steering
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_steering() const {

  return _info.m_steering;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_rotation
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_rotation(float value) {

  _info.m_rotation = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_rotation
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_rotation() const {

  return _info.m_rotation;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_delta_rotation
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_delta_rotation(float value) {

  _info.m_deltaRotation = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_delta_rotation
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_delta_rotation() const {

  return _info.m_deltaRotation;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_engine_force
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_engine_force(float value) {

  _info.m_engineForce = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_engine_force
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_engine_force() const {

  return _info.m_engineForce;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_brake
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_brake(float value) {

  _info.m_brake = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_brake
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_brake() const {

  return _info.m_brake;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_skid_info
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_skid_info(float value) {

  _info.m_skidInfo = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_skid_info
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_skid_info() const {

  return _info.m_skidInfo;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_wheels_suspension_force
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_wheels_suspension_force(float value) {

  _info.m_wheelsSuspensionForce = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_wheels_suspension_force
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_wheels_suspension_force() const {

  return _info.m_wheelsSuspensionForce;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_suspension_relative_velocity
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_suspension_relative_velocity(float value) {

  _info.m_suspensionRelativeVelocity = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_suspension_relative_velocity
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_suspension_relative_velocity() const {

  return _info.m_suspensionRelativeVelocity;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_clipped_inv_connection_point_cs
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_clipped_inv_connection_point_cs(float value) {

  _info.m_clippedInvContactDotSuspension = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_clipped_inv_connection_point_cs
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
float BulletWheel::
get_clipped_inv_connection_point_cs() const {

  return _info.m_clippedInvContactDotSuspension;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_chassis_connection_point_cs
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_chassis_connection_point_cs(const LPoint3f &pos) {

  nassertv(!pos.is_nan());
  _info.m_chassisConnectionPointCS = LVecBase3f_to_btVector3(pos);
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_chassis_connection_point_cs
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
LPoint3f BulletWheel::
get_chassis_connection_point_cs() const {

  return btVector3_to_LPoint3f(_info.m_chassisConnectionPointCS);
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_wheel_direction_cs
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_wheel_direction_cs(const LVector3f &dir) {

  nassertv(!dir.is_nan());
  _info.m_wheelDirectionCS = LVecBase3f_to_btVector3(dir);
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_wheel_direction_cs
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
LVector3f BulletWheel::
get_wheel_direction_cs() const {

  return btVector3_to_LVector3f(_info.m_wheelDirectionCS);
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_wheel_axle_cs
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_wheel_axle_cs(const LVector3f &axle) {

  nassertv(!axle.is_nan());
  _info.m_wheelAxleCS = LVecBase3f_to_btVector3(axle);
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_wheel_axle_cs
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
LVector3f BulletWheel::
get_wheel_axle_cs() const {

  return btVector3_to_LVector3f(_info.m_wheelAxleCS);
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_world_transform
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_world_transform(const LMatrix4f &mat) {

  nassertv(!mat.is_nan());
  _info.m_worldTransform = LMatrix4f_to_btTrans(mat);
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_world_transform
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
LMatrix4f BulletWheel::
get_world_transform() const {

  return btTrans_to_LMatrix4f(_info.m_worldTransform);
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_front_wheel
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_front_wheel(bool value) {

  _info.m_bIsFrontWheel = value;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::is_front_wheel
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
bool BulletWheel::
is_front_wheel() const {

  return _info.m_bIsFrontWheel;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::set_node
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
void BulletWheel::
set_node(PandaNode *node) {

  _info.m_clientInfo = (void *)node;
}

////////////////////////////////////////////////////////////////////
//     Function: BulletWheel::get_node
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
PandaNode *BulletWheel::
get_node() const {

  return (_info.m_clientInfo == NULL) ? NULL : (PandaNode *)_info.m_clientInfo;
}

